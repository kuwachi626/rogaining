(function(){const I=document.createElement("link").relList;if(I&&I.supports&&I.supports("modulepreload"))return;for(const l of document.querySelectorAll('link[rel="modulepreload"]'))A(l);new MutationObserver(l=>{for(const e of l)if(e.type==="childList")for(const d of e.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&A(d)}).observe(document,{childList:!0,subtree:!0});function C(l){const e={};return l.integrity&&(e.integrity=l.integrity),l.referrerPolicy&&(e.referrerPolicy=l.referrerPolicy),l.crossOrigin==="use-credentials"?e.credentials="include":l.crossOrigin==="anonymous"?e.credentials="omit":e.credentials="same-origin",e}function A(l){if(l.ep)return;l.ep=!0;const e=C(l);fetch(l.href,e)}})();var Fg=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function QZ(g){return g&&g.__esModule&&Object.prototype.hasOwnProperty.call(g,"default")?g.default:g}function EZ(g){if(g.__esModule)return g;var I=g.default;if(typeof I=="function"){var C=function A(){return this instanceof A?Reflect.construct(I,arguments,this.constructor):I.apply(this,arguments)};C.prototype=I.prototype}else C={};return Object.defineProperty(C,"__esModule",{value:!0}),Object.keys(g).forEach(function(A){var l=Object.getOwnPropertyDescriptor(g,A);Object.defineProperty(C,A,l.get?l:{enumerable:!0,get:function(){return g[A]}})}),C}var $t={exports:{}},Ol={},go={exports:{}},v={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var FA=Symbol.for("react.element"),MZ=Symbol.for("react.portal"),LZ=Symbol.for("react.fragment"),xZ=Symbol.for("react.strict_mode"),DZ=Symbol.for("react.profiler"),TZ=Symbol.for("react.provider"),jZ=Symbol.for("react.context"),PZ=Symbol.for("react.forward_ref"),OZ=Symbol.for("react.suspense"),qZ=Symbol.for("react.memo"),_Z=Symbol.for("react.lazy"),Bc=Symbol.iterator;function $Z(g){return g===null||typeof g!="object"?null:(g=Bc&&g[Bc]||g["@@iterator"],typeof g=="function"?g:null)}var Io={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Co=Object.assign,Ao={};function QC(g,I,C){this.props=g,this.context=I,this.refs=Ao,this.updater=C||Io}QC.prototype.isReactComponent={};QC.prototype.setState=function(g,I){if(typeof g!="object"&&typeof g!="function"&&g!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,g,I,"setState")};QC.prototype.forceUpdate=function(g){this.updater.enqueueForceUpdate(this,g,"forceUpdate")};function lo(){}lo.prototype=QC.prototype;function mn(g,I,C){this.props=g,this.context=I,this.refs=Ao,this.updater=C||Io}var bn=mn.prototype=new lo;bn.constructor=mn;Co(bn,QC.prototype);bn.isPureReactComponent=!0;var hc=Array.isArray,eo=Object.prototype.hasOwnProperty,rn={current:null},no={key:!0,ref:!0,__self:!0,__source:!0};function co(g,I,C){var A,l={},e=null,d=null;if(I!=null)for(A in I.ref!==void 0&&(d=I.ref),I.key!==void 0&&(e=""+I.key),I)eo.call(I,A)&&!no.hasOwnProperty(A)&&(l[A]=I[A]);var n=arguments.length-2;if(n===1)l.children=C;else if(1<n){for(var c=Array(n),t=0;t<n;t++)c[t]=arguments[t+2];l.children=c}if(g&&g.defaultProps)for(A in n=g.defaultProps,n)l[A]===void 0&&(l[A]=n[A]);return{$$typeof:FA,type:g,key:e,ref:d,props:l,_owner:rn.current}}function gs(g,I){return{$$typeof:FA,type:g.type,key:I,ref:g.ref,props:g.props,_owner:g._owner}}function Bn(g){return typeof g=="object"&&g!==null&&g.$$typeof===FA}function Is(g){var I={"=":"=0",":":"=2"};return"$"+g.replace(/[=:]/g,function(C){return I[C]})}var yc=/\/+/g;function He(g,I){return typeof g=="object"&&g!==null&&g.key!=null?Is(""+g.key):I.toString(36)}function Zl(g,I,C,A,l){var e=typeof g;(e==="undefined"||e==="boolean")&&(g=null);var d=!1;if(g===null)d=!0;else switch(e){case"string":case"number":d=!0;break;case"object":switch(g.$$typeof){case FA:case MZ:d=!0}}if(d)return d=g,l=l(d),g=A===""?"."+He(d,0):A,hc(l)?(C="",g!=null&&(C=g.replace(yc,"$&/")+"/"),Zl(l,I,C,"",function(t){return t})):l!=null&&(Bn(l)&&(l=gs(l,C+(!l.key||d&&d.key===l.key?"":(""+l.key).replace(yc,"$&/")+"/")+g)),I.push(l)),1;if(d=0,A=A===""?".":A+":",hc(g))for(var n=0;n<g.length;n++){e=g[n];var c=A+He(e,n);d+=Zl(e,I,C,c,l)}else if(c=$Z(g),typeof c=="function")for(g=c.call(g),n=0;!(e=g.next()).done;)e=e.value,c=A+He(e,n++),d+=Zl(e,I,C,c,l);else if(e==="object")throw I=String(g),Error("Objects are not valid as a React child (found: "+(I==="[object Object]"?"object with keys {"+Object.keys(g).join(", ")+"}":I)+"). If you meant to render a collection of children, use an array instead.");return d}function DA(g,I,C){if(g==null)return g;var A=[],l=0;return Zl(g,A,"","",function(e){return I.call(C,e,l++)}),A}function Cs(g){if(g._status===-1){var I=g._result;I=I(),I.then(function(C){(g._status===0||g._status===-1)&&(g._status=1,g._result=C)},function(C){(g._status===0||g._status===-1)&&(g._status=2,g._result=C)}),g._status===-1&&(g._status=0,g._result=I)}if(g._status===1)return g._result.default;throw g._result}var ug={current:null},sl={transition:null},As={ReactCurrentDispatcher:ug,ReactCurrentBatchConfig:sl,ReactCurrentOwner:rn};function to(){throw Error("act(...) is not supported in production builds of React.")}v.Children={map:DA,forEach:function(g,I,C){DA(g,function(){I.apply(this,arguments)},C)},count:function(g){var I=0;return DA(g,function(){I++}),I},toArray:function(g){return DA(g,function(I){return I})||[]},only:function(g){if(!Bn(g))throw Error("React.Children.only expected to receive a single React element child.");return g}};v.Component=QC;v.Fragment=LZ;v.Profiler=DZ;v.PureComponent=mn;v.StrictMode=xZ;v.Suspense=OZ;v.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=As;v.act=to;v.cloneElement=function(g,I,C){if(g==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+g+".");var A=Co({},g.props),l=g.key,e=g.ref,d=g._owner;if(I!=null){if(I.ref!==void 0&&(e=I.ref,d=rn.current),I.key!==void 0&&(l=""+I.key),g.type&&g.type.defaultProps)var n=g.type.defaultProps;for(c in I)eo.call(I,c)&&!no.hasOwnProperty(c)&&(A[c]=I[c]===void 0&&n!==void 0?n[c]:I[c])}var c=arguments.length-2;if(c===1)A.children=C;else if(1<c){n=Array(c);for(var t=0;t<c;t++)n[t]=arguments[t+2];A.children=n}return{$$typeof:FA,type:g.type,key:l,ref:e,props:A,_owner:d}};v.createContext=function(g){return g={$$typeof:jZ,_currentValue:g,_currentValue2:g,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},g.Provider={$$typeof:TZ,_context:g},g.Consumer=g};v.createElement=co;v.createFactory=function(g){var I=co.bind(null,g);return I.type=g,I};v.createRef=function(){return{current:null}};v.forwardRef=function(g){return{$$typeof:PZ,render:g}};v.isValidElement=Bn;v.lazy=function(g){return{$$typeof:_Z,_payload:{_status:-1,_result:g},_init:Cs}};v.memo=function(g,I){return{$$typeof:qZ,type:g,compare:I===void 0?null:I}};v.startTransition=function(g){var I=sl.transition;sl.transition={};try{g()}finally{sl.transition=I}};v.unstable_act=to;v.useCallback=function(g,I){return ug.current.useCallback(g,I)};v.useContext=function(g){return ug.current.useContext(g)};v.useDebugValue=function(){};v.useDeferredValue=function(g){return ug.current.useDeferredValue(g)};v.useEffect=function(g,I){return ug.current.useEffect(g,I)};v.useId=function(){return ug.current.useId()};v.useImperativeHandle=function(g,I,C){return ug.current.useImperativeHandle(g,I,C)};v.useInsertionEffect=function(g,I){return ug.current.useInsertionEffect(g,I)};v.useLayoutEffect=function(g,I){return ug.current.useLayoutEffect(g,I)};v.useMemo=function(g,I){return ug.current.useMemo(g,I)};v.useReducer=function(g,I,C){return ug.current.useReducer(g,I,C)};v.useRef=function(g){return ug.current.useRef(g)};v.useState=function(g){return ug.current.useState(g)};v.useSyncExternalStore=function(g,I,C){return ug.current.useSyncExternalStore(g,I,C)};v.useTransition=function(){return ug.current.useTransition()};v.version="18.3.1";go.exports=v;var E=go.exports;const ls=QZ(E);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var es=E,ds=Symbol.for("react.element"),ns=Symbol.for("react.fragment"),cs=Object.prototype.hasOwnProperty,ts=es.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,os={key:!0,ref:!0,__self:!0,__source:!0};function oo(g,I,C){var A,l={},e=null,d=null;C!==void 0&&(e=""+C),I.key!==void 0&&(e=""+I.key),I.ref!==void 0&&(d=I.ref);for(A in I)cs.call(I,A)&&!os.hasOwnProperty(A)&&(l[A]=I[A]);if(g&&g.defaultProps)for(A in I=g.defaultProps,I)l[A]===void 0&&(l[A]=I[A]);return{$$typeof:ds,type:g,key:e,ref:d,props:l,_owner:ts.current}}Ol.Fragment=ns;Ol.jsx=oo;Ol.jsxs=oo;$t.exports=Ol;var L=$t.exports,id={},io={exports:{}},pg={},Zo={exports:{}},so={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(g){function I(X,k){var Y=X.length;X.push(k);g:for(;0<Y;){var P=Y-1>>>1,Ig=X[P];if(0<l(Ig,k))X[P]=k,X[Y]=Ig,Y=P;else break g}}function C(X){return X.length===0?null:X[0]}function A(X){if(X.length===0)return null;var k=X[0],Y=X.pop();if(Y!==k){X[0]=Y;g:for(var P=0,Ig=X.length,LA=Ig>>>1;P<LA;){var fI=2*(P+1)-1,Ye=X[fI],zI=fI+1,xA=X[zI];if(0>l(Ye,Y))zI<Ig&&0>l(xA,Ye)?(X[P]=xA,X[zI]=Y,P=zI):(X[P]=Ye,X[fI]=Y,P=fI);else if(zI<Ig&&0>l(xA,Y))X[P]=xA,X[zI]=Y,P=zI;else break g}}return k}function l(X,k){var Y=X.sortIndex-k.sortIndex;return Y!==0?Y:X.id-k.id}if(typeof performance=="object"&&typeof performance.now=="function"){var e=performance;g.unstable_now=function(){return e.now()}}else{var d=Date,n=d.now();g.unstable_now=function(){return d.now()-n}}var c=[],t=[],o=1,i=null,a=3,u=!1,b=!1,r=!1,V=typeof setTimeout=="function"?setTimeout:null,G=typeof clearTimeout=="function"?clearTimeout:null,Z=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function s(X){for(var k=C(t);k!==null;){if(k.callback===null)A(t);else if(k.startTime<=X)A(t),k.sortIndex=k.expirationTime,I(c,k);else break;k=C(t)}}function m(X){if(r=!1,s(X),!b)if(C(c)!==null)b=!0,pe(h);else{var k=C(t);k!==null&&ke(m,k.startTime-X)}}function h(X,k){b=!1,r&&(r=!1,G(J),J=-1),u=!0;var Y=a;try{for(s(k),i=C(c);i!==null&&(!(i.expirationTime>k)||X&&!q());){var P=i.callback;if(typeof P=="function"){i.callback=null,a=i.priorityLevel;var Ig=P(i.expirationTime<=k);k=g.unstable_now(),typeof Ig=="function"?i.callback=Ig:i===C(c)&&A(c),s(k)}else A(c);i=C(c)}if(i!==null)var LA=!0;else{var fI=C(t);fI!==null&&ke(m,fI.startTime-k),LA=!1}return LA}finally{i=null,a=Y,u=!1}}var W=!1,y=null,J=-1,w=5,R=-1;function q(){return!(g.unstable_now()-R<w)}function NI(){if(y!==null){var X=g.unstable_now();R=X;var k=!0;try{k=y(!0,X)}finally{k?ZI():(W=!1,y=null)}}else W=!1}var ZI;if(typeof Z=="function")ZI=function(){Z(NI)};else if(typeof MessageChannel<"u"){var eC=new MessageChannel,UZ=eC.port2;eC.port1.onmessage=NI,ZI=function(){UZ.postMessage(null)}}else ZI=function(){V(NI,0)};function pe(X){y=X,W||(W=!0,ZI())}function ke(X,k){J=V(function(){X(g.unstable_now())},k)}g.unstable_IdlePriority=5,g.unstable_ImmediatePriority=1,g.unstable_LowPriority=4,g.unstable_NormalPriority=3,g.unstable_Profiling=null,g.unstable_UserBlockingPriority=2,g.unstable_cancelCallback=function(X){X.callback=null},g.unstable_continueExecution=function(){b||u||(b=!0,pe(h))},g.unstable_forceFrameRate=function(X){0>X||125<X?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):w=0<X?Math.floor(1e3/X):5},g.unstable_getCurrentPriorityLevel=function(){return a},g.unstable_getFirstCallbackNode=function(){return C(c)},g.unstable_next=function(X){switch(a){case 1:case 2:case 3:var k=3;break;default:k=a}var Y=a;a=k;try{return X()}finally{a=Y}},g.unstable_pauseExecution=function(){},g.unstable_requestPaint=function(){},g.unstable_runWithPriority=function(X,k){switch(X){case 1:case 2:case 3:case 4:case 5:break;default:X=3}var Y=a;a=X;try{return k()}finally{a=Y}},g.unstable_scheduleCallback=function(X,k,Y){var P=g.unstable_now();switch(typeof Y=="object"&&Y!==null?(Y=Y.delay,Y=typeof Y=="number"&&0<Y?P+Y:P):Y=P,X){case 1:var Ig=-1;break;case 2:Ig=250;break;case 5:Ig=1073741823;break;case 4:Ig=1e4;break;default:Ig=5e3}return Ig=Y+Ig,X={id:o++,callback:k,priorityLevel:X,startTime:Y,expirationTime:Ig,sortIndex:-1},Y>P?(X.sortIndex=Y,I(t,X),C(c)===null&&X===C(t)&&(r?(G(J),J=-1):r=!0,ke(m,Y-P))):(X.sortIndex=Ig,I(c,X),b||u||(b=!0,pe(h))),X},g.unstable_shouldYield=q,g.unstable_wrapCallback=function(X){var k=a;return function(){var Y=a;a=k;try{return X.apply(this,arguments)}finally{a=Y}}}})(so);Zo.exports=so;var is=Zo.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Zs=E,Rg=is;function B(g){for(var I="https://reactjs.org/docs/error-decoder.html?invariant="+g,C=1;C<arguments.length;C++)I+="&args[]="+encodeURIComponent(arguments[C]);return"Minified React error #"+g+"; visit "+I+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var ao=new Set,mA={};function CC(g,I){vC(g,I),vC(g+"Capture",I)}function vC(g,I){for(mA[g]=I,g=0;g<I.length;g++)ao.add(I[g])}var nI=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Zd=Object.prototype.hasOwnProperty,ss=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Wc={},Vc={};function as(g){return Zd.call(Vc,g)?!0:Zd.call(Wc,g)?!1:ss.test(g)?Vc[g]=!0:(Wc[g]=!0,!1)}function Gs(g,I,C,A){if(C!==null&&C.type===0)return!1;switch(typeof I){case"function":case"symbol":return!0;case"boolean":return A?!1:C!==null?!C.acceptsBooleans:(g=g.toLowerCase().slice(0,5),g!=="data-"&&g!=="aria-");default:return!1}}function us(g,I,C,A){if(I===null||typeof I>"u"||Gs(g,I,C,A))return!0;if(A)return!1;if(C!==null)switch(C.type){case 3:return!I;case 4:return I===!1;case 5:return isNaN(I);case 6:return isNaN(I)||1>I}return!1}function mg(g,I,C,A,l,e,d){this.acceptsBooleans=I===2||I===3||I===4,this.attributeName=A,this.attributeNamespace=l,this.mustUseProperty=C,this.propertyName=g,this.type=I,this.sanitizeURL=e,this.removeEmptyString=d}var cg={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(g){cg[g]=new mg(g,0,!1,g,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(g){var I=g[0];cg[I]=new mg(I,1,!1,g[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(g){cg[g]=new mg(g,2,!1,g.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(g){cg[g]=new mg(g,2,!1,g,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(g){cg[g]=new mg(g,3,!1,g.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(g){cg[g]=new mg(g,3,!0,g,null,!1,!1)});["capture","download"].forEach(function(g){cg[g]=new mg(g,4,!1,g,null,!1,!1)});["cols","rows","size","span"].forEach(function(g){cg[g]=new mg(g,6,!1,g,null,!1,!1)});["rowSpan","start"].forEach(function(g){cg[g]=new mg(g,5,!1,g.toLowerCase(),null,!1,!1)});var hn=/[\-:]([a-z])/g;function yn(g){return g[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(g){var I=g.replace(hn,yn);cg[I]=new mg(I,1,!1,g,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(g){var I=g.replace(hn,yn);cg[I]=new mg(I,1,!1,g,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(g){var I=g.replace(hn,yn);cg[I]=new mg(I,1,!1,g,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(g){cg[g]=new mg(g,1,!1,g.toLowerCase(),null,!1,!1)});cg.xlinkHref=new mg("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(g){cg[g]=new mg(g,1,!1,g.toLowerCase(),null,!0,!0)});function Wn(g,I,C,A){var l=cg.hasOwnProperty(I)?cg[I]:null;(l!==null?l.type!==0:A||!(2<I.length)||I[0]!=="o"&&I[0]!=="O"||I[1]!=="n"&&I[1]!=="N")&&(us(I,C,l,A)&&(C=null),A||l===null?as(I)&&(C===null?g.removeAttribute(I):g.setAttribute(I,""+C)):l.mustUseProperty?g[l.propertyName]=C===null?l.type===3?!1:"":C:(I=l.attributeName,A=l.attributeNamespace,C===null?g.removeAttribute(I):(l=l.type,C=l===3||l===4&&C===!0?"":""+C,A?g.setAttributeNS(A,I,C):g.setAttribute(I,C))))}var iI=Zs.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,TA=Symbol.for("react.element"),GC=Symbol.for("react.portal"),uC=Symbol.for("react.fragment"),Vn=Symbol.for("react.strict_mode"),sd=Symbol.for("react.profiler"),Go=Symbol.for("react.provider"),uo=Symbol.for("react.context"),Sn=Symbol.for("react.forward_ref"),ad=Symbol.for("react.suspense"),Gd=Symbol.for("react.suspense_list"),Xn=Symbol.for("react.memo"),uI=Symbol.for("react.lazy"),mo=Symbol.for("react.offscreen"),Sc=Symbol.iterator;function DC(g){return g===null||typeof g!="object"?null:(g=Sc&&g[Sc]||g["@@iterator"],typeof g=="function"?g:null)}var T=Object.assign,ve;function IA(g){if(ve===void 0)try{throw Error()}catch(C){var I=C.stack.trim().match(/\n( *(at )?)/);ve=I&&I[1]||""}return`
`+ve+g}var Ke=!1;function we(g,I){if(!g||Ke)return"";Ke=!0;var C=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(I)if(I=function(){throw Error()},Object.defineProperty(I.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(I,[])}catch(t){var A=t}Reflect.construct(g,[],I)}else{try{I.call()}catch(t){A=t}g.call(I.prototype)}else{try{throw Error()}catch(t){A=t}g()}}catch(t){if(t&&A&&typeof t.stack=="string"){for(var l=t.stack.split(`
`),e=A.stack.split(`
`),d=l.length-1,n=e.length-1;1<=d&&0<=n&&l[d]!==e[n];)n--;for(;1<=d&&0<=n;d--,n--)if(l[d]!==e[n]){if(d!==1||n!==1)do if(d--,n--,0>n||l[d]!==e[n]){var c=`
`+l[d].replace(" at new "," at ");return g.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",g.displayName)),c}while(1<=d&&0<=n);break}}}finally{Ke=!1,Error.prepareStackTrace=C}return(g=g?g.displayName||g.name:"")?IA(g):""}function ms(g){switch(g.tag){case 5:return IA(g.type);case 16:return IA("Lazy");case 13:return IA("Suspense");case 19:return IA("SuspenseList");case 0:case 2:case 15:return g=we(g.type,!1),g;case 11:return g=we(g.type.render,!1),g;case 1:return g=we(g.type,!0),g;default:return""}}function ud(g){if(g==null)return null;if(typeof g=="function")return g.displayName||g.name||null;if(typeof g=="string")return g;switch(g){case uC:return"Fragment";case GC:return"Portal";case sd:return"Profiler";case Vn:return"StrictMode";case ad:return"Suspense";case Gd:return"SuspenseList"}if(typeof g=="object")switch(g.$$typeof){case uo:return(g.displayName||"Context")+".Consumer";case Go:return(g._context.displayName||"Context")+".Provider";case Sn:var I=g.render;return g=g.displayName,g||(g=I.displayName||I.name||"",g=g!==""?"ForwardRef("+g+")":"ForwardRef"),g;case Xn:return I=g.displayName||null,I!==null?I:ud(g.type)||"Memo";case uI:I=g._payload,g=g._init;try{return ud(g(I))}catch{}}return null}function bs(g){var I=g.type;switch(g.tag){case 24:return"Cache";case 9:return(I.displayName||"Context")+".Consumer";case 10:return(I._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return g=I.render,g=g.displayName||g.name||"",I.displayName||(g!==""?"ForwardRef("+g+")":"ForwardRef");case 7:return"Fragment";case 5:return I;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return ud(I);case 8:return I===Vn?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof I=="function")return I.displayName||I.name||null;if(typeof I=="string")return I}return null}function YI(g){switch(typeof g){case"boolean":case"number":case"string":case"undefined":return g;case"object":return g;default:return""}}function bo(g){var I=g.type;return(g=g.nodeName)&&g.toLowerCase()==="input"&&(I==="checkbox"||I==="radio")}function rs(g){var I=bo(g)?"checked":"value",C=Object.getOwnPropertyDescriptor(g.constructor.prototype,I),A=""+g[I];if(!g.hasOwnProperty(I)&&typeof C<"u"&&typeof C.get=="function"&&typeof C.set=="function"){var l=C.get,e=C.set;return Object.defineProperty(g,I,{configurable:!0,get:function(){return l.call(this)},set:function(d){A=""+d,e.call(this,d)}}),Object.defineProperty(g,I,{enumerable:C.enumerable}),{getValue:function(){return A},setValue:function(d){A=""+d},stopTracking:function(){g._valueTracker=null,delete g[I]}}}}function jA(g){g._valueTracker||(g._valueTracker=rs(g))}function ro(g){if(!g)return!1;var I=g._valueTracker;if(!I)return!0;var C=I.getValue(),A="";return g&&(A=bo(g)?g.checked?"true":"false":g.value),g=A,g!==C?(I.setValue(g),!0):!1}function Vl(g){if(g=g||(typeof document<"u"?document:void 0),typeof g>"u")return null;try{return g.activeElement||g.body}catch{return g.body}}function md(g,I){var C=I.checked;return T({},I,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:C??g._wrapperState.initialChecked})}function Xc(g,I){var C=I.defaultValue==null?"":I.defaultValue,A=I.checked!=null?I.checked:I.defaultChecked;C=YI(I.value!=null?I.value:C),g._wrapperState={initialChecked:A,initialValue:C,controlled:I.type==="checkbox"||I.type==="radio"?I.checked!=null:I.value!=null}}function Bo(g,I){I=I.checked,I!=null&&Wn(g,"checked",I,!1)}function bd(g,I){Bo(g,I);var C=YI(I.value),A=I.type;if(C!=null)A==="number"?(C===0&&g.value===""||g.value!=C)&&(g.value=""+C):g.value!==""+C&&(g.value=""+C);else if(A==="submit"||A==="reset"){g.removeAttribute("value");return}I.hasOwnProperty("value")?rd(g,I.type,C):I.hasOwnProperty("defaultValue")&&rd(g,I.type,YI(I.defaultValue)),I.checked==null&&I.defaultChecked!=null&&(g.defaultChecked=!!I.defaultChecked)}function Jc(g,I,C){if(I.hasOwnProperty("value")||I.hasOwnProperty("defaultValue")){var A=I.type;if(!(A!=="submit"&&A!=="reset"||I.value!==void 0&&I.value!==null))return;I=""+g._wrapperState.initialValue,C||I===g.value||(g.value=I),g.defaultValue=I}C=g.name,C!==""&&(g.name=""),g.defaultChecked=!!g._wrapperState.initialChecked,C!==""&&(g.name=C)}function rd(g,I,C){(I!=="number"||Vl(g.ownerDocument)!==g)&&(C==null?g.defaultValue=""+g._wrapperState.initialValue:g.defaultValue!==""+C&&(g.defaultValue=""+C))}var CA=Array.isArray;function JC(g,I,C,A){if(g=g.options,I){I={};for(var l=0;l<C.length;l++)I["$"+C[l]]=!0;for(C=0;C<g.length;C++)l=I.hasOwnProperty("$"+g[C].value),g[C].selected!==l&&(g[C].selected=l),l&&A&&(g[C].defaultSelected=!0)}else{for(C=""+YI(C),I=null,l=0;l<g.length;l++){if(g[l].value===C){g[l].selected=!0,A&&(g[l].defaultSelected=!0);return}I!==null||g[l].disabled||(I=g[l])}I!==null&&(I.selected=!0)}}function Bd(g,I){if(I.dangerouslySetInnerHTML!=null)throw Error(B(91));return T({},I,{value:void 0,defaultValue:void 0,children:""+g._wrapperState.initialValue})}function Rc(g,I){var C=I.value;if(C==null){if(C=I.children,I=I.defaultValue,C!=null){if(I!=null)throw Error(B(92));if(CA(C)){if(1<C.length)throw Error(B(93));C=C[0]}I=C}I==null&&(I=""),C=I}g._wrapperState={initialValue:YI(C)}}function ho(g,I){var C=YI(I.value),A=YI(I.defaultValue);C!=null&&(C=""+C,C!==g.value&&(g.value=C),I.defaultValue==null&&g.defaultValue!==C&&(g.defaultValue=C)),A!=null&&(g.defaultValue=""+A)}function pc(g){var I=g.textContent;I===g._wrapperState.initialValue&&I!==""&&I!==null&&(g.value=I)}function yo(g){switch(g){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function hd(g,I){return g==null||g==="http://www.w3.org/1999/xhtml"?yo(I):g==="http://www.w3.org/2000/svg"&&I==="foreignObject"?"http://www.w3.org/1999/xhtml":g}var PA,Wo=function(g){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(I,C,A,l){MSApp.execUnsafeLocalFunction(function(){return g(I,C,A,l)})}:g}(function(g,I){if(g.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in g)g.innerHTML=I;else{for(PA=PA||document.createElement("div"),PA.innerHTML="<svg>"+I.valueOf().toString()+"</svg>",I=PA.firstChild;g.firstChild;)g.removeChild(g.firstChild);for(;I.firstChild;)g.appendChild(I.firstChild)}});function bA(g,I){if(I){var C=g.firstChild;if(C&&C===g.lastChild&&C.nodeType===3){C.nodeValue=I;return}}g.textContent=I}var dA={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Bs=["Webkit","ms","Moz","O"];Object.keys(dA).forEach(function(g){Bs.forEach(function(I){I=I+g.charAt(0).toUpperCase()+g.substring(1),dA[I]=dA[g]})});function Vo(g,I,C){return I==null||typeof I=="boolean"||I===""?"":C||typeof I!="number"||I===0||dA.hasOwnProperty(g)&&dA[g]?(""+I).trim():I+"px"}function So(g,I){g=g.style;for(var C in I)if(I.hasOwnProperty(C)){var A=C.indexOf("--")===0,l=Vo(C,I[C],A);C==="float"&&(C="cssFloat"),A?g.setProperty(C,l):g[C]=l}}var hs=T({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function yd(g,I){if(I){if(hs[g]&&(I.children!=null||I.dangerouslySetInnerHTML!=null))throw Error(B(137,g));if(I.dangerouslySetInnerHTML!=null){if(I.children!=null)throw Error(B(60));if(typeof I.dangerouslySetInnerHTML!="object"||!("__html"in I.dangerouslySetInnerHTML))throw Error(B(61))}if(I.style!=null&&typeof I.style!="object")throw Error(B(62))}}function Wd(g,I){if(g.indexOf("-")===-1)return typeof I.is=="string";switch(g){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Vd=null;function Jn(g){return g=g.target||g.srcElement||window,g.correspondingUseElement&&(g=g.correspondingUseElement),g.nodeType===3?g.parentNode:g}var Sd=null,RC=null,pC=null;function kc(g){if(g=zA(g)){if(typeof Sd!="function")throw Error(B(280));var I=g.stateNode;I&&(I=Ie(I),Sd(g.stateNode,g.type,I))}}function Xo(g){RC?pC?pC.push(g):pC=[g]:RC=g}function Jo(){if(RC){var g=RC,I=pC;if(pC=RC=null,kc(g),I)for(g=0;g<I.length;g++)kc(I[g])}}function Ro(g,I){return g(I)}function po(){}var Fe=!1;function ko(g,I,C){if(Fe)return g(I,C);Fe=!0;try{return Ro(g,I,C)}finally{Fe=!1,(RC!==null||pC!==null)&&(po(),Jo())}}function rA(g,I){var C=g.stateNode;if(C===null)return null;var A=Ie(C);if(A===null)return null;C=A[I];g:switch(I){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(A=!A.disabled)||(g=g.type,A=!(g==="button"||g==="input"||g==="select"||g==="textarea")),g=!A;break g;default:g=!1}if(g)return null;if(C&&typeof C!="function")throw Error(B(231,I,typeof C));return C}var Xd=!1;if(nI)try{var TC={};Object.defineProperty(TC,"passive",{get:function(){Xd=!0}}),window.addEventListener("test",TC,TC),window.removeEventListener("test",TC,TC)}catch{Xd=!1}function ys(g,I,C,A,l,e,d,n,c){var t=Array.prototype.slice.call(arguments,3);try{I.apply(C,t)}catch(o){this.onError(o)}}var nA=!1,Sl=null,Xl=!1,Jd=null,Ws={onError:function(g){nA=!0,Sl=g}};function Vs(g,I,C,A,l,e,d,n,c){nA=!1,Sl=null,ys.apply(Ws,arguments)}function Ss(g,I,C,A,l,e,d,n,c){if(Vs.apply(this,arguments),nA){if(nA){var t=Sl;nA=!1,Sl=null}else throw Error(B(198));Xl||(Xl=!0,Jd=t)}}function AC(g){var I=g,C=g;if(g.alternate)for(;I.return;)I=I.return;else{g=I;do I=g,I.flags&4098&&(C=I.return),g=I.return;while(g)}return I.tag===3?C:null}function Yo(g){if(g.tag===13){var I=g.memoizedState;if(I===null&&(g=g.alternate,g!==null&&(I=g.memoizedState)),I!==null)return I.dehydrated}return null}function Yc(g){if(AC(g)!==g)throw Error(B(188))}function Xs(g){var I=g.alternate;if(!I){if(I=AC(g),I===null)throw Error(B(188));return I!==g?null:g}for(var C=g,A=I;;){var l=C.return;if(l===null)break;var e=l.alternate;if(e===null){if(A=l.return,A!==null){C=A;continue}break}if(l.child===e.child){for(e=l.child;e;){if(e===C)return Yc(l),g;if(e===A)return Yc(l),I;e=e.sibling}throw Error(B(188))}if(C.return!==A.return)C=l,A=e;else{for(var d=!1,n=l.child;n;){if(n===C){d=!0,C=l,A=e;break}if(n===A){d=!0,A=l,C=e;break}n=n.sibling}if(!d){for(n=e.child;n;){if(n===C){d=!0,C=e,A=l;break}if(n===A){d=!0,A=e,C=l;break}n=n.sibling}if(!d)throw Error(B(189))}}if(C.alternate!==A)throw Error(B(190))}if(C.tag!==3)throw Error(B(188));return C.stateNode.current===C?g:I}function Ho(g){return g=Xs(g),g!==null?vo(g):null}function vo(g){if(g.tag===5||g.tag===6)return g;for(g=g.child;g!==null;){var I=vo(g);if(I!==null)return I;g=g.sibling}return null}var Ko=Rg.unstable_scheduleCallback,Hc=Rg.unstable_cancelCallback,Js=Rg.unstable_shouldYield,Rs=Rg.unstable_requestPaint,O=Rg.unstable_now,ps=Rg.unstable_getCurrentPriorityLevel,Rn=Rg.unstable_ImmediatePriority,wo=Rg.unstable_UserBlockingPriority,Jl=Rg.unstable_NormalPriority,ks=Rg.unstable_LowPriority,Fo=Rg.unstable_IdlePriority,ql=null,qg=null;function Ys(g){if(qg&&typeof qg.onCommitFiberRoot=="function")try{qg.onCommitFiberRoot(ql,g,void 0,(g.current.flags&128)===128)}catch{}}var xg=Math.clz32?Math.clz32:Ks,Hs=Math.log,vs=Math.LN2;function Ks(g){return g>>>=0,g===0?32:31-(Hs(g)/vs|0)|0}var OA=64,qA=4194304;function AA(g){switch(g&-g){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return g&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return g&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return g}}function Rl(g,I){var C=g.pendingLanes;if(C===0)return 0;var A=0,l=g.suspendedLanes,e=g.pingedLanes,d=C&268435455;if(d!==0){var n=d&~l;n!==0?A=AA(n):(e&=d,e!==0&&(A=AA(e)))}else d=C&~l,d!==0?A=AA(d):e!==0&&(A=AA(e));if(A===0)return 0;if(I!==0&&I!==A&&!(I&l)&&(l=A&-A,e=I&-I,l>=e||l===16&&(e&4194240)!==0))return I;if(A&4&&(A|=C&16),I=g.entangledLanes,I!==0)for(g=g.entanglements,I&=A;0<I;)C=31-xg(I),l=1<<C,A|=g[C],I&=~l;return A}function ws(g,I){switch(g){case 1:case 2:case 4:return I+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return I+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Fs(g,I){for(var C=g.suspendedLanes,A=g.pingedLanes,l=g.expirationTimes,e=g.pendingLanes;0<e;){var d=31-xg(e),n=1<<d,c=l[d];c===-1?(!(n&C)||n&A)&&(l[d]=ws(n,I)):c<=I&&(g.expiredLanes|=n),e&=~n}}function Rd(g){return g=g.pendingLanes&-1073741825,g!==0?g:g&1073741824?1073741824:0}function No(){var g=OA;return OA<<=1,!(OA&4194240)&&(OA=64),g}function Ne(g){for(var I=[],C=0;31>C;C++)I.push(g);return I}function NA(g,I,C){g.pendingLanes|=I,I!==536870912&&(g.suspendedLanes=0,g.pingedLanes=0),g=g.eventTimes,I=31-xg(I),g[I]=C}function Ns(g,I){var C=g.pendingLanes&~I;g.pendingLanes=I,g.suspendedLanes=0,g.pingedLanes=0,g.expiredLanes&=I,g.mutableReadLanes&=I,g.entangledLanes&=I,I=g.entanglements;var A=g.eventTimes;for(g=g.expirationTimes;0<C;){var l=31-xg(C),e=1<<l;I[l]=0,A[l]=-1,g[l]=-1,C&=~e}}function pn(g,I){var C=g.entangledLanes|=I;for(g=g.entanglements;C;){var A=31-xg(C),l=1<<A;l&I|g[A]&I&&(g[A]|=I),C&=~l}}var F=0;function fo(g){return g&=-g,1<g?4<g?g&268435455?16:536870912:4:1}var zo,kn,Uo,Qo,Eo,pd=!1,_A=[],WI=null,VI=null,SI=null,BA=new Map,hA=new Map,bI=[],fs="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function vc(g,I){switch(g){case"focusin":case"focusout":WI=null;break;case"dragenter":case"dragleave":VI=null;break;case"mouseover":case"mouseout":SI=null;break;case"pointerover":case"pointerout":BA.delete(I.pointerId);break;case"gotpointercapture":case"lostpointercapture":hA.delete(I.pointerId)}}function jC(g,I,C,A,l,e){return g===null||g.nativeEvent!==e?(g={blockedOn:I,domEventName:C,eventSystemFlags:A,nativeEvent:e,targetContainers:[l]},I!==null&&(I=zA(I),I!==null&&kn(I)),g):(g.eventSystemFlags|=A,I=g.targetContainers,l!==null&&I.indexOf(l)===-1&&I.push(l),g)}function zs(g,I,C,A,l){switch(I){case"focusin":return WI=jC(WI,g,I,C,A,l),!0;case"dragenter":return VI=jC(VI,g,I,C,A,l),!0;case"mouseover":return SI=jC(SI,g,I,C,A,l),!0;case"pointerover":var e=l.pointerId;return BA.set(e,jC(BA.get(e)||null,g,I,C,A,l)),!0;case"gotpointercapture":return e=l.pointerId,hA.set(e,jC(hA.get(e)||null,g,I,C,A,l)),!0}return!1}function Mo(g){var I=DI(g.target);if(I!==null){var C=AC(I);if(C!==null){if(I=C.tag,I===13){if(I=Yo(C),I!==null){g.blockedOn=I,Eo(g.priority,function(){Uo(C)});return}}else if(I===3&&C.stateNode.current.memoizedState.isDehydrated){g.blockedOn=C.tag===3?C.stateNode.containerInfo:null;return}}}g.blockedOn=null}function al(g){if(g.blockedOn!==null)return!1;for(var I=g.targetContainers;0<I.length;){var C=kd(g.domEventName,g.eventSystemFlags,I[0],g.nativeEvent);if(C===null){C=g.nativeEvent;var A=new C.constructor(C.type,C);Vd=A,C.target.dispatchEvent(A),Vd=null}else return I=zA(C),I!==null&&kn(I),g.blockedOn=C,!1;I.shift()}return!0}function Kc(g,I,C){al(g)&&C.delete(I)}function Us(){pd=!1,WI!==null&&al(WI)&&(WI=null),VI!==null&&al(VI)&&(VI=null),SI!==null&&al(SI)&&(SI=null),BA.forEach(Kc),hA.forEach(Kc)}function PC(g,I){g.blockedOn===I&&(g.blockedOn=null,pd||(pd=!0,Rg.unstable_scheduleCallback(Rg.unstable_NormalPriority,Us)))}function yA(g){function I(l){return PC(l,g)}if(0<_A.length){PC(_A[0],g);for(var C=1;C<_A.length;C++){var A=_A[C];A.blockedOn===g&&(A.blockedOn=null)}}for(WI!==null&&PC(WI,g),VI!==null&&PC(VI,g),SI!==null&&PC(SI,g),BA.forEach(I),hA.forEach(I),C=0;C<bI.length;C++)A=bI[C],A.blockedOn===g&&(A.blockedOn=null);for(;0<bI.length&&(C=bI[0],C.blockedOn===null);)Mo(C),C.blockedOn===null&&bI.shift()}var kC=iI.ReactCurrentBatchConfig,pl=!0;function Qs(g,I,C,A){var l=F,e=kC.transition;kC.transition=null;try{F=1,Yn(g,I,C,A)}finally{F=l,kC.transition=e}}function Es(g,I,C,A){var l=F,e=kC.transition;kC.transition=null;try{F=4,Yn(g,I,C,A)}finally{F=l,kC.transition=e}}function Yn(g,I,C,A){if(pl){var l=kd(g,I,C,A);if(l===null)Te(g,I,A,kl,C),vc(g,A);else if(zs(l,g,I,C,A))A.stopPropagation();else if(vc(g,A),I&4&&-1<fs.indexOf(g)){for(;l!==null;){var e=zA(l);if(e!==null&&zo(e),e=kd(g,I,C,A),e===null&&Te(g,I,A,kl,C),e===l)break;l=e}l!==null&&A.stopPropagation()}else Te(g,I,A,null,C)}}var kl=null;function kd(g,I,C,A){if(kl=null,g=Jn(A),g=DI(g),g!==null)if(I=AC(g),I===null)g=null;else if(C=I.tag,C===13){if(g=Yo(I),g!==null)return g;g=null}else if(C===3){if(I.stateNode.current.memoizedState.isDehydrated)return I.tag===3?I.stateNode.containerInfo:null;g=null}else I!==g&&(g=null);return kl=g,null}function Lo(g){switch(g){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(ps()){case Rn:return 1;case wo:return 4;case Jl:case ks:return 16;case Fo:return 536870912;default:return 16}default:return 16}}var hI=null,Hn=null,Gl=null;function xo(){if(Gl)return Gl;var g,I=Hn,C=I.length,A,l="value"in hI?hI.value:hI.textContent,e=l.length;for(g=0;g<C&&I[g]===l[g];g++);var d=C-g;for(A=1;A<=d&&I[C-A]===l[e-A];A++);return Gl=l.slice(g,1<A?1-A:void 0)}function ul(g){var I=g.keyCode;return"charCode"in g?(g=g.charCode,g===0&&I===13&&(g=13)):g=I,g===10&&(g=13),32<=g||g===13?g:0}function $A(){return!0}function wc(){return!1}function kg(g){function I(C,A,l,e,d){this._reactName=C,this._targetInst=l,this.type=A,this.nativeEvent=e,this.target=d,this.currentTarget=null;for(var n in g)g.hasOwnProperty(n)&&(C=g[n],this[n]=C?C(e):e[n]);return this.isDefaultPrevented=(e.defaultPrevented!=null?e.defaultPrevented:e.returnValue===!1)?$A:wc,this.isPropagationStopped=wc,this}return T(I.prototype,{preventDefault:function(){this.defaultPrevented=!0;var C=this.nativeEvent;C&&(C.preventDefault?C.preventDefault():typeof C.returnValue!="unknown"&&(C.returnValue=!1),this.isDefaultPrevented=$A)},stopPropagation:function(){var C=this.nativeEvent;C&&(C.stopPropagation?C.stopPropagation():typeof C.cancelBubble!="unknown"&&(C.cancelBubble=!0),this.isPropagationStopped=$A)},persist:function(){},isPersistent:$A}),I}var EC={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(g){return g.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},vn=kg(EC),fA=T({},EC,{view:0,detail:0}),Ms=kg(fA),fe,ze,OC,_l=T({},fA,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Kn,button:0,buttons:0,relatedTarget:function(g){return g.relatedTarget===void 0?g.fromElement===g.srcElement?g.toElement:g.fromElement:g.relatedTarget},movementX:function(g){return"movementX"in g?g.movementX:(g!==OC&&(OC&&g.type==="mousemove"?(fe=g.screenX-OC.screenX,ze=g.screenY-OC.screenY):ze=fe=0,OC=g),fe)},movementY:function(g){return"movementY"in g?g.movementY:ze}}),Fc=kg(_l),Ls=T({},_l,{dataTransfer:0}),xs=kg(Ls),Ds=T({},fA,{relatedTarget:0}),Ue=kg(Ds),Ts=T({},EC,{animationName:0,elapsedTime:0,pseudoElement:0}),js=kg(Ts),Ps=T({},EC,{clipboardData:function(g){return"clipboardData"in g?g.clipboardData:window.clipboardData}}),Os=kg(Ps),qs=T({},EC,{data:0}),Nc=kg(qs),_s={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},$s={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ga={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ia(g){var I=this.nativeEvent;return I.getModifierState?I.getModifierState(g):(g=ga[g])?!!I[g]:!1}function Kn(){return Ia}var Ca=T({},fA,{key:function(g){if(g.key){var I=_s[g.key]||g.key;if(I!=="Unidentified")return I}return g.type==="keypress"?(g=ul(g),g===13?"Enter":String.fromCharCode(g)):g.type==="keydown"||g.type==="keyup"?$s[g.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Kn,charCode:function(g){return g.type==="keypress"?ul(g):0},keyCode:function(g){return g.type==="keydown"||g.type==="keyup"?g.keyCode:0},which:function(g){return g.type==="keypress"?ul(g):g.type==="keydown"||g.type==="keyup"?g.keyCode:0}}),Aa=kg(Ca),la=T({},_l,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),fc=kg(la),ea=T({},fA,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Kn}),da=kg(ea),na=T({},EC,{propertyName:0,elapsedTime:0,pseudoElement:0}),ca=kg(na),ta=T({},_l,{deltaX:function(g){return"deltaX"in g?g.deltaX:"wheelDeltaX"in g?-g.wheelDeltaX:0},deltaY:function(g){return"deltaY"in g?g.deltaY:"wheelDeltaY"in g?-g.wheelDeltaY:"wheelDelta"in g?-g.wheelDelta:0},deltaZ:0,deltaMode:0}),oa=kg(ta),ia=[9,13,27,32],wn=nI&&"CompositionEvent"in window,cA=null;nI&&"documentMode"in document&&(cA=document.documentMode);var Za=nI&&"TextEvent"in window&&!cA,Do=nI&&(!wn||cA&&8<cA&&11>=cA),zc=String.fromCharCode(32),Uc=!1;function To(g,I){switch(g){case"keyup":return ia.indexOf(I.keyCode)!==-1;case"keydown":return I.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jo(g){return g=g.detail,typeof g=="object"&&"data"in g?g.data:null}var mC=!1;function sa(g,I){switch(g){case"compositionend":return jo(I);case"keypress":return I.which!==32?null:(Uc=!0,zc);case"textInput":return g=I.data,g===zc&&Uc?null:g;default:return null}}function aa(g,I){if(mC)return g==="compositionend"||!wn&&To(g,I)?(g=xo(),Gl=Hn=hI=null,mC=!1,g):null;switch(g){case"paste":return null;case"keypress":if(!(I.ctrlKey||I.altKey||I.metaKey)||I.ctrlKey&&I.altKey){if(I.char&&1<I.char.length)return I.char;if(I.which)return String.fromCharCode(I.which)}return null;case"compositionend":return Do&&I.locale!=="ko"?null:I.data;default:return null}}var Ga={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Qc(g){var I=g&&g.nodeName&&g.nodeName.toLowerCase();return I==="input"?!!Ga[g.type]:I==="textarea"}function Po(g,I,C,A){Xo(A),I=Yl(I,"onChange"),0<I.length&&(C=new vn("onChange","change",null,C,A),g.push({event:C,listeners:I}))}var tA=null,WA=null;function ua(g){di(g,0)}function $l(g){var I=BC(g);if(ro(I))return g}function ma(g,I){if(g==="change")return I}var Oo=!1;if(nI){var Qe;if(nI){var Ee="oninput"in document;if(!Ee){var Ec=document.createElement("div");Ec.setAttribute("oninput","return;"),Ee=typeof Ec.oninput=="function"}Qe=Ee}else Qe=!1;Oo=Qe&&(!document.documentMode||9<document.documentMode)}function Mc(){tA&&(tA.detachEvent("onpropertychange",qo),WA=tA=null)}function qo(g){if(g.propertyName==="value"&&$l(WA)){var I=[];Po(I,WA,g,Jn(g)),ko(ua,I)}}function ba(g,I,C){g==="focusin"?(Mc(),tA=I,WA=C,tA.attachEvent("onpropertychange",qo)):g==="focusout"&&Mc()}function ra(g){if(g==="selectionchange"||g==="keyup"||g==="keydown")return $l(WA)}function Ba(g,I){if(g==="click")return $l(I)}function ha(g,I){if(g==="input"||g==="change")return $l(I)}function ya(g,I){return g===I&&(g!==0||1/g===1/I)||g!==g&&I!==I}var Tg=typeof Object.is=="function"?Object.is:ya;function VA(g,I){if(Tg(g,I))return!0;if(typeof g!="object"||g===null||typeof I!="object"||I===null)return!1;var C=Object.keys(g),A=Object.keys(I);if(C.length!==A.length)return!1;for(A=0;A<C.length;A++){var l=C[A];if(!Zd.call(I,l)||!Tg(g[l],I[l]))return!1}return!0}function Lc(g){for(;g&&g.firstChild;)g=g.firstChild;return g}function xc(g,I){var C=Lc(g);g=0;for(var A;C;){if(C.nodeType===3){if(A=g+C.textContent.length,g<=I&&A>=I)return{node:C,offset:I-g};g=A}g:{for(;C;){if(C.nextSibling){C=C.nextSibling;break g}C=C.parentNode}C=void 0}C=Lc(C)}}function _o(g,I){return g&&I?g===I?!0:g&&g.nodeType===3?!1:I&&I.nodeType===3?_o(g,I.parentNode):"contains"in g?g.contains(I):g.compareDocumentPosition?!!(g.compareDocumentPosition(I)&16):!1:!1}function $o(){for(var g=window,I=Vl();I instanceof g.HTMLIFrameElement;){try{var C=typeof I.contentWindow.location.href=="string"}catch{C=!1}if(C)g=I.contentWindow;else break;I=Vl(g.document)}return I}function Fn(g){var I=g&&g.nodeName&&g.nodeName.toLowerCase();return I&&(I==="input"&&(g.type==="text"||g.type==="search"||g.type==="tel"||g.type==="url"||g.type==="password")||I==="textarea"||g.contentEditable==="true")}function Wa(g){var I=$o(),C=g.focusedElem,A=g.selectionRange;if(I!==C&&C&&C.ownerDocument&&_o(C.ownerDocument.documentElement,C)){if(A!==null&&Fn(C)){if(I=A.start,g=A.end,g===void 0&&(g=I),"selectionStart"in C)C.selectionStart=I,C.selectionEnd=Math.min(g,C.value.length);else if(g=(I=C.ownerDocument||document)&&I.defaultView||window,g.getSelection){g=g.getSelection();var l=C.textContent.length,e=Math.min(A.start,l);A=A.end===void 0?e:Math.min(A.end,l),!g.extend&&e>A&&(l=A,A=e,e=l),l=xc(C,e);var d=xc(C,A);l&&d&&(g.rangeCount!==1||g.anchorNode!==l.node||g.anchorOffset!==l.offset||g.focusNode!==d.node||g.focusOffset!==d.offset)&&(I=I.createRange(),I.setStart(l.node,l.offset),g.removeAllRanges(),e>A?(g.addRange(I),g.extend(d.node,d.offset)):(I.setEnd(d.node,d.offset),g.addRange(I)))}}for(I=[],g=C;g=g.parentNode;)g.nodeType===1&&I.push({element:g,left:g.scrollLeft,top:g.scrollTop});for(typeof C.focus=="function"&&C.focus(),C=0;C<I.length;C++)g=I[C],g.element.scrollLeft=g.left,g.element.scrollTop=g.top}}var Va=nI&&"documentMode"in document&&11>=document.documentMode,bC=null,Yd=null,oA=null,Hd=!1;function Dc(g,I,C){var A=C.window===C?C.document:C.nodeType===9?C:C.ownerDocument;Hd||bC==null||bC!==Vl(A)||(A=bC,"selectionStart"in A&&Fn(A)?A={start:A.selectionStart,end:A.selectionEnd}:(A=(A.ownerDocument&&A.ownerDocument.defaultView||window).getSelection(),A={anchorNode:A.anchorNode,anchorOffset:A.anchorOffset,focusNode:A.focusNode,focusOffset:A.focusOffset}),oA&&VA(oA,A)||(oA=A,A=Yl(Yd,"onSelect"),0<A.length&&(I=new vn("onSelect","select",null,I,C),g.push({event:I,listeners:A}),I.target=bC)))}function gl(g,I){var C={};return C[g.toLowerCase()]=I.toLowerCase(),C["Webkit"+g]="webkit"+I,C["Moz"+g]="moz"+I,C}var rC={animationend:gl("Animation","AnimationEnd"),animationiteration:gl("Animation","AnimationIteration"),animationstart:gl("Animation","AnimationStart"),transitionend:gl("Transition","TransitionEnd")},Me={},gi={};nI&&(gi=document.createElement("div").style,"AnimationEvent"in window||(delete rC.animationend.animation,delete rC.animationiteration.animation,delete rC.animationstart.animation),"TransitionEvent"in window||delete rC.transitionend.transition);function ge(g){if(Me[g])return Me[g];if(!rC[g])return g;var I=rC[g],C;for(C in I)if(I.hasOwnProperty(C)&&C in gi)return Me[g]=I[C];return g}var Ii=ge("animationend"),Ci=ge("animationiteration"),Ai=ge("animationstart"),li=ge("transitionend"),ei=new Map,Tc="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function vI(g,I){ei.set(g,I),CC(I,[g])}for(var Le=0;Le<Tc.length;Le++){var xe=Tc[Le],Sa=xe.toLowerCase(),Xa=xe[0].toUpperCase()+xe.slice(1);vI(Sa,"on"+Xa)}vI(Ii,"onAnimationEnd");vI(Ci,"onAnimationIteration");vI(Ai,"onAnimationStart");vI("dblclick","onDoubleClick");vI("focusin","onFocus");vI("focusout","onBlur");vI(li,"onTransitionEnd");vC("onMouseEnter",["mouseout","mouseover"]);vC("onMouseLeave",["mouseout","mouseover"]);vC("onPointerEnter",["pointerout","pointerover"]);vC("onPointerLeave",["pointerout","pointerover"]);CC("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));CC("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));CC("onBeforeInput",["compositionend","keypress","textInput","paste"]);CC("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));CC("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));CC("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lA="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ja=new Set("cancel close invalid load scroll toggle".split(" ").concat(lA));function jc(g,I,C){var A=g.type||"unknown-event";g.currentTarget=C,Ss(A,I,void 0,g),g.currentTarget=null}function di(g,I){I=(I&4)!==0;for(var C=0;C<g.length;C++){var A=g[C],l=A.event;A=A.listeners;g:{var e=void 0;if(I)for(var d=A.length-1;0<=d;d--){var n=A[d],c=n.instance,t=n.currentTarget;if(n=n.listener,c!==e&&l.isPropagationStopped())break g;jc(l,n,t),e=c}else for(d=0;d<A.length;d++){if(n=A[d],c=n.instance,t=n.currentTarget,n=n.listener,c!==e&&l.isPropagationStopped())break g;jc(l,n,t),e=c}}}if(Xl)throw g=Jd,Xl=!1,Jd=null,g}function U(g,I){var C=I[Nd];C===void 0&&(C=I[Nd]=new Set);var A=g+"__bubble";C.has(A)||(ni(I,g,2,!1),C.add(A))}function De(g,I,C){var A=0;I&&(A|=4),ni(C,g,A,I)}var Il="_reactListening"+Math.random().toString(36).slice(2);function SA(g){if(!g[Il]){g[Il]=!0,ao.forEach(function(C){C!=="selectionchange"&&(Ja.has(C)||De(C,!1,g),De(C,!0,g))});var I=g.nodeType===9?g:g.ownerDocument;I===null||I[Il]||(I[Il]=!0,De("selectionchange",!1,I))}}function ni(g,I,C,A){switch(Lo(I)){case 1:var l=Qs;break;case 4:l=Es;break;default:l=Yn}C=l.bind(null,I,C,g),l=void 0,!Xd||I!=="touchstart"&&I!=="touchmove"&&I!=="wheel"||(l=!0),A?l!==void 0?g.addEventListener(I,C,{capture:!0,passive:l}):g.addEventListener(I,C,!0):l!==void 0?g.addEventListener(I,C,{passive:l}):g.addEventListener(I,C,!1)}function Te(g,I,C,A,l){var e=A;if(!(I&1)&&!(I&2)&&A!==null)g:for(;;){if(A===null)return;var d=A.tag;if(d===3||d===4){var n=A.stateNode.containerInfo;if(n===l||n.nodeType===8&&n.parentNode===l)break;if(d===4)for(d=A.return;d!==null;){var c=d.tag;if((c===3||c===4)&&(c=d.stateNode.containerInfo,c===l||c.nodeType===8&&c.parentNode===l))return;d=d.return}for(;n!==null;){if(d=DI(n),d===null)return;if(c=d.tag,c===5||c===6){A=e=d;continue g}n=n.parentNode}}A=A.return}ko(function(){var t=e,o=Jn(C),i=[];g:{var a=ei.get(g);if(a!==void 0){var u=vn,b=g;switch(g){case"keypress":if(ul(C)===0)break g;case"keydown":case"keyup":u=Aa;break;case"focusin":b="focus",u=Ue;break;case"focusout":b="blur",u=Ue;break;case"beforeblur":case"afterblur":u=Ue;break;case"click":if(C.button===2)break g;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=Fc;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=xs;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=da;break;case Ii:case Ci:case Ai:u=js;break;case li:u=ca;break;case"scroll":u=Ms;break;case"wheel":u=oa;break;case"copy":case"cut":case"paste":u=Os;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=fc}var r=(I&4)!==0,V=!r&&g==="scroll",G=r?a!==null?a+"Capture":null:a;r=[];for(var Z=t,s;Z!==null;){s=Z;var m=s.stateNode;if(s.tag===5&&m!==null&&(s=m,G!==null&&(m=rA(Z,G),m!=null&&r.push(XA(Z,m,s)))),V)break;Z=Z.return}0<r.length&&(a=new u(a,b,null,C,o),i.push({event:a,listeners:r}))}}if(!(I&7)){g:{if(a=g==="mouseover"||g==="pointerover",u=g==="mouseout"||g==="pointerout",a&&C!==Vd&&(b=C.relatedTarget||C.fromElement)&&(DI(b)||b[cI]))break g;if((u||a)&&(a=o.window===o?o:(a=o.ownerDocument)?a.defaultView||a.parentWindow:window,u?(b=C.relatedTarget||C.toElement,u=t,b=b?DI(b):null,b!==null&&(V=AC(b),b!==V||b.tag!==5&&b.tag!==6)&&(b=null)):(u=null,b=t),u!==b)){if(r=Fc,m="onMouseLeave",G="onMouseEnter",Z="mouse",(g==="pointerout"||g==="pointerover")&&(r=fc,m="onPointerLeave",G="onPointerEnter",Z="pointer"),V=u==null?a:BC(u),s=b==null?a:BC(b),a=new r(m,Z+"leave",u,C,o),a.target=V,a.relatedTarget=s,m=null,DI(o)===t&&(r=new r(G,Z+"enter",b,C,o),r.target=s,r.relatedTarget=V,m=r),V=m,u&&b)I:{for(r=u,G=b,Z=0,s=r;s;s=dC(s))Z++;for(s=0,m=G;m;m=dC(m))s++;for(;0<Z-s;)r=dC(r),Z--;for(;0<s-Z;)G=dC(G),s--;for(;Z--;){if(r===G||G!==null&&r===G.alternate)break I;r=dC(r),G=dC(G)}r=null}else r=null;u!==null&&Pc(i,a,u,r,!1),b!==null&&V!==null&&Pc(i,V,b,r,!0)}}g:{if(a=t?BC(t):window,u=a.nodeName&&a.nodeName.toLowerCase(),u==="select"||u==="input"&&a.type==="file")var h=ma;else if(Qc(a))if(Oo)h=ha;else{h=ra;var W=ba}else(u=a.nodeName)&&u.toLowerCase()==="input"&&(a.type==="checkbox"||a.type==="radio")&&(h=Ba);if(h&&(h=h(g,t))){Po(i,h,C,o);break g}W&&W(g,a,t),g==="focusout"&&(W=a._wrapperState)&&W.controlled&&a.type==="number"&&rd(a,"number",a.value)}switch(W=t?BC(t):window,g){case"focusin":(Qc(W)||W.contentEditable==="true")&&(bC=W,Yd=t,oA=null);break;case"focusout":oA=Yd=bC=null;break;case"mousedown":Hd=!0;break;case"contextmenu":case"mouseup":case"dragend":Hd=!1,Dc(i,C,o);break;case"selectionchange":if(Va)break;case"keydown":case"keyup":Dc(i,C,o)}var y;if(wn)g:{switch(g){case"compositionstart":var J="onCompositionStart";break g;case"compositionend":J="onCompositionEnd";break g;case"compositionupdate":J="onCompositionUpdate";break g}J=void 0}else mC?To(g,C)&&(J="onCompositionEnd"):g==="keydown"&&C.keyCode===229&&(J="onCompositionStart");J&&(Do&&C.locale!=="ko"&&(mC||J!=="onCompositionStart"?J==="onCompositionEnd"&&mC&&(y=xo()):(hI=o,Hn="value"in hI?hI.value:hI.textContent,mC=!0)),W=Yl(t,J),0<W.length&&(J=new Nc(J,g,null,C,o),i.push({event:J,listeners:W}),y?J.data=y:(y=jo(C),y!==null&&(J.data=y)))),(y=Za?sa(g,C):aa(g,C))&&(t=Yl(t,"onBeforeInput"),0<t.length&&(o=new Nc("onBeforeInput","beforeinput",null,C,o),i.push({event:o,listeners:t}),o.data=y))}di(i,I)})}function XA(g,I,C){return{instance:g,listener:I,currentTarget:C}}function Yl(g,I){for(var C=I+"Capture",A=[];g!==null;){var l=g,e=l.stateNode;l.tag===5&&e!==null&&(l=e,e=rA(g,C),e!=null&&A.unshift(XA(g,e,l)),e=rA(g,I),e!=null&&A.push(XA(g,e,l))),g=g.return}return A}function dC(g){if(g===null)return null;do g=g.return;while(g&&g.tag!==5);return g||null}function Pc(g,I,C,A,l){for(var e=I._reactName,d=[];C!==null&&C!==A;){var n=C,c=n.alternate,t=n.stateNode;if(c!==null&&c===A)break;n.tag===5&&t!==null&&(n=t,l?(c=rA(C,e),c!=null&&d.unshift(XA(C,c,n))):l||(c=rA(C,e),c!=null&&d.push(XA(C,c,n)))),C=C.return}d.length!==0&&g.push({event:I,listeners:d})}var Ra=/\r\n?/g,pa=/\u0000|\uFFFD/g;function Oc(g){return(typeof g=="string"?g:""+g).replace(Ra,`
`).replace(pa,"")}function Cl(g,I,C){if(I=Oc(I),Oc(g)!==I&&C)throw Error(B(425))}function Hl(){}var vd=null,Kd=null;function wd(g,I){return g==="textarea"||g==="noscript"||typeof I.children=="string"||typeof I.children=="number"||typeof I.dangerouslySetInnerHTML=="object"&&I.dangerouslySetInnerHTML!==null&&I.dangerouslySetInnerHTML.__html!=null}var Fd=typeof setTimeout=="function"?setTimeout:void 0,ka=typeof clearTimeout=="function"?clearTimeout:void 0,qc=typeof Promise=="function"?Promise:void 0,Ya=typeof queueMicrotask=="function"?queueMicrotask:typeof qc<"u"?function(g){return qc.resolve(null).then(g).catch(Ha)}:Fd;function Ha(g){setTimeout(function(){throw g})}function je(g,I){var C=I,A=0;do{var l=C.nextSibling;if(g.removeChild(C),l&&l.nodeType===8)if(C=l.data,C==="/$"){if(A===0){g.removeChild(l),yA(I);return}A--}else C!=="$"&&C!=="$?"&&C!=="$!"||A++;C=l}while(C);yA(I)}function XI(g){for(;g!=null;g=g.nextSibling){var I=g.nodeType;if(I===1||I===3)break;if(I===8){if(I=g.data,I==="$"||I==="$!"||I==="$?")break;if(I==="/$")return null}}return g}function _c(g){g=g.previousSibling;for(var I=0;g;){if(g.nodeType===8){var C=g.data;if(C==="$"||C==="$!"||C==="$?"){if(I===0)return g;I--}else C==="/$"&&I++}g=g.previousSibling}return null}var MC=Math.random().toString(36).slice(2),Og="__reactFiber$"+MC,JA="__reactProps$"+MC,cI="__reactContainer$"+MC,Nd="__reactEvents$"+MC,va="__reactListeners$"+MC,Ka="__reactHandles$"+MC;function DI(g){var I=g[Og];if(I)return I;for(var C=g.parentNode;C;){if(I=C[cI]||C[Og]){if(C=I.alternate,I.child!==null||C!==null&&C.child!==null)for(g=_c(g);g!==null;){if(C=g[Og])return C;g=_c(g)}return I}g=C,C=g.parentNode}return null}function zA(g){return g=g[Og]||g[cI],!g||g.tag!==5&&g.tag!==6&&g.tag!==13&&g.tag!==3?null:g}function BC(g){if(g.tag===5||g.tag===6)return g.stateNode;throw Error(B(33))}function Ie(g){return g[JA]||null}var fd=[],hC=-1;function KI(g){return{current:g}}function Q(g){0>hC||(g.current=fd[hC],fd[hC]=null,hC--)}function z(g,I){hC++,fd[hC]=g.current,g.current=I}var HI={},sg=KI(HI),yg=KI(!1),qI=HI;function KC(g,I){var C=g.type.contextTypes;if(!C)return HI;var A=g.stateNode;if(A&&A.__reactInternalMemoizedUnmaskedChildContext===I)return A.__reactInternalMemoizedMaskedChildContext;var l={},e;for(e in C)l[e]=I[e];return A&&(g=g.stateNode,g.__reactInternalMemoizedUnmaskedChildContext=I,g.__reactInternalMemoizedMaskedChildContext=l),l}function Wg(g){return g=g.childContextTypes,g!=null}function vl(){Q(yg),Q(sg)}function $c(g,I,C){if(sg.current!==HI)throw Error(B(168));z(sg,I),z(yg,C)}function ci(g,I,C){var A=g.stateNode;if(I=I.childContextTypes,typeof A.getChildContext!="function")return C;A=A.getChildContext();for(var l in A)if(!(l in I))throw Error(B(108,bs(g)||"Unknown",l));return T({},C,A)}function Kl(g){return g=(g=g.stateNode)&&g.__reactInternalMemoizedMergedChildContext||HI,qI=sg.current,z(sg,g),z(yg,yg.current),!0}function gt(g,I,C){var A=g.stateNode;if(!A)throw Error(B(169));C?(g=ci(g,I,qI),A.__reactInternalMemoizedMergedChildContext=g,Q(yg),Q(sg),z(sg,g)):Q(yg),z(yg,C)}var AI=null,Ce=!1,Pe=!1;function ti(g){AI===null?AI=[g]:AI.push(g)}function wa(g){Ce=!0,ti(g)}function wI(){if(!Pe&&AI!==null){Pe=!0;var g=0,I=F;try{var C=AI;for(F=1;g<C.length;g++){var A=C[g];do A=A(!0);while(A!==null)}AI=null,Ce=!1}catch(l){throw AI!==null&&(AI=AI.slice(g+1)),Ko(Rn,wI),l}finally{F=I,Pe=!1}}return null}var yC=[],WC=0,wl=null,Fl=0,Hg=[],vg=0,_I=null,lI=1,eI="";function EI(g,I){yC[WC++]=Fl,yC[WC++]=wl,wl=g,Fl=I}function oi(g,I,C){Hg[vg++]=lI,Hg[vg++]=eI,Hg[vg++]=_I,_I=g;var A=lI;g=eI;var l=32-xg(A)-1;A&=~(1<<l),C+=1;var e=32-xg(I)+l;if(30<e){var d=l-l%5;e=(A&(1<<d)-1).toString(32),A>>=d,l-=d,lI=1<<32-xg(I)+l|C<<l|A,eI=e+g}else lI=1<<e|C<<l|A,eI=g}function Nn(g){g.return!==null&&(EI(g,1),oi(g,1,0))}function fn(g){for(;g===wl;)wl=yC[--WC],yC[WC]=null,Fl=yC[--WC],yC[WC]=null;for(;g===_I;)_I=Hg[--vg],Hg[vg]=null,eI=Hg[--vg],Hg[vg]=null,lI=Hg[--vg],Hg[vg]=null}var Jg=null,Xg=null,M=!1,Lg=null;function ii(g,I){var C=Kg(5,null,null,0);C.elementType="DELETED",C.stateNode=I,C.return=g,I=g.deletions,I===null?(g.deletions=[C],g.flags|=16):I.push(C)}function It(g,I){switch(g.tag){case 5:var C=g.type;return I=I.nodeType!==1||C.toLowerCase()!==I.nodeName.toLowerCase()?null:I,I!==null?(g.stateNode=I,Jg=g,Xg=XI(I.firstChild),!0):!1;case 6:return I=g.pendingProps===""||I.nodeType!==3?null:I,I!==null?(g.stateNode=I,Jg=g,Xg=null,!0):!1;case 13:return I=I.nodeType!==8?null:I,I!==null?(C=_I!==null?{id:lI,overflow:eI}:null,g.memoizedState={dehydrated:I,treeContext:C,retryLane:1073741824},C=Kg(18,null,null,0),C.stateNode=I,C.return=g,g.child=C,Jg=g,Xg=null,!0):!1;default:return!1}}function zd(g){return(g.mode&1)!==0&&(g.flags&128)===0}function Ud(g){if(M){var I=Xg;if(I){var C=I;if(!It(g,I)){if(zd(g))throw Error(B(418));I=XI(C.nextSibling);var A=Jg;I&&It(g,I)?ii(A,C):(g.flags=g.flags&-4097|2,M=!1,Jg=g)}}else{if(zd(g))throw Error(B(418));g.flags=g.flags&-4097|2,M=!1,Jg=g}}}function Ct(g){for(g=g.return;g!==null&&g.tag!==5&&g.tag!==3&&g.tag!==13;)g=g.return;Jg=g}function Al(g){if(g!==Jg)return!1;if(!M)return Ct(g),M=!0,!1;var I;if((I=g.tag!==3)&&!(I=g.tag!==5)&&(I=g.type,I=I!=="head"&&I!=="body"&&!wd(g.type,g.memoizedProps)),I&&(I=Xg)){if(zd(g))throw Zi(),Error(B(418));for(;I;)ii(g,I),I=XI(I.nextSibling)}if(Ct(g),g.tag===13){if(g=g.memoizedState,g=g!==null?g.dehydrated:null,!g)throw Error(B(317));g:{for(g=g.nextSibling,I=0;g;){if(g.nodeType===8){var C=g.data;if(C==="/$"){if(I===0){Xg=XI(g.nextSibling);break g}I--}else C!=="$"&&C!=="$!"&&C!=="$?"||I++}g=g.nextSibling}Xg=null}}else Xg=Jg?XI(g.stateNode.nextSibling):null;return!0}function Zi(){for(var g=Xg;g;)g=XI(g.nextSibling)}function wC(){Xg=Jg=null,M=!1}function zn(g){Lg===null?Lg=[g]:Lg.push(g)}var Fa=iI.ReactCurrentBatchConfig;function qC(g,I,C){if(g=C.ref,g!==null&&typeof g!="function"&&typeof g!="object"){if(C._owner){if(C=C._owner,C){if(C.tag!==1)throw Error(B(309));var A=C.stateNode}if(!A)throw Error(B(147,g));var l=A,e=""+g;return I!==null&&I.ref!==null&&typeof I.ref=="function"&&I.ref._stringRef===e?I.ref:(I=function(d){var n=l.refs;d===null?delete n[e]:n[e]=d},I._stringRef=e,I)}if(typeof g!="string")throw Error(B(284));if(!C._owner)throw Error(B(290,g))}return g}function ll(g,I){throw g=Object.prototype.toString.call(I),Error(B(31,g==="[object Object]"?"object with keys {"+Object.keys(I).join(", ")+"}":g))}function At(g){var I=g._init;return I(g._payload)}function si(g){function I(G,Z){if(g){var s=G.deletions;s===null?(G.deletions=[Z],G.flags|=16):s.push(Z)}}function C(G,Z){if(!g)return null;for(;Z!==null;)I(G,Z),Z=Z.sibling;return null}function A(G,Z){for(G=new Map;Z!==null;)Z.key!==null?G.set(Z.key,Z):G.set(Z.index,Z),Z=Z.sibling;return G}function l(G,Z){return G=kI(G,Z),G.index=0,G.sibling=null,G}function e(G,Z,s){return G.index=s,g?(s=G.alternate,s!==null?(s=s.index,s<Z?(G.flags|=2,Z):s):(G.flags|=2,Z)):(G.flags|=1048576,Z)}function d(G){return g&&G.alternate===null&&(G.flags|=2),G}function n(G,Z,s,m){return Z===null||Z.tag!==6?(Z=Cd(s,G.mode,m),Z.return=G,Z):(Z=l(Z,s),Z.return=G,Z)}function c(G,Z,s,m){var h=s.type;return h===uC?o(G,Z,s.props.children,m,s.key):Z!==null&&(Z.elementType===h||typeof h=="object"&&h!==null&&h.$$typeof===uI&&At(h)===Z.type)?(m=l(Z,s.props),m.ref=qC(G,Z,s),m.return=G,m):(m=Wl(s.type,s.key,s.props,null,G.mode,m),m.ref=qC(G,Z,s),m.return=G,m)}function t(G,Z,s,m){return Z===null||Z.tag!==4||Z.stateNode.containerInfo!==s.containerInfo||Z.stateNode.implementation!==s.implementation?(Z=Ad(s,G.mode,m),Z.return=G,Z):(Z=l(Z,s.children||[]),Z.return=G,Z)}function o(G,Z,s,m,h){return Z===null||Z.tag!==7?(Z=OI(s,G.mode,m,h),Z.return=G,Z):(Z=l(Z,s),Z.return=G,Z)}function i(G,Z,s){if(typeof Z=="string"&&Z!==""||typeof Z=="number")return Z=Cd(""+Z,G.mode,s),Z.return=G,Z;if(typeof Z=="object"&&Z!==null){switch(Z.$$typeof){case TA:return s=Wl(Z.type,Z.key,Z.props,null,G.mode,s),s.ref=qC(G,null,Z),s.return=G,s;case GC:return Z=Ad(Z,G.mode,s),Z.return=G,Z;case uI:var m=Z._init;return i(G,m(Z._payload),s)}if(CA(Z)||DC(Z))return Z=OI(Z,G.mode,s,null),Z.return=G,Z;ll(G,Z)}return null}function a(G,Z,s,m){var h=Z!==null?Z.key:null;if(typeof s=="string"&&s!==""||typeof s=="number")return h!==null?null:n(G,Z,""+s,m);if(typeof s=="object"&&s!==null){switch(s.$$typeof){case TA:return s.key===h?c(G,Z,s,m):null;case GC:return s.key===h?t(G,Z,s,m):null;case uI:return h=s._init,a(G,Z,h(s._payload),m)}if(CA(s)||DC(s))return h!==null?null:o(G,Z,s,m,null);ll(G,s)}return null}function u(G,Z,s,m,h){if(typeof m=="string"&&m!==""||typeof m=="number")return G=G.get(s)||null,n(Z,G,""+m,h);if(typeof m=="object"&&m!==null){switch(m.$$typeof){case TA:return G=G.get(m.key===null?s:m.key)||null,c(Z,G,m,h);case GC:return G=G.get(m.key===null?s:m.key)||null,t(Z,G,m,h);case uI:var W=m._init;return u(G,Z,s,W(m._payload),h)}if(CA(m)||DC(m))return G=G.get(s)||null,o(Z,G,m,h,null);ll(Z,m)}return null}function b(G,Z,s,m){for(var h=null,W=null,y=Z,J=Z=0,w=null;y!==null&&J<s.length;J++){y.index>J?(w=y,y=null):w=y.sibling;var R=a(G,y,s[J],m);if(R===null){y===null&&(y=w);break}g&&y&&R.alternate===null&&I(G,y),Z=e(R,Z,J),W===null?h=R:W.sibling=R,W=R,y=w}if(J===s.length)return C(G,y),M&&EI(G,J),h;if(y===null){for(;J<s.length;J++)y=i(G,s[J],m),y!==null&&(Z=e(y,Z,J),W===null?h=y:W.sibling=y,W=y);return M&&EI(G,J),h}for(y=A(G,y);J<s.length;J++)w=u(y,G,J,s[J],m),w!==null&&(g&&w.alternate!==null&&y.delete(w.key===null?J:w.key),Z=e(w,Z,J),W===null?h=w:W.sibling=w,W=w);return g&&y.forEach(function(q){return I(G,q)}),M&&EI(G,J),h}function r(G,Z,s,m){var h=DC(s);if(typeof h!="function")throw Error(B(150));if(s=h.call(s),s==null)throw Error(B(151));for(var W=h=null,y=Z,J=Z=0,w=null,R=s.next();y!==null&&!R.done;J++,R=s.next()){y.index>J?(w=y,y=null):w=y.sibling;var q=a(G,y,R.value,m);if(q===null){y===null&&(y=w);break}g&&y&&q.alternate===null&&I(G,y),Z=e(q,Z,J),W===null?h=q:W.sibling=q,W=q,y=w}if(R.done)return C(G,y),M&&EI(G,J),h;if(y===null){for(;!R.done;J++,R=s.next())R=i(G,R.value,m),R!==null&&(Z=e(R,Z,J),W===null?h=R:W.sibling=R,W=R);return M&&EI(G,J),h}for(y=A(G,y);!R.done;J++,R=s.next())R=u(y,G,J,R.value,m),R!==null&&(g&&R.alternate!==null&&y.delete(R.key===null?J:R.key),Z=e(R,Z,J),W===null?h=R:W.sibling=R,W=R);return g&&y.forEach(function(NI){return I(G,NI)}),M&&EI(G,J),h}function V(G,Z,s,m){if(typeof s=="object"&&s!==null&&s.type===uC&&s.key===null&&(s=s.props.children),typeof s=="object"&&s!==null){switch(s.$$typeof){case TA:g:{for(var h=s.key,W=Z;W!==null;){if(W.key===h){if(h=s.type,h===uC){if(W.tag===7){C(G,W.sibling),Z=l(W,s.props.children),Z.return=G,G=Z;break g}}else if(W.elementType===h||typeof h=="object"&&h!==null&&h.$$typeof===uI&&At(h)===W.type){C(G,W.sibling),Z=l(W,s.props),Z.ref=qC(G,W,s),Z.return=G,G=Z;break g}C(G,W);break}else I(G,W);W=W.sibling}s.type===uC?(Z=OI(s.props.children,G.mode,m,s.key),Z.return=G,G=Z):(m=Wl(s.type,s.key,s.props,null,G.mode,m),m.ref=qC(G,Z,s),m.return=G,G=m)}return d(G);case GC:g:{for(W=s.key;Z!==null;){if(Z.key===W)if(Z.tag===4&&Z.stateNode.containerInfo===s.containerInfo&&Z.stateNode.implementation===s.implementation){C(G,Z.sibling),Z=l(Z,s.children||[]),Z.return=G,G=Z;break g}else{C(G,Z);break}else I(G,Z);Z=Z.sibling}Z=Ad(s,G.mode,m),Z.return=G,G=Z}return d(G);case uI:return W=s._init,V(G,Z,W(s._payload),m)}if(CA(s))return b(G,Z,s,m);if(DC(s))return r(G,Z,s,m);ll(G,s)}return typeof s=="string"&&s!==""||typeof s=="number"?(s=""+s,Z!==null&&Z.tag===6?(C(G,Z.sibling),Z=l(Z,s),Z.return=G,G=Z):(C(G,Z),Z=Cd(s,G.mode,m),Z.return=G,G=Z),d(G)):C(G,Z)}return V}var FC=si(!0),ai=si(!1),Nl=KI(null),fl=null,VC=null,Un=null;function Qn(){Un=VC=fl=null}function En(g){var I=Nl.current;Q(Nl),g._currentValue=I}function Qd(g,I,C){for(;g!==null;){var A=g.alternate;if((g.childLanes&I)!==I?(g.childLanes|=I,A!==null&&(A.childLanes|=I)):A!==null&&(A.childLanes&I)!==I&&(A.childLanes|=I),g===C)break;g=g.return}}function YC(g,I){fl=g,Un=VC=null,g=g.dependencies,g!==null&&g.firstContext!==null&&(g.lanes&I&&(hg=!0),g.firstContext=null)}function Ng(g){var I=g._currentValue;if(Un!==g)if(g={context:g,memoizedValue:I,next:null},VC===null){if(fl===null)throw Error(B(308));VC=g,fl.dependencies={lanes:0,firstContext:g}}else VC=VC.next=g;return I}var TI=null;function Mn(g){TI===null?TI=[g]:TI.push(g)}function Gi(g,I,C,A){var l=I.interleaved;return l===null?(C.next=C,Mn(I)):(C.next=l.next,l.next=C),I.interleaved=C,tI(g,A)}function tI(g,I){g.lanes|=I;var C=g.alternate;for(C!==null&&(C.lanes|=I),C=g,g=g.return;g!==null;)g.childLanes|=I,C=g.alternate,C!==null&&(C.childLanes|=I),C=g,g=g.return;return C.tag===3?C.stateNode:null}var mI=!1;function Ln(g){g.updateQueue={baseState:g.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ui(g,I){g=g.updateQueue,I.updateQueue===g&&(I.updateQueue={baseState:g.baseState,firstBaseUpdate:g.firstBaseUpdate,lastBaseUpdate:g.lastBaseUpdate,shared:g.shared,effects:g.effects})}function dI(g,I){return{eventTime:g,lane:I,tag:0,payload:null,callback:null,next:null}}function JI(g,I,C){var A=g.updateQueue;if(A===null)return null;if(A=A.shared,K&2){var l=A.pending;return l===null?I.next=I:(I.next=l.next,l.next=I),A.pending=I,tI(g,C)}return l=A.interleaved,l===null?(I.next=I,Mn(A)):(I.next=l.next,l.next=I),A.interleaved=I,tI(g,C)}function ml(g,I,C){if(I=I.updateQueue,I!==null&&(I=I.shared,(C&4194240)!==0)){var A=I.lanes;A&=g.pendingLanes,C|=A,I.lanes=C,pn(g,C)}}function lt(g,I){var C=g.updateQueue,A=g.alternate;if(A!==null&&(A=A.updateQueue,C===A)){var l=null,e=null;if(C=C.firstBaseUpdate,C!==null){do{var d={eventTime:C.eventTime,lane:C.lane,tag:C.tag,payload:C.payload,callback:C.callback,next:null};e===null?l=e=d:e=e.next=d,C=C.next}while(C!==null);e===null?l=e=I:e=e.next=I}else l=e=I;C={baseState:A.baseState,firstBaseUpdate:l,lastBaseUpdate:e,shared:A.shared,effects:A.effects},g.updateQueue=C;return}g=C.lastBaseUpdate,g===null?C.firstBaseUpdate=I:g.next=I,C.lastBaseUpdate=I}function zl(g,I,C,A){var l=g.updateQueue;mI=!1;var e=l.firstBaseUpdate,d=l.lastBaseUpdate,n=l.shared.pending;if(n!==null){l.shared.pending=null;var c=n,t=c.next;c.next=null,d===null?e=t:d.next=t,d=c;var o=g.alternate;o!==null&&(o=o.updateQueue,n=o.lastBaseUpdate,n!==d&&(n===null?o.firstBaseUpdate=t:n.next=t,o.lastBaseUpdate=c))}if(e!==null){var i=l.baseState;d=0,o=t=c=null,n=e;do{var a=n.lane,u=n.eventTime;if((A&a)===a){o!==null&&(o=o.next={eventTime:u,lane:0,tag:n.tag,payload:n.payload,callback:n.callback,next:null});g:{var b=g,r=n;switch(a=I,u=C,r.tag){case 1:if(b=r.payload,typeof b=="function"){i=b.call(u,i,a);break g}i=b;break g;case 3:b.flags=b.flags&-65537|128;case 0:if(b=r.payload,a=typeof b=="function"?b.call(u,i,a):b,a==null)break g;i=T({},i,a);break g;case 2:mI=!0}}n.callback!==null&&n.lane!==0&&(g.flags|=64,a=l.effects,a===null?l.effects=[n]:a.push(n))}else u={eventTime:u,lane:a,tag:n.tag,payload:n.payload,callback:n.callback,next:null},o===null?(t=o=u,c=i):o=o.next=u,d|=a;if(n=n.next,n===null){if(n=l.shared.pending,n===null)break;a=n,n=a.next,a.next=null,l.lastBaseUpdate=a,l.shared.pending=null}}while(1);if(o===null&&(c=i),l.baseState=c,l.firstBaseUpdate=t,l.lastBaseUpdate=o,I=l.shared.interleaved,I!==null){l=I;do d|=l.lane,l=l.next;while(l!==I)}else e===null&&(l.shared.lanes=0);gC|=d,g.lanes=d,g.memoizedState=i}}function et(g,I,C){if(g=I.effects,I.effects=null,g!==null)for(I=0;I<g.length;I++){var A=g[I],l=A.callback;if(l!==null){if(A.callback=null,A=C,typeof l!="function")throw Error(B(191,l));l.call(A)}}}var UA={},_g=KI(UA),RA=KI(UA),pA=KI(UA);function jI(g){if(g===UA)throw Error(B(174));return g}function xn(g,I){switch(z(pA,I),z(RA,g),z(_g,UA),g=I.nodeType,g){case 9:case 11:I=(I=I.documentElement)?I.namespaceURI:hd(null,"");break;default:g=g===8?I.parentNode:I,I=g.namespaceURI||null,g=g.tagName,I=hd(I,g)}Q(_g),z(_g,I)}function NC(){Q(_g),Q(RA),Q(pA)}function mi(g){jI(pA.current);var I=jI(_g.current),C=hd(I,g.type);I!==C&&(z(RA,g),z(_g,C))}function Dn(g){RA.current===g&&(Q(_g),Q(RA))}var x=KI(0);function Ul(g){for(var I=g;I!==null;){if(I.tag===13){var C=I.memoizedState;if(C!==null&&(C=C.dehydrated,C===null||C.data==="$?"||C.data==="$!"))return I}else if(I.tag===19&&I.memoizedProps.revealOrder!==void 0){if(I.flags&128)return I}else if(I.child!==null){I.child.return=I,I=I.child;continue}if(I===g)break;for(;I.sibling===null;){if(I.return===null||I.return===g)return null;I=I.return}I.sibling.return=I.return,I=I.sibling}return null}var Oe=[];function Tn(){for(var g=0;g<Oe.length;g++)Oe[g]._workInProgressVersionPrimary=null;Oe.length=0}var bl=iI.ReactCurrentDispatcher,qe=iI.ReactCurrentBatchConfig,$I=0,D=null,$=null,Ag=null,Ql=!1,iA=!1,kA=0,Na=0;function tg(){throw Error(B(321))}function jn(g,I){if(I===null)return!1;for(var C=0;C<I.length&&C<g.length;C++)if(!Tg(g[C],I[C]))return!1;return!0}function Pn(g,I,C,A,l,e){if($I=e,D=I,I.memoizedState=null,I.updateQueue=null,I.lanes=0,bl.current=g===null||g.memoizedState===null?Qa:Ea,g=C(A,l),iA){e=0;do{if(iA=!1,kA=0,25<=e)throw Error(B(301));e+=1,Ag=$=null,I.updateQueue=null,bl.current=Ma,g=C(A,l)}while(iA)}if(bl.current=El,I=$!==null&&$.next!==null,$I=0,Ag=$=D=null,Ql=!1,I)throw Error(B(300));return g}function On(){var g=kA!==0;return kA=0,g}function Pg(){var g={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return Ag===null?D.memoizedState=Ag=g:Ag=Ag.next=g,Ag}function fg(){if($===null){var g=D.alternate;g=g!==null?g.memoizedState:null}else g=$.next;var I=Ag===null?D.memoizedState:Ag.next;if(I!==null)Ag=I,$=g;else{if(g===null)throw Error(B(310));$=g,g={memoizedState:$.memoizedState,baseState:$.baseState,baseQueue:$.baseQueue,queue:$.queue,next:null},Ag===null?D.memoizedState=Ag=g:Ag=Ag.next=g}return Ag}function YA(g,I){return typeof I=="function"?I(g):I}function _e(g){var I=fg(),C=I.queue;if(C===null)throw Error(B(311));C.lastRenderedReducer=g;var A=$,l=A.baseQueue,e=C.pending;if(e!==null){if(l!==null){var d=l.next;l.next=e.next,e.next=d}A.baseQueue=l=e,C.pending=null}if(l!==null){e=l.next,A=A.baseState;var n=d=null,c=null,t=e;do{var o=t.lane;if(($I&o)===o)c!==null&&(c=c.next={lane:0,action:t.action,hasEagerState:t.hasEagerState,eagerState:t.eagerState,next:null}),A=t.hasEagerState?t.eagerState:g(A,t.action);else{var i={lane:o,action:t.action,hasEagerState:t.hasEagerState,eagerState:t.eagerState,next:null};c===null?(n=c=i,d=A):c=c.next=i,D.lanes|=o,gC|=o}t=t.next}while(t!==null&&t!==e);c===null?d=A:c.next=n,Tg(A,I.memoizedState)||(hg=!0),I.memoizedState=A,I.baseState=d,I.baseQueue=c,C.lastRenderedState=A}if(g=C.interleaved,g!==null){l=g;do e=l.lane,D.lanes|=e,gC|=e,l=l.next;while(l!==g)}else l===null&&(C.lanes=0);return[I.memoizedState,C.dispatch]}function $e(g){var I=fg(),C=I.queue;if(C===null)throw Error(B(311));C.lastRenderedReducer=g;var A=C.dispatch,l=C.pending,e=I.memoizedState;if(l!==null){C.pending=null;var d=l=l.next;do e=g(e,d.action),d=d.next;while(d!==l);Tg(e,I.memoizedState)||(hg=!0),I.memoizedState=e,I.baseQueue===null&&(I.baseState=e),C.lastRenderedState=e}return[e,A]}function bi(){}function ri(g,I){var C=D,A=fg(),l=I(),e=!Tg(A.memoizedState,l);if(e&&(A.memoizedState=l,hg=!0),A=A.queue,qn(yi.bind(null,C,A,g),[g]),A.getSnapshot!==I||e||Ag!==null&&Ag.memoizedState.tag&1){if(C.flags|=2048,HA(9,hi.bind(null,C,A,l,I),void 0,null),lg===null)throw Error(B(349));$I&30||Bi(C,I,l)}return l}function Bi(g,I,C){g.flags|=16384,g={getSnapshot:I,value:C},I=D.updateQueue,I===null?(I={lastEffect:null,stores:null},D.updateQueue=I,I.stores=[g]):(C=I.stores,C===null?I.stores=[g]:C.push(g))}function hi(g,I,C,A){I.value=C,I.getSnapshot=A,Wi(I)&&Vi(g)}function yi(g,I,C){return C(function(){Wi(I)&&Vi(g)})}function Wi(g){var I=g.getSnapshot;g=g.value;try{var C=I();return!Tg(g,C)}catch{return!0}}function Vi(g){var I=tI(g,1);I!==null&&Dg(I,g,1,-1)}function dt(g){var I=Pg();return typeof g=="function"&&(g=g()),I.memoizedState=I.baseState=g,g={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:YA,lastRenderedState:g},I.queue=g,g=g.dispatch=Ua.bind(null,D,g),[I.memoizedState,g]}function HA(g,I,C,A){return g={tag:g,create:I,destroy:C,deps:A,next:null},I=D.updateQueue,I===null?(I={lastEffect:null,stores:null},D.updateQueue=I,I.lastEffect=g.next=g):(C=I.lastEffect,C===null?I.lastEffect=g.next=g:(A=C.next,C.next=g,g.next=A,I.lastEffect=g)),g}function Si(){return fg().memoizedState}function rl(g,I,C,A){var l=Pg();D.flags|=g,l.memoizedState=HA(1|I,C,void 0,A===void 0?null:A)}function Ae(g,I,C,A){var l=fg();A=A===void 0?null:A;var e=void 0;if($!==null){var d=$.memoizedState;if(e=d.destroy,A!==null&&jn(A,d.deps)){l.memoizedState=HA(I,C,e,A);return}}D.flags|=g,l.memoizedState=HA(1|I,C,e,A)}function nt(g,I){return rl(8390656,8,g,I)}function qn(g,I){return Ae(2048,8,g,I)}function Xi(g,I){return Ae(4,2,g,I)}function Ji(g,I){return Ae(4,4,g,I)}function Ri(g,I){if(typeof I=="function")return g=g(),I(g),function(){I(null)};if(I!=null)return g=g(),I.current=g,function(){I.current=null}}function pi(g,I,C){return C=C!=null?C.concat([g]):null,Ae(4,4,Ri.bind(null,I,g),C)}function _n(){}function ki(g,I){var C=fg();I=I===void 0?null:I;var A=C.memoizedState;return A!==null&&I!==null&&jn(I,A[1])?A[0]:(C.memoizedState=[g,I],g)}function Yi(g,I){var C=fg();I=I===void 0?null:I;var A=C.memoizedState;return A!==null&&I!==null&&jn(I,A[1])?A[0]:(g=g(),C.memoizedState=[g,I],g)}function Hi(g,I,C){return $I&21?(Tg(C,I)||(C=No(),D.lanes|=C,gC|=C,g.baseState=!0),I):(g.baseState&&(g.baseState=!1,hg=!0),g.memoizedState=C)}function fa(g,I){var C=F;F=C!==0&&4>C?C:4,g(!0);var A=qe.transition;qe.transition={};try{g(!1),I()}finally{F=C,qe.transition=A}}function vi(){return fg().memoizedState}function za(g,I,C){var A=pI(g);if(C={lane:A,action:C,hasEagerState:!1,eagerState:null,next:null},Ki(g))wi(I,C);else if(C=Gi(g,I,C,A),C!==null){var l=Gg();Dg(C,g,A,l),Fi(C,I,A)}}function Ua(g,I,C){var A=pI(g),l={lane:A,action:C,hasEagerState:!1,eagerState:null,next:null};if(Ki(g))wi(I,l);else{var e=g.alternate;if(g.lanes===0&&(e===null||e.lanes===0)&&(e=I.lastRenderedReducer,e!==null))try{var d=I.lastRenderedState,n=e(d,C);if(l.hasEagerState=!0,l.eagerState=n,Tg(n,d)){var c=I.interleaved;c===null?(l.next=l,Mn(I)):(l.next=c.next,c.next=l),I.interleaved=l;return}}catch{}finally{}C=Gi(g,I,l,A),C!==null&&(l=Gg(),Dg(C,g,A,l),Fi(C,I,A))}}function Ki(g){var I=g.alternate;return g===D||I!==null&&I===D}function wi(g,I){iA=Ql=!0;var C=g.pending;C===null?I.next=I:(I.next=C.next,C.next=I),g.pending=I}function Fi(g,I,C){if(C&4194240){var A=I.lanes;A&=g.pendingLanes,C|=A,I.lanes=C,pn(g,C)}}var El={readContext:Ng,useCallback:tg,useContext:tg,useEffect:tg,useImperativeHandle:tg,useInsertionEffect:tg,useLayoutEffect:tg,useMemo:tg,useReducer:tg,useRef:tg,useState:tg,useDebugValue:tg,useDeferredValue:tg,useTransition:tg,useMutableSource:tg,useSyncExternalStore:tg,useId:tg,unstable_isNewReconciler:!1},Qa={readContext:Ng,useCallback:function(g,I){return Pg().memoizedState=[g,I===void 0?null:I],g},useContext:Ng,useEffect:nt,useImperativeHandle:function(g,I,C){return C=C!=null?C.concat([g]):null,rl(4194308,4,Ri.bind(null,I,g),C)},useLayoutEffect:function(g,I){return rl(4194308,4,g,I)},useInsertionEffect:function(g,I){return rl(4,2,g,I)},useMemo:function(g,I){var C=Pg();return I=I===void 0?null:I,g=g(),C.memoizedState=[g,I],g},useReducer:function(g,I,C){var A=Pg();return I=C!==void 0?C(I):I,A.memoizedState=A.baseState=I,g={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:g,lastRenderedState:I},A.queue=g,g=g.dispatch=za.bind(null,D,g),[A.memoizedState,g]},useRef:function(g){var I=Pg();return g={current:g},I.memoizedState=g},useState:dt,useDebugValue:_n,useDeferredValue:function(g){return Pg().memoizedState=g},useTransition:function(){var g=dt(!1),I=g[0];return g=fa.bind(null,g[1]),Pg().memoizedState=g,[I,g]},useMutableSource:function(){},useSyncExternalStore:function(g,I,C){var A=D,l=Pg();if(M){if(C===void 0)throw Error(B(407));C=C()}else{if(C=I(),lg===null)throw Error(B(349));$I&30||Bi(A,I,C)}l.memoizedState=C;var e={value:C,getSnapshot:I};return l.queue=e,nt(yi.bind(null,A,e,g),[g]),A.flags|=2048,HA(9,hi.bind(null,A,e,C,I),void 0,null),C},useId:function(){var g=Pg(),I=lg.identifierPrefix;if(M){var C=eI,A=lI;C=(A&~(1<<32-xg(A)-1)).toString(32)+C,I=":"+I+"R"+C,C=kA++,0<C&&(I+="H"+C.toString(32)),I+=":"}else C=Na++,I=":"+I+"r"+C.toString(32)+":";return g.memoizedState=I},unstable_isNewReconciler:!1},Ea={readContext:Ng,useCallback:ki,useContext:Ng,useEffect:qn,useImperativeHandle:pi,useInsertionEffect:Xi,useLayoutEffect:Ji,useMemo:Yi,useReducer:_e,useRef:Si,useState:function(){return _e(YA)},useDebugValue:_n,useDeferredValue:function(g){var I=fg();return Hi(I,$.memoizedState,g)},useTransition:function(){var g=_e(YA)[0],I=fg().memoizedState;return[g,I]},useMutableSource:bi,useSyncExternalStore:ri,useId:vi,unstable_isNewReconciler:!1},Ma={readContext:Ng,useCallback:ki,useContext:Ng,useEffect:qn,useImperativeHandle:pi,useInsertionEffect:Xi,useLayoutEffect:Ji,useMemo:Yi,useReducer:$e,useRef:Si,useState:function(){return $e(YA)},useDebugValue:_n,useDeferredValue:function(g){var I=fg();return $===null?I.memoizedState=g:Hi(I,$.memoizedState,g)},useTransition:function(){var g=$e(YA)[0],I=fg().memoizedState;return[g,I]},useMutableSource:bi,useSyncExternalStore:ri,useId:vi,unstable_isNewReconciler:!1};function Qg(g,I){if(g&&g.defaultProps){I=T({},I),g=g.defaultProps;for(var C in g)I[C]===void 0&&(I[C]=g[C]);return I}return I}function Ed(g,I,C,A){I=g.memoizedState,C=C(A,I),C=C==null?I:T({},I,C),g.memoizedState=C,g.lanes===0&&(g.updateQueue.baseState=C)}var le={isMounted:function(g){return(g=g._reactInternals)?AC(g)===g:!1},enqueueSetState:function(g,I,C){g=g._reactInternals;var A=Gg(),l=pI(g),e=dI(A,l);e.payload=I,C!=null&&(e.callback=C),I=JI(g,e,l),I!==null&&(Dg(I,g,l,A),ml(I,g,l))},enqueueReplaceState:function(g,I,C){g=g._reactInternals;var A=Gg(),l=pI(g),e=dI(A,l);e.tag=1,e.payload=I,C!=null&&(e.callback=C),I=JI(g,e,l),I!==null&&(Dg(I,g,l,A),ml(I,g,l))},enqueueForceUpdate:function(g,I){g=g._reactInternals;var C=Gg(),A=pI(g),l=dI(C,A);l.tag=2,I!=null&&(l.callback=I),I=JI(g,l,A),I!==null&&(Dg(I,g,A,C),ml(I,g,A))}};function ct(g,I,C,A,l,e,d){return g=g.stateNode,typeof g.shouldComponentUpdate=="function"?g.shouldComponentUpdate(A,e,d):I.prototype&&I.prototype.isPureReactComponent?!VA(C,A)||!VA(l,e):!0}function Ni(g,I,C){var A=!1,l=HI,e=I.contextType;return typeof e=="object"&&e!==null?e=Ng(e):(l=Wg(I)?qI:sg.current,A=I.contextTypes,e=(A=A!=null)?KC(g,l):HI),I=new I(C,e),g.memoizedState=I.state!==null&&I.state!==void 0?I.state:null,I.updater=le,g.stateNode=I,I._reactInternals=g,A&&(g=g.stateNode,g.__reactInternalMemoizedUnmaskedChildContext=l,g.__reactInternalMemoizedMaskedChildContext=e),I}function tt(g,I,C,A){g=I.state,typeof I.componentWillReceiveProps=="function"&&I.componentWillReceiveProps(C,A),typeof I.UNSAFE_componentWillReceiveProps=="function"&&I.UNSAFE_componentWillReceiveProps(C,A),I.state!==g&&le.enqueueReplaceState(I,I.state,null)}function Md(g,I,C,A){var l=g.stateNode;l.props=C,l.state=g.memoizedState,l.refs={},Ln(g);var e=I.contextType;typeof e=="object"&&e!==null?l.context=Ng(e):(e=Wg(I)?qI:sg.current,l.context=KC(g,e)),l.state=g.memoizedState,e=I.getDerivedStateFromProps,typeof e=="function"&&(Ed(g,I,e,C),l.state=g.memoizedState),typeof I.getDerivedStateFromProps=="function"||typeof l.getSnapshotBeforeUpdate=="function"||typeof l.UNSAFE_componentWillMount!="function"&&typeof l.componentWillMount!="function"||(I=l.state,typeof l.componentWillMount=="function"&&l.componentWillMount(),typeof l.UNSAFE_componentWillMount=="function"&&l.UNSAFE_componentWillMount(),I!==l.state&&le.enqueueReplaceState(l,l.state,null),zl(g,C,l,A),l.state=g.memoizedState),typeof l.componentDidMount=="function"&&(g.flags|=4194308)}function fC(g,I){try{var C="",A=I;do C+=ms(A),A=A.return;while(A);var l=C}catch(e){l=`
Error generating stack: `+e.message+`
`+e.stack}return{value:g,source:I,stack:l,digest:null}}function gd(g,I,C){return{value:g,source:null,stack:C??null,digest:I??null}}function Ld(g,I){try{console.error(I.value)}catch(C){setTimeout(function(){throw C})}}var La=typeof WeakMap=="function"?WeakMap:Map;function fi(g,I,C){C=dI(-1,C),C.tag=3,C.payload={element:null};var A=I.value;return C.callback=function(){Ll||(Ll=!0,gn=A),Ld(g,I)},C}function zi(g,I,C){C=dI(-1,C),C.tag=3;var A=g.type.getDerivedStateFromError;if(typeof A=="function"){var l=I.value;C.payload=function(){return A(l)},C.callback=function(){Ld(g,I)}}var e=g.stateNode;return e!==null&&typeof e.componentDidCatch=="function"&&(C.callback=function(){Ld(g,I),typeof A!="function"&&(RI===null?RI=new Set([this]):RI.add(this));var d=I.stack;this.componentDidCatch(I.value,{componentStack:d!==null?d:""})}),C}function ot(g,I,C){var A=g.pingCache;if(A===null){A=g.pingCache=new La;var l=new Set;A.set(I,l)}else l=A.get(I),l===void 0&&(l=new Set,A.set(I,l));l.has(C)||(l.add(C),g=lG.bind(null,g,I,C),I.then(g,g))}function it(g){do{var I;if((I=g.tag===13)&&(I=g.memoizedState,I=I!==null?I.dehydrated!==null:!0),I)return g;g=g.return}while(g!==null);return null}function Zt(g,I,C,A,l){return g.mode&1?(g.flags|=65536,g.lanes=l,g):(g===I?g.flags|=65536:(g.flags|=128,C.flags|=131072,C.flags&=-52805,C.tag===1&&(C.alternate===null?C.tag=17:(I=dI(-1,1),I.tag=2,JI(C,I,1))),C.lanes|=1),g)}var xa=iI.ReactCurrentOwner,hg=!1;function ag(g,I,C,A){I.child=g===null?ai(I,null,C,A):FC(I,g.child,C,A)}function st(g,I,C,A,l){C=C.render;var e=I.ref;return YC(I,l),A=Pn(g,I,C,A,e,l),C=On(),g!==null&&!hg?(I.updateQueue=g.updateQueue,I.flags&=-2053,g.lanes&=~l,oI(g,I,l)):(M&&C&&Nn(I),I.flags|=1,ag(g,I,A,l),I.child)}function at(g,I,C,A,l){if(g===null){var e=C.type;return typeof e=="function"&&!dc(e)&&e.defaultProps===void 0&&C.compare===null&&C.defaultProps===void 0?(I.tag=15,I.type=e,Ui(g,I,e,A,l)):(g=Wl(C.type,null,A,I,I.mode,l),g.ref=I.ref,g.return=I,I.child=g)}if(e=g.child,!(g.lanes&l)){var d=e.memoizedProps;if(C=C.compare,C=C!==null?C:VA,C(d,A)&&g.ref===I.ref)return oI(g,I,l)}return I.flags|=1,g=kI(e,A),g.ref=I.ref,g.return=I,I.child=g}function Ui(g,I,C,A,l){if(g!==null){var e=g.memoizedProps;if(VA(e,A)&&g.ref===I.ref)if(hg=!1,I.pendingProps=A=e,(g.lanes&l)!==0)g.flags&131072&&(hg=!0);else return I.lanes=g.lanes,oI(g,I,l)}return xd(g,I,C,A,l)}function Qi(g,I,C){var A=I.pendingProps,l=A.children,e=g!==null?g.memoizedState:null;if(A.mode==="hidden")if(!(I.mode&1))I.memoizedState={baseLanes:0,cachePool:null,transitions:null},z(XC,Sg),Sg|=C;else{if(!(C&1073741824))return g=e!==null?e.baseLanes|C:C,I.lanes=I.childLanes=1073741824,I.memoizedState={baseLanes:g,cachePool:null,transitions:null},I.updateQueue=null,z(XC,Sg),Sg|=g,null;I.memoizedState={baseLanes:0,cachePool:null,transitions:null},A=e!==null?e.baseLanes:C,z(XC,Sg),Sg|=A}else e!==null?(A=e.baseLanes|C,I.memoizedState=null):A=C,z(XC,Sg),Sg|=A;return ag(g,I,l,C),I.child}function Ei(g,I){var C=I.ref;(g===null&&C!==null||g!==null&&g.ref!==C)&&(I.flags|=512,I.flags|=2097152)}function xd(g,I,C,A,l){var e=Wg(C)?qI:sg.current;return e=KC(I,e),YC(I,l),C=Pn(g,I,C,A,e,l),A=On(),g!==null&&!hg?(I.updateQueue=g.updateQueue,I.flags&=-2053,g.lanes&=~l,oI(g,I,l)):(M&&A&&Nn(I),I.flags|=1,ag(g,I,C,l),I.child)}function Gt(g,I,C,A,l){if(Wg(C)){var e=!0;Kl(I)}else e=!1;if(YC(I,l),I.stateNode===null)Bl(g,I),Ni(I,C,A),Md(I,C,A,l),A=!0;else if(g===null){var d=I.stateNode,n=I.memoizedProps;d.props=n;var c=d.context,t=C.contextType;typeof t=="object"&&t!==null?t=Ng(t):(t=Wg(C)?qI:sg.current,t=KC(I,t));var o=C.getDerivedStateFromProps,i=typeof o=="function"||typeof d.getSnapshotBeforeUpdate=="function";i||typeof d.UNSAFE_componentWillReceiveProps!="function"&&typeof d.componentWillReceiveProps!="function"||(n!==A||c!==t)&&tt(I,d,A,t),mI=!1;var a=I.memoizedState;d.state=a,zl(I,A,d,l),c=I.memoizedState,n!==A||a!==c||yg.current||mI?(typeof o=="function"&&(Ed(I,C,o,A),c=I.memoizedState),(n=mI||ct(I,C,n,A,a,c,t))?(i||typeof d.UNSAFE_componentWillMount!="function"&&typeof d.componentWillMount!="function"||(typeof d.componentWillMount=="function"&&d.componentWillMount(),typeof d.UNSAFE_componentWillMount=="function"&&d.UNSAFE_componentWillMount()),typeof d.componentDidMount=="function"&&(I.flags|=4194308)):(typeof d.componentDidMount=="function"&&(I.flags|=4194308),I.memoizedProps=A,I.memoizedState=c),d.props=A,d.state=c,d.context=t,A=n):(typeof d.componentDidMount=="function"&&(I.flags|=4194308),A=!1)}else{d=I.stateNode,ui(g,I),n=I.memoizedProps,t=I.type===I.elementType?n:Qg(I.type,n),d.props=t,i=I.pendingProps,a=d.context,c=C.contextType,typeof c=="object"&&c!==null?c=Ng(c):(c=Wg(C)?qI:sg.current,c=KC(I,c));var u=C.getDerivedStateFromProps;(o=typeof u=="function"||typeof d.getSnapshotBeforeUpdate=="function")||typeof d.UNSAFE_componentWillReceiveProps!="function"&&typeof d.componentWillReceiveProps!="function"||(n!==i||a!==c)&&tt(I,d,A,c),mI=!1,a=I.memoizedState,d.state=a,zl(I,A,d,l);var b=I.memoizedState;n!==i||a!==b||yg.current||mI?(typeof u=="function"&&(Ed(I,C,u,A),b=I.memoizedState),(t=mI||ct(I,C,t,A,a,b,c)||!1)?(o||typeof d.UNSAFE_componentWillUpdate!="function"&&typeof d.componentWillUpdate!="function"||(typeof d.componentWillUpdate=="function"&&d.componentWillUpdate(A,b,c),typeof d.UNSAFE_componentWillUpdate=="function"&&d.UNSAFE_componentWillUpdate(A,b,c)),typeof d.componentDidUpdate=="function"&&(I.flags|=4),typeof d.getSnapshotBeforeUpdate=="function"&&(I.flags|=1024)):(typeof d.componentDidUpdate!="function"||n===g.memoizedProps&&a===g.memoizedState||(I.flags|=4),typeof d.getSnapshotBeforeUpdate!="function"||n===g.memoizedProps&&a===g.memoizedState||(I.flags|=1024),I.memoizedProps=A,I.memoizedState=b),d.props=A,d.state=b,d.context=c,A=t):(typeof d.componentDidUpdate!="function"||n===g.memoizedProps&&a===g.memoizedState||(I.flags|=4),typeof d.getSnapshotBeforeUpdate!="function"||n===g.memoizedProps&&a===g.memoizedState||(I.flags|=1024),A=!1)}return Dd(g,I,C,A,e,l)}function Dd(g,I,C,A,l,e){Ei(g,I);var d=(I.flags&128)!==0;if(!A&&!d)return l&&gt(I,C,!1),oI(g,I,e);A=I.stateNode,xa.current=I;var n=d&&typeof C.getDerivedStateFromError!="function"?null:A.render();return I.flags|=1,g!==null&&d?(I.child=FC(I,g.child,null,e),I.child=FC(I,null,n,e)):ag(g,I,n,e),I.memoizedState=A.state,l&&gt(I,C,!0),I.child}function Mi(g){var I=g.stateNode;I.pendingContext?$c(g,I.pendingContext,I.pendingContext!==I.context):I.context&&$c(g,I.context,!1),xn(g,I.containerInfo)}function ut(g,I,C,A,l){return wC(),zn(l),I.flags|=256,ag(g,I,C,A),I.child}var Td={dehydrated:null,treeContext:null,retryLane:0};function jd(g){return{baseLanes:g,cachePool:null,transitions:null}}function Li(g,I,C){var A=I.pendingProps,l=x.current,e=!1,d=(I.flags&128)!==0,n;if((n=d)||(n=g!==null&&g.memoizedState===null?!1:(l&2)!==0),n?(e=!0,I.flags&=-129):(g===null||g.memoizedState!==null)&&(l|=1),z(x,l&1),g===null)return Ud(I),g=I.memoizedState,g!==null&&(g=g.dehydrated,g!==null)?(I.mode&1?g.data==="$!"?I.lanes=8:I.lanes=1073741824:I.lanes=1,null):(d=A.children,g=A.fallback,e?(A=I.mode,e=I.child,d={mode:"hidden",children:d},!(A&1)&&e!==null?(e.childLanes=0,e.pendingProps=d):e=ne(d,A,0,null),g=OI(g,A,C,null),e.return=I,g.return=I,e.sibling=g,I.child=e,I.child.memoizedState=jd(C),I.memoizedState=Td,g):$n(I,d));if(l=g.memoizedState,l!==null&&(n=l.dehydrated,n!==null))return Da(g,I,d,A,n,l,C);if(e){e=A.fallback,d=I.mode,l=g.child,n=l.sibling;var c={mode:"hidden",children:A.children};return!(d&1)&&I.child!==l?(A=I.child,A.childLanes=0,A.pendingProps=c,I.deletions=null):(A=kI(l,c),A.subtreeFlags=l.subtreeFlags&14680064),n!==null?e=kI(n,e):(e=OI(e,d,C,null),e.flags|=2),e.return=I,A.return=I,A.sibling=e,I.child=A,A=e,e=I.child,d=g.child.memoizedState,d=d===null?jd(C):{baseLanes:d.baseLanes|C,cachePool:null,transitions:d.transitions},e.memoizedState=d,e.childLanes=g.childLanes&~C,I.memoizedState=Td,A}return e=g.child,g=e.sibling,A=kI(e,{mode:"visible",children:A.children}),!(I.mode&1)&&(A.lanes=C),A.return=I,A.sibling=null,g!==null&&(C=I.deletions,C===null?(I.deletions=[g],I.flags|=16):C.push(g)),I.child=A,I.memoizedState=null,A}function $n(g,I){return I=ne({mode:"visible",children:I},g.mode,0,null),I.return=g,g.child=I}function el(g,I,C,A){return A!==null&&zn(A),FC(I,g.child,null,C),g=$n(I,I.pendingProps.children),g.flags|=2,I.memoizedState=null,g}function Da(g,I,C,A,l,e,d){if(C)return I.flags&256?(I.flags&=-257,A=gd(Error(B(422))),el(g,I,d,A)):I.memoizedState!==null?(I.child=g.child,I.flags|=128,null):(e=A.fallback,l=I.mode,A=ne({mode:"visible",children:A.children},l,0,null),e=OI(e,l,d,null),e.flags|=2,A.return=I,e.return=I,A.sibling=e,I.child=A,I.mode&1&&FC(I,g.child,null,d),I.child.memoizedState=jd(d),I.memoizedState=Td,e);if(!(I.mode&1))return el(g,I,d,null);if(l.data==="$!"){if(A=l.nextSibling&&l.nextSibling.dataset,A)var n=A.dgst;return A=n,e=Error(B(419)),A=gd(e,A,void 0),el(g,I,d,A)}if(n=(d&g.childLanes)!==0,hg||n){if(A=lg,A!==null){switch(d&-d){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}l=l&(A.suspendedLanes|d)?0:l,l!==0&&l!==e.retryLane&&(e.retryLane=l,tI(g,l),Dg(A,g,l,-1))}return ec(),A=gd(Error(B(421))),el(g,I,d,A)}return l.data==="$?"?(I.flags|=128,I.child=g.child,I=eG.bind(null,g),l._reactRetry=I,null):(g=e.treeContext,Xg=XI(l.nextSibling),Jg=I,M=!0,Lg=null,g!==null&&(Hg[vg++]=lI,Hg[vg++]=eI,Hg[vg++]=_I,lI=g.id,eI=g.overflow,_I=I),I=$n(I,A.children),I.flags|=4096,I)}function mt(g,I,C){g.lanes|=I;var A=g.alternate;A!==null&&(A.lanes|=I),Qd(g.return,I,C)}function Id(g,I,C,A,l){var e=g.memoizedState;e===null?g.memoizedState={isBackwards:I,rendering:null,renderingStartTime:0,last:A,tail:C,tailMode:l}:(e.isBackwards=I,e.rendering=null,e.renderingStartTime=0,e.last=A,e.tail=C,e.tailMode=l)}function xi(g,I,C){var A=I.pendingProps,l=A.revealOrder,e=A.tail;if(ag(g,I,A.children,C),A=x.current,A&2)A=A&1|2,I.flags|=128;else{if(g!==null&&g.flags&128)g:for(g=I.child;g!==null;){if(g.tag===13)g.memoizedState!==null&&mt(g,C,I);else if(g.tag===19)mt(g,C,I);else if(g.child!==null){g.child.return=g,g=g.child;continue}if(g===I)break g;for(;g.sibling===null;){if(g.return===null||g.return===I)break g;g=g.return}g.sibling.return=g.return,g=g.sibling}A&=1}if(z(x,A),!(I.mode&1))I.memoizedState=null;else switch(l){case"forwards":for(C=I.child,l=null;C!==null;)g=C.alternate,g!==null&&Ul(g)===null&&(l=C),C=C.sibling;C=l,C===null?(l=I.child,I.child=null):(l=C.sibling,C.sibling=null),Id(I,!1,l,C,e);break;case"backwards":for(C=null,l=I.child,I.child=null;l!==null;){if(g=l.alternate,g!==null&&Ul(g)===null){I.child=l;break}g=l.sibling,l.sibling=C,C=l,l=g}Id(I,!0,C,null,e);break;case"together":Id(I,!1,null,null,void 0);break;default:I.memoizedState=null}return I.child}function Bl(g,I){!(I.mode&1)&&g!==null&&(g.alternate=null,I.alternate=null,I.flags|=2)}function oI(g,I,C){if(g!==null&&(I.dependencies=g.dependencies),gC|=I.lanes,!(C&I.childLanes))return null;if(g!==null&&I.child!==g.child)throw Error(B(153));if(I.child!==null){for(g=I.child,C=kI(g,g.pendingProps),I.child=C,C.return=I;g.sibling!==null;)g=g.sibling,C=C.sibling=kI(g,g.pendingProps),C.return=I;C.sibling=null}return I.child}function Ta(g,I,C){switch(I.tag){case 3:Mi(I),wC();break;case 5:mi(I);break;case 1:Wg(I.type)&&Kl(I);break;case 4:xn(I,I.stateNode.containerInfo);break;case 10:var A=I.type._context,l=I.memoizedProps.value;z(Nl,A._currentValue),A._currentValue=l;break;case 13:if(A=I.memoizedState,A!==null)return A.dehydrated!==null?(z(x,x.current&1),I.flags|=128,null):C&I.child.childLanes?Li(g,I,C):(z(x,x.current&1),g=oI(g,I,C),g!==null?g.sibling:null);z(x,x.current&1);break;case 19:if(A=(C&I.childLanes)!==0,g.flags&128){if(A)return xi(g,I,C);I.flags|=128}if(l=I.memoizedState,l!==null&&(l.rendering=null,l.tail=null,l.lastEffect=null),z(x,x.current),A)break;return null;case 22:case 23:return I.lanes=0,Qi(g,I,C)}return oI(g,I,C)}var Di,Pd,Ti,ji;Di=function(g,I){for(var C=I.child;C!==null;){if(C.tag===5||C.tag===6)g.appendChild(C.stateNode);else if(C.tag!==4&&C.child!==null){C.child.return=C,C=C.child;continue}if(C===I)break;for(;C.sibling===null;){if(C.return===null||C.return===I)return;C=C.return}C.sibling.return=C.return,C=C.sibling}};Pd=function(){};Ti=function(g,I,C,A){var l=g.memoizedProps;if(l!==A){g=I.stateNode,jI(_g.current);var e=null;switch(C){case"input":l=md(g,l),A=md(g,A),e=[];break;case"select":l=T({},l,{value:void 0}),A=T({},A,{value:void 0}),e=[];break;case"textarea":l=Bd(g,l),A=Bd(g,A),e=[];break;default:typeof l.onClick!="function"&&typeof A.onClick=="function"&&(g.onclick=Hl)}yd(C,A);var d;C=null;for(t in l)if(!A.hasOwnProperty(t)&&l.hasOwnProperty(t)&&l[t]!=null)if(t==="style"){var n=l[t];for(d in n)n.hasOwnProperty(d)&&(C||(C={}),C[d]="")}else t!=="dangerouslySetInnerHTML"&&t!=="children"&&t!=="suppressContentEditableWarning"&&t!=="suppressHydrationWarning"&&t!=="autoFocus"&&(mA.hasOwnProperty(t)?e||(e=[]):(e=e||[]).push(t,null));for(t in A){var c=A[t];if(n=l!=null?l[t]:void 0,A.hasOwnProperty(t)&&c!==n&&(c!=null||n!=null))if(t==="style")if(n){for(d in n)!n.hasOwnProperty(d)||c&&c.hasOwnProperty(d)||(C||(C={}),C[d]="");for(d in c)c.hasOwnProperty(d)&&n[d]!==c[d]&&(C||(C={}),C[d]=c[d])}else C||(e||(e=[]),e.push(t,C)),C=c;else t==="dangerouslySetInnerHTML"?(c=c?c.__html:void 0,n=n?n.__html:void 0,c!=null&&n!==c&&(e=e||[]).push(t,c)):t==="children"?typeof c!="string"&&typeof c!="number"||(e=e||[]).push(t,""+c):t!=="suppressContentEditableWarning"&&t!=="suppressHydrationWarning"&&(mA.hasOwnProperty(t)?(c!=null&&t==="onScroll"&&U("scroll",g),e||n===c||(e=[])):(e=e||[]).push(t,c))}C&&(e=e||[]).push("style",C);var t=e;(I.updateQueue=t)&&(I.flags|=4)}};ji=function(g,I,C,A){C!==A&&(I.flags|=4)};function _C(g,I){if(!M)switch(g.tailMode){case"hidden":I=g.tail;for(var C=null;I!==null;)I.alternate!==null&&(C=I),I=I.sibling;C===null?g.tail=null:C.sibling=null;break;case"collapsed":C=g.tail;for(var A=null;C!==null;)C.alternate!==null&&(A=C),C=C.sibling;A===null?I||g.tail===null?g.tail=null:g.tail.sibling=null:A.sibling=null}}function og(g){var I=g.alternate!==null&&g.alternate.child===g.child,C=0,A=0;if(I)for(var l=g.child;l!==null;)C|=l.lanes|l.childLanes,A|=l.subtreeFlags&14680064,A|=l.flags&14680064,l.return=g,l=l.sibling;else for(l=g.child;l!==null;)C|=l.lanes|l.childLanes,A|=l.subtreeFlags,A|=l.flags,l.return=g,l=l.sibling;return g.subtreeFlags|=A,g.childLanes=C,I}function ja(g,I,C){var A=I.pendingProps;switch(fn(I),I.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return og(I),null;case 1:return Wg(I.type)&&vl(),og(I),null;case 3:return A=I.stateNode,NC(),Q(yg),Q(sg),Tn(),A.pendingContext&&(A.context=A.pendingContext,A.pendingContext=null),(g===null||g.child===null)&&(Al(I)?I.flags|=4:g===null||g.memoizedState.isDehydrated&&!(I.flags&256)||(I.flags|=1024,Lg!==null&&(An(Lg),Lg=null))),Pd(g,I),og(I),null;case 5:Dn(I);var l=jI(pA.current);if(C=I.type,g!==null&&I.stateNode!=null)Ti(g,I,C,A,l),g.ref!==I.ref&&(I.flags|=512,I.flags|=2097152);else{if(!A){if(I.stateNode===null)throw Error(B(166));return og(I),null}if(g=jI(_g.current),Al(I)){A=I.stateNode,C=I.type;var e=I.memoizedProps;switch(A[Og]=I,A[JA]=e,g=(I.mode&1)!==0,C){case"dialog":U("cancel",A),U("close",A);break;case"iframe":case"object":case"embed":U("load",A);break;case"video":case"audio":for(l=0;l<lA.length;l++)U(lA[l],A);break;case"source":U("error",A);break;case"img":case"image":case"link":U("error",A),U("load",A);break;case"details":U("toggle",A);break;case"input":Xc(A,e),U("invalid",A);break;case"select":A._wrapperState={wasMultiple:!!e.multiple},U("invalid",A);break;case"textarea":Rc(A,e),U("invalid",A)}yd(C,e),l=null;for(var d in e)if(e.hasOwnProperty(d)){var n=e[d];d==="children"?typeof n=="string"?A.textContent!==n&&(e.suppressHydrationWarning!==!0&&Cl(A.textContent,n,g),l=["children",n]):typeof n=="number"&&A.textContent!==""+n&&(e.suppressHydrationWarning!==!0&&Cl(A.textContent,n,g),l=["children",""+n]):mA.hasOwnProperty(d)&&n!=null&&d==="onScroll"&&U("scroll",A)}switch(C){case"input":jA(A),Jc(A,e,!0);break;case"textarea":jA(A),pc(A);break;case"select":case"option":break;default:typeof e.onClick=="function"&&(A.onclick=Hl)}A=l,I.updateQueue=A,A!==null&&(I.flags|=4)}else{d=l.nodeType===9?l:l.ownerDocument,g==="http://www.w3.org/1999/xhtml"&&(g=yo(C)),g==="http://www.w3.org/1999/xhtml"?C==="script"?(g=d.createElement("div"),g.innerHTML="<script><\/script>",g=g.removeChild(g.firstChild)):typeof A.is=="string"?g=d.createElement(C,{is:A.is}):(g=d.createElement(C),C==="select"&&(d=g,A.multiple?d.multiple=!0:A.size&&(d.size=A.size))):g=d.createElementNS(g,C),g[Og]=I,g[JA]=A,Di(g,I,!1,!1),I.stateNode=g;g:{switch(d=Wd(C,A),C){case"dialog":U("cancel",g),U("close",g),l=A;break;case"iframe":case"object":case"embed":U("load",g),l=A;break;case"video":case"audio":for(l=0;l<lA.length;l++)U(lA[l],g);l=A;break;case"source":U("error",g),l=A;break;case"img":case"image":case"link":U("error",g),U("load",g),l=A;break;case"details":U("toggle",g),l=A;break;case"input":Xc(g,A),l=md(g,A),U("invalid",g);break;case"option":l=A;break;case"select":g._wrapperState={wasMultiple:!!A.multiple},l=T({},A,{value:void 0}),U("invalid",g);break;case"textarea":Rc(g,A),l=Bd(g,A),U("invalid",g);break;default:l=A}yd(C,l),n=l;for(e in n)if(n.hasOwnProperty(e)){var c=n[e];e==="style"?So(g,c):e==="dangerouslySetInnerHTML"?(c=c?c.__html:void 0,c!=null&&Wo(g,c)):e==="children"?typeof c=="string"?(C!=="textarea"||c!=="")&&bA(g,c):typeof c=="number"&&bA(g,""+c):e!=="suppressContentEditableWarning"&&e!=="suppressHydrationWarning"&&e!=="autoFocus"&&(mA.hasOwnProperty(e)?c!=null&&e==="onScroll"&&U("scroll",g):c!=null&&Wn(g,e,c,d))}switch(C){case"input":jA(g),Jc(g,A,!1);break;case"textarea":jA(g),pc(g);break;case"option":A.value!=null&&g.setAttribute("value",""+YI(A.value));break;case"select":g.multiple=!!A.multiple,e=A.value,e!=null?JC(g,!!A.multiple,e,!1):A.defaultValue!=null&&JC(g,!!A.multiple,A.defaultValue,!0);break;default:typeof l.onClick=="function"&&(g.onclick=Hl)}switch(C){case"button":case"input":case"select":case"textarea":A=!!A.autoFocus;break g;case"img":A=!0;break g;default:A=!1}}A&&(I.flags|=4)}I.ref!==null&&(I.flags|=512,I.flags|=2097152)}return og(I),null;case 6:if(g&&I.stateNode!=null)ji(g,I,g.memoizedProps,A);else{if(typeof A!="string"&&I.stateNode===null)throw Error(B(166));if(C=jI(pA.current),jI(_g.current),Al(I)){if(A=I.stateNode,C=I.memoizedProps,A[Og]=I,(e=A.nodeValue!==C)&&(g=Jg,g!==null))switch(g.tag){case 3:Cl(A.nodeValue,C,(g.mode&1)!==0);break;case 5:g.memoizedProps.suppressHydrationWarning!==!0&&Cl(A.nodeValue,C,(g.mode&1)!==0)}e&&(I.flags|=4)}else A=(C.nodeType===9?C:C.ownerDocument).createTextNode(A),A[Og]=I,I.stateNode=A}return og(I),null;case 13:if(Q(x),A=I.memoizedState,g===null||g.memoizedState!==null&&g.memoizedState.dehydrated!==null){if(M&&Xg!==null&&I.mode&1&&!(I.flags&128))Zi(),wC(),I.flags|=98560,e=!1;else if(e=Al(I),A!==null&&A.dehydrated!==null){if(g===null){if(!e)throw Error(B(318));if(e=I.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(B(317));e[Og]=I}else wC(),!(I.flags&128)&&(I.memoizedState=null),I.flags|=4;og(I),e=!1}else Lg!==null&&(An(Lg),Lg=null),e=!0;if(!e)return I.flags&65536?I:null}return I.flags&128?(I.lanes=C,I):(A=A!==null,A!==(g!==null&&g.memoizedState!==null)&&A&&(I.child.flags|=8192,I.mode&1&&(g===null||x.current&1?gg===0&&(gg=3):ec())),I.updateQueue!==null&&(I.flags|=4),og(I),null);case 4:return NC(),Pd(g,I),g===null&&SA(I.stateNode.containerInfo),og(I),null;case 10:return En(I.type._context),og(I),null;case 17:return Wg(I.type)&&vl(),og(I),null;case 19:if(Q(x),e=I.memoizedState,e===null)return og(I),null;if(A=(I.flags&128)!==0,d=e.rendering,d===null)if(A)_C(e,!1);else{if(gg!==0||g!==null&&g.flags&128)for(g=I.child;g!==null;){if(d=Ul(g),d!==null){for(I.flags|=128,_C(e,!1),A=d.updateQueue,A!==null&&(I.updateQueue=A,I.flags|=4),I.subtreeFlags=0,A=C,C=I.child;C!==null;)e=C,g=A,e.flags&=14680066,d=e.alternate,d===null?(e.childLanes=0,e.lanes=g,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=d.childLanes,e.lanes=d.lanes,e.child=d.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=d.memoizedProps,e.memoizedState=d.memoizedState,e.updateQueue=d.updateQueue,e.type=d.type,g=d.dependencies,e.dependencies=g===null?null:{lanes:g.lanes,firstContext:g.firstContext}),C=C.sibling;return z(x,x.current&1|2),I.child}g=g.sibling}e.tail!==null&&O()>zC&&(I.flags|=128,A=!0,_C(e,!1),I.lanes=4194304)}else{if(!A)if(g=Ul(d),g!==null){if(I.flags|=128,A=!0,C=g.updateQueue,C!==null&&(I.updateQueue=C,I.flags|=4),_C(e,!0),e.tail===null&&e.tailMode==="hidden"&&!d.alternate&&!M)return og(I),null}else 2*O()-e.renderingStartTime>zC&&C!==1073741824&&(I.flags|=128,A=!0,_C(e,!1),I.lanes=4194304);e.isBackwards?(d.sibling=I.child,I.child=d):(C=e.last,C!==null?C.sibling=d:I.child=d,e.last=d)}return e.tail!==null?(I=e.tail,e.rendering=I,e.tail=I.sibling,e.renderingStartTime=O(),I.sibling=null,C=x.current,z(x,A?C&1|2:C&1),I):(og(I),null);case 22:case 23:return lc(),A=I.memoizedState!==null,g!==null&&g.memoizedState!==null!==A&&(I.flags|=8192),A&&I.mode&1?Sg&1073741824&&(og(I),I.subtreeFlags&6&&(I.flags|=8192)):og(I),null;case 24:return null;case 25:return null}throw Error(B(156,I.tag))}function Pa(g,I){switch(fn(I),I.tag){case 1:return Wg(I.type)&&vl(),g=I.flags,g&65536?(I.flags=g&-65537|128,I):null;case 3:return NC(),Q(yg),Q(sg),Tn(),g=I.flags,g&65536&&!(g&128)?(I.flags=g&-65537|128,I):null;case 5:return Dn(I),null;case 13:if(Q(x),g=I.memoizedState,g!==null&&g.dehydrated!==null){if(I.alternate===null)throw Error(B(340));wC()}return g=I.flags,g&65536?(I.flags=g&-65537|128,I):null;case 19:return Q(x),null;case 4:return NC(),null;case 10:return En(I.type._context),null;case 22:case 23:return lc(),null;case 24:return null;default:return null}}var dl=!1,Zg=!1,Oa=typeof WeakSet=="function"?WeakSet:Set,S=null;function SC(g,I){var C=g.ref;if(C!==null)if(typeof C=="function")try{C(null)}catch(A){j(g,I,A)}else C.current=null}function Od(g,I,C){try{C()}catch(A){j(g,I,A)}}var bt=!1;function qa(g,I){if(vd=pl,g=$o(),Fn(g)){if("selectionStart"in g)var C={start:g.selectionStart,end:g.selectionEnd};else g:{C=(C=g.ownerDocument)&&C.defaultView||window;var A=C.getSelection&&C.getSelection();if(A&&A.rangeCount!==0){C=A.anchorNode;var l=A.anchorOffset,e=A.focusNode;A=A.focusOffset;try{C.nodeType,e.nodeType}catch{C=null;break g}var d=0,n=-1,c=-1,t=0,o=0,i=g,a=null;I:for(;;){for(var u;i!==C||l!==0&&i.nodeType!==3||(n=d+l),i!==e||A!==0&&i.nodeType!==3||(c=d+A),i.nodeType===3&&(d+=i.nodeValue.length),(u=i.firstChild)!==null;)a=i,i=u;for(;;){if(i===g)break I;if(a===C&&++t===l&&(n=d),a===e&&++o===A&&(c=d),(u=i.nextSibling)!==null)break;i=a,a=i.parentNode}i=u}C=n===-1||c===-1?null:{start:n,end:c}}else C=null}C=C||{start:0,end:0}}else C=null;for(Kd={focusedElem:g,selectionRange:C},pl=!1,S=I;S!==null;)if(I=S,g=I.child,(I.subtreeFlags&1028)!==0&&g!==null)g.return=I,S=g;else for(;S!==null;){I=S;try{var b=I.alternate;if(I.flags&1024)switch(I.tag){case 0:case 11:case 15:break;case 1:if(b!==null){var r=b.memoizedProps,V=b.memoizedState,G=I.stateNode,Z=G.getSnapshotBeforeUpdate(I.elementType===I.type?r:Qg(I.type,r),V);G.__reactInternalSnapshotBeforeUpdate=Z}break;case 3:var s=I.stateNode.containerInfo;s.nodeType===1?s.textContent="":s.nodeType===9&&s.documentElement&&s.removeChild(s.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(B(163))}}catch(m){j(I,I.return,m)}if(g=I.sibling,g!==null){g.return=I.return,S=g;break}S=I.return}return b=bt,bt=!1,b}function ZA(g,I,C){var A=I.updateQueue;if(A=A!==null?A.lastEffect:null,A!==null){var l=A=A.next;do{if((l.tag&g)===g){var e=l.destroy;l.destroy=void 0,e!==void 0&&Od(I,C,e)}l=l.next}while(l!==A)}}function ee(g,I){if(I=I.updateQueue,I=I!==null?I.lastEffect:null,I!==null){var C=I=I.next;do{if((C.tag&g)===g){var A=C.create;C.destroy=A()}C=C.next}while(C!==I)}}function qd(g){var I=g.ref;if(I!==null){var C=g.stateNode;switch(g.tag){case 5:g=C;break;default:g=C}typeof I=="function"?I(g):I.current=g}}function Pi(g){var I=g.alternate;I!==null&&(g.alternate=null,Pi(I)),g.child=null,g.deletions=null,g.sibling=null,g.tag===5&&(I=g.stateNode,I!==null&&(delete I[Og],delete I[JA],delete I[Nd],delete I[va],delete I[Ka])),g.stateNode=null,g.return=null,g.dependencies=null,g.memoizedProps=null,g.memoizedState=null,g.pendingProps=null,g.stateNode=null,g.updateQueue=null}function Oi(g){return g.tag===5||g.tag===3||g.tag===4}function rt(g){g:for(;;){for(;g.sibling===null;){if(g.return===null||Oi(g.return))return null;g=g.return}for(g.sibling.return=g.return,g=g.sibling;g.tag!==5&&g.tag!==6&&g.tag!==18;){if(g.flags&2||g.child===null||g.tag===4)continue g;g.child.return=g,g=g.child}if(!(g.flags&2))return g.stateNode}}function _d(g,I,C){var A=g.tag;if(A===5||A===6)g=g.stateNode,I?C.nodeType===8?C.parentNode.insertBefore(g,I):C.insertBefore(g,I):(C.nodeType===8?(I=C.parentNode,I.insertBefore(g,C)):(I=C,I.appendChild(g)),C=C._reactRootContainer,C!=null||I.onclick!==null||(I.onclick=Hl));else if(A!==4&&(g=g.child,g!==null))for(_d(g,I,C),g=g.sibling;g!==null;)_d(g,I,C),g=g.sibling}function $d(g,I,C){var A=g.tag;if(A===5||A===6)g=g.stateNode,I?C.insertBefore(g,I):C.appendChild(g);else if(A!==4&&(g=g.child,g!==null))for($d(g,I,C),g=g.sibling;g!==null;)$d(g,I,C),g=g.sibling}var dg=null,Eg=!1;function sI(g,I,C){for(C=C.child;C!==null;)qi(g,I,C),C=C.sibling}function qi(g,I,C){if(qg&&typeof qg.onCommitFiberUnmount=="function")try{qg.onCommitFiberUnmount(ql,C)}catch{}switch(C.tag){case 5:Zg||SC(C,I);case 6:var A=dg,l=Eg;dg=null,sI(g,I,C),dg=A,Eg=l,dg!==null&&(Eg?(g=dg,C=C.stateNode,g.nodeType===8?g.parentNode.removeChild(C):g.removeChild(C)):dg.removeChild(C.stateNode));break;case 18:dg!==null&&(Eg?(g=dg,C=C.stateNode,g.nodeType===8?je(g.parentNode,C):g.nodeType===1&&je(g,C),yA(g)):je(dg,C.stateNode));break;case 4:A=dg,l=Eg,dg=C.stateNode.containerInfo,Eg=!0,sI(g,I,C),dg=A,Eg=l;break;case 0:case 11:case 14:case 15:if(!Zg&&(A=C.updateQueue,A!==null&&(A=A.lastEffect,A!==null))){l=A=A.next;do{var e=l,d=e.destroy;e=e.tag,d!==void 0&&(e&2||e&4)&&Od(C,I,d),l=l.next}while(l!==A)}sI(g,I,C);break;case 1:if(!Zg&&(SC(C,I),A=C.stateNode,typeof A.componentWillUnmount=="function"))try{A.props=C.memoizedProps,A.state=C.memoizedState,A.componentWillUnmount()}catch(n){j(C,I,n)}sI(g,I,C);break;case 21:sI(g,I,C);break;case 22:C.mode&1?(Zg=(A=Zg)||C.memoizedState!==null,sI(g,I,C),Zg=A):sI(g,I,C);break;default:sI(g,I,C)}}function Bt(g){var I=g.updateQueue;if(I!==null){g.updateQueue=null;var C=g.stateNode;C===null&&(C=g.stateNode=new Oa),I.forEach(function(A){var l=dG.bind(null,g,A);C.has(A)||(C.add(A),A.then(l,l))})}}function zg(g,I){var C=I.deletions;if(C!==null)for(var A=0;A<C.length;A++){var l=C[A];try{var e=g,d=I,n=d;g:for(;n!==null;){switch(n.tag){case 5:dg=n.stateNode,Eg=!1;break g;case 3:dg=n.stateNode.containerInfo,Eg=!0;break g;case 4:dg=n.stateNode.containerInfo,Eg=!0;break g}n=n.return}if(dg===null)throw Error(B(160));qi(e,d,l),dg=null,Eg=!1;var c=l.alternate;c!==null&&(c.return=null),l.return=null}catch(t){j(l,I,t)}}if(I.subtreeFlags&12854)for(I=I.child;I!==null;)_i(I,g),I=I.sibling}function _i(g,I){var C=g.alternate,A=g.flags;switch(g.tag){case 0:case 11:case 14:case 15:if(zg(I,g),jg(g),A&4){try{ZA(3,g,g.return),ee(3,g)}catch(r){j(g,g.return,r)}try{ZA(5,g,g.return)}catch(r){j(g,g.return,r)}}break;case 1:zg(I,g),jg(g),A&512&&C!==null&&SC(C,C.return);break;case 5:if(zg(I,g),jg(g),A&512&&C!==null&&SC(C,C.return),g.flags&32){var l=g.stateNode;try{bA(l,"")}catch(r){j(g,g.return,r)}}if(A&4&&(l=g.stateNode,l!=null)){var e=g.memoizedProps,d=C!==null?C.memoizedProps:e,n=g.type,c=g.updateQueue;if(g.updateQueue=null,c!==null)try{n==="input"&&e.type==="radio"&&e.name!=null&&Bo(l,e),Wd(n,d);var t=Wd(n,e);for(d=0;d<c.length;d+=2){var o=c[d],i=c[d+1];o==="style"?So(l,i):o==="dangerouslySetInnerHTML"?Wo(l,i):o==="children"?bA(l,i):Wn(l,o,i,t)}switch(n){case"input":bd(l,e);break;case"textarea":ho(l,e);break;case"select":var a=l._wrapperState.wasMultiple;l._wrapperState.wasMultiple=!!e.multiple;var u=e.value;u!=null?JC(l,!!e.multiple,u,!1):a!==!!e.multiple&&(e.defaultValue!=null?JC(l,!!e.multiple,e.defaultValue,!0):JC(l,!!e.multiple,e.multiple?[]:"",!1))}l[JA]=e}catch(r){j(g,g.return,r)}}break;case 6:if(zg(I,g),jg(g),A&4){if(g.stateNode===null)throw Error(B(162));l=g.stateNode,e=g.memoizedProps;try{l.nodeValue=e}catch(r){j(g,g.return,r)}}break;case 3:if(zg(I,g),jg(g),A&4&&C!==null&&C.memoizedState.isDehydrated)try{yA(I.containerInfo)}catch(r){j(g,g.return,r)}break;case 4:zg(I,g),jg(g);break;case 13:zg(I,g),jg(g),l=g.child,l.flags&8192&&(e=l.memoizedState!==null,l.stateNode.isHidden=e,!e||l.alternate!==null&&l.alternate.memoizedState!==null||(Cc=O())),A&4&&Bt(g);break;case 22:if(o=C!==null&&C.memoizedState!==null,g.mode&1?(Zg=(t=Zg)||o,zg(I,g),Zg=t):zg(I,g),jg(g),A&8192){if(t=g.memoizedState!==null,(g.stateNode.isHidden=t)&&!o&&g.mode&1)for(S=g,o=g.child;o!==null;){for(i=S=o;S!==null;){switch(a=S,u=a.child,a.tag){case 0:case 11:case 14:case 15:ZA(4,a,a.return);break;case 1:SC(a,a.return);var b=a.stateNode;if(typeof b.componentWillUnmount=="function"){A=a,C=a.return;try{I=A,b.props=I.memoizedProps,b.state=I.memoizedState,b.componentWillUnmount()}catch(r){j(A,C,r)}}break;case 5:SC(a,a.return);break;case 22:if(a.memoizedState!==null){yt(i);continue}}u!==null?(u.return=a,S=u):yt(i)}o=o.sibling}g:for(o=null,i=g;;){if(i.tag===5){if(o===null){o=i;try{l=i.stateNode,t?(e=l.style,typeof e.setProperty=="function"?e.setProperty("display","none","important"):e.display="none"):(n=i.stateNode,c=i.memoizedProps.style,d=c!=null&&c.hasOwnProperty("display")?c.display:null,n.style.display=Vo("display",d))}catch(r){j(g,g.return,r)}}}else if(i.tag===6){if(o===null)try{i.stateNode.nodeValue=t?"":i.memoizedProps}catch(r){j(g,g.return,r)}}else if((i.tag!==22&&i.tag!==23||i.memoizedState===null||i===g)&&i.child!==null){i.child.return=i,i=i.child;continue}if(i===g)break g;for(;i.sibling===null;){if(i.return===null||i.return===g)break g;o===i&&(o=null),i=i.return}o===i&&(o=null),i.sibling.return=i.return,i=i.sibling}}break;case 19:zg(I,g),jg(g),A&4&&Bt(g);break;case 21:break;default:zg(I,g),jg(g)}}function jg(g){var I=g.flags;if(I&2){try{g:{for(var C=g.return;C!==null;){if(Oi(C)){var A=C;break g}C=C.return}throw Error(B(160))}switch(A.tag){case 5:var l=A.stateNode;A.flags&32&&(bA(l,""),A.flags&=-33);var e=rt(g);$d(g,e,l);break;case 3:case 4:var d=A.stateNode.containerInfo,n=rt(g);_d(g,n,d);break;default:throw Error(B(161))}}catch(c){j(g,g.return,c)}g.flags&=-3}I&4096&&(g.flags&=-4097)}function _a(g,I,C){S=g,$i(g)}function $i(g,I,C){for(var A=(g.mode&1)!==0;S!==null;){var l=S,e=l.child;if(l.tag===22&&A){var d=l.memoizedState!==null||dl;if(!d){var n=l.alternate,c=n!==null&&n.memoizedState!==null||Zg;n=dl;var t=Zg;if(dl=d,(Zg=c)&&!t)for(S=l;S!==null;)d=S,c=d.child,d.tag===22&&d.memoizedState!==null?Wt(l):c!==null?(c.return=d,S=c):Wt(l);for(;e!==null;)S=e,$i(e),e=e.sibling;S=l,dl=n,Zg=t}ht(g)}else l.subtreeFlags&8772&&e!==null?(e.return=l,S=e):ht(g)}}function ht(g){for(;S!==null;){var I=S;if(I.flags&8772){var C=I.alternate;try{if(I.flags&8772)switch(I.tag){case 0:case 11:case 15:Zg||ee(5,I);break;case 1:var A=I.stateNode;if(I.flags&4&&!Zg)if(C===null)A.componentDidMount();else{var l=I.elementType===I.type?C.memoizedProps:Qg(I.type,C.memoizedProps);A.componentDidUpdate(l,C.memoizedState,A.__reactInternalSnapshotBeforeUpdate)}var e=I.updateQueue;e!==null&&et(I,e,A);break;case 3:var d=I.updateQueue;if(d!==null){if(C=null,I.child!==null)switch(I.child.tag){case 5:C=I.child.stateNode;break;case 1:C=I.child.stateNode}et(I,d,C)}break;case 5:var n=I.stateNode;if(C===null&&I.flags&4){C=n;var c=I.memoizedProps;switch(I.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&C.focus();break;case"img":c.src&&(C.src=c.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(I.memoizedState===null){var t=I.alternate;if(t!==null){var o=t.memoizedState;if(o!==null){var i=o.dehydrated;i!==null&&yA(i)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(B(163))}Zg||I.flags&512&&qd(I)}catch(a){j(I,I.return,a)}}if(I===g){S=null;break}if(C=I.sibling,C!==null){C.return=I.return,S=C;break}S=I.return}}function yt(g){for(;S!==null;){var I=S;if(I===g){S=null;break}var C=I.sibling;if(C!==null){C.return=I.return,S=C;break}S=I.return}}function Wt(g){for(;S!==null;){var I=S;try{switch(I.tag){case 0:case 11:case 15:var C=I.return;try{ee(4,I)}catch(c){j(I,C,c)}break;case 1:var A=I.stateNode;if(typeof A.componentDidMount=="function"){var l=I.return;try{A.componentDidMount()}catch(c){j(I,l,c)}}var e=I.return;try{qd(I)}catch(c){j(I,e,c)}break;case 5:var d=I.return;try{qd(I)}catch(c){j(I,d,c)}}}catch(c){j(I,I.return,c)}if(I===g){S=null;break}var n=I.sibling;if(n!==null){n.return=I.return,S=n;break}S=I.return}}var $a=Math.ceil,Ml=iI.ReactCurrentDispatcher,gc=iI.ReactCurrentOwner,wg=iI.ReactCurrentBatchConfig,K=0,lg=null,_=null,ng=0,Sg=0,XC=KI(0),gg=0,vA=null,gC=0,de=0,Ic=0,sA=null,rg=null,Cc=0,zC=1/0,gI=null,Ll=!1,gn=null,RI=null,nl=!1,yI=null,xl=0,aA=0,In=null,hl=-1,yl=0;function Gg(){return K&6?O():hl!==-1?hl:hl=O()}function pI(g){return g.mode&1?K&2&&ng!==0?ng&-ng:Fa.transition!==null?(yl===0&&(yl=No()),yl):(g=F,g!==0||(g=window.event,g=g===void 0?16:Lo(g.type)),g):1}function Dg(g,I,C,A){if(50<aA)throw aA=0,In=null,Error(B(185));NA(g,C,A),(!(K&2)||g!==lg)&&(g===lg&&(!(K&2)&&(de|=C),gg===4&&rI(g,ng)),Vg(g,A),C===1&&K===0&&!(I.mode&1)&&(zC=O()+500,Ce&&wI()))}function Vg(g,I){var C=g.callbackNode;Fs(g,I);var A=Rl(g,g===lg?ng:0);if(A===0)C!==null&&Hc(C),g.callbackNode=null,g.callbackPriority=0;else if(I=A&-A,g.callbackPriority!==I){if(C!=null&&Hc(C),I===1)g.tag===0?wa(Vt.bind(null,g)):ti(Vt.bind(null,g)),Ya(function(){!(K&6)&&wI()}),C=null;else{switch(fo(A)){case 1:C=Rn;break;case 4:C=wo;break;case 16:C=Jl;break;case 536870912:C=Fo;break;default:C=Jl}C=nZ(C,gZ.bind(null,g))}g.callbackPriority=I,g.callbackNode=C}}function gZ(g,I){if(hl=-1,yl=0,K&6)throw Error(B(327));var C=g.callbackNode;if(HC()&&g.callbackNode!==C)return null;var A=Rl(g,g===lg?ng:0);if(A===0)return null;if(A&30||A&g.expiredLanes||I)I=Dl(g,A);else{I=A;var l=K;K|=2;var e=CZ();(lg!==g||ng!==I)&&(gI=null,zC=O()+500,PI(g,I));do try{CG();break}catch(n){IZ(g,n)}while(1);Qn(),Ml.current=e,K=l,_!==null?I=0:(lg=null,ng=0,I=gg)}if(I!==0){if(I===2&&(l=Rd(g),l!==0&&(A=l,I=Cn(g,l))),I===1)throw C=vA,PI(g,0),rI(g,A),Vg(g,O()),C;if(I===6)rI(g,A);else{if(l=g.current.alternate,!(A&30)&&!gG(l)&&(I=Dl(g,A),I===2&&(e=Rd(g),e!==0&&(A=e,I=Cn(g,e))),I===1))throw C=vA,PI(g,0),rI(g,A),Vg(g,O()),C;switch(g.finishedWork=l,g.finishedLanes=A,I){case 0:case 1:throw Error(B(345));case 2:MI(g,rg,gI);break;case 3:if(rI(g,A),(A&130023424)===A&&(I=Cc+500-O(),10<I)){if(Rl(g,0)!==0)break;if(l=g.suspendedLanes,(l&A)!==A){Gg(),g.pingedLanes|=g.suspendedLanes&l;break}g.timeoutHandle=Fd(MI.bind(null,g,rg,gI),I);break}MI(g,rg,gI);break;case 4:if(rI(g,A),(A&4194240)===A)break;for(I=g.eventTimes,l=-1;0<A;){var d=31-xg(A);e=1<<d,d=I[d],d>l&&(l=d),A&=~e}if(A=l,A=O()-A,A=(120>A?120:480>A?480:1080>A?1080:1920>A?1920:3e3>A?3e3:4320>A?4320:1960*$a(A/1960))-A,10<A){g.timeoutHandle=Fd(MI.bind(null,g,rg,gI),A);break}MI(g,rg,gI);break;case 5:MI(g,rg,gI);break;default:throw Error(B(329))}}}return Vg(g,O()),g.callbackNode===C?gZ.bind(null,g):null}function Cn(g,I){var C=sA;return g.current.memoizedState.isDehydrated&&(PI(g,I).flags|=256),g=Dl(g,I),g!==2&&(I=rg,rg=C,I!==null&&An(I)),g}function An(g){rg===null?rg=g:rg.push.apply(rg,g)}function gG(g){for(var I=g;;){if(I.flags&16384){var C=I.updateQueue;if(C!==null&&(C=C.stores,C!==null))for(var A=0;A<C.length;A++){var l=C[A],e=l.getSnapshot;l=l.value;try{if(!Tg(e(),l))return!1}catch{return!1}}}if(C=I.child,I.subtreeFlags&16384&&C!==null)C.return=I,I=C;else{if(I===g)break;for(;I.sibling===null;){if(I.return===null||I.return===g)return!0;I=I.return}I.sibling.return=I.return,I=I.sibling}}return!0}function rI(g,I){for(I&=~Ic,I&=~de,g.suspendedLanes|=I,g.pingedLanes&=~I,g=g.expirationTimes;0<I;){var C=31-xg(I),A=1<<C;g[C]=-1,I&=~A}}function Vt(g){if(K&6)throw Error(B(327));HC();var I=Rl(g,0);if(!(I&1))return Vg(g,O()),null;var C=Dl(g,I);if(g.tag!==0&&C===2){var A=Rd(g);A!==0&&(I=A,C=Cn(g,A))}if(C===1)throw C=vA,PI(g,0),rI(g,I),Vg(g,O()),C;if(C===6)throw Error(B(345));return g.finishedWork=g.current.alternate,g.finishedLanes=I,MI(g,rg,gI),Vg(g,O()),null}function Ac(g,I){var C=K;K|=1;try{return g(I)}finally{K=C,K===0&&(zC=O()+500,Ce&&wI())}}function IC(g){yI!==null&&yI.tag===0&&!(K&6)&&HC();var I=K;K|=1;var C=wg.transition,A=F;try{if(wg.transition=null,F=1,g)return g()}finally{F=A,wg.transition=C,K=I,!(K&6)&&wI()}}function lc(){Sg=XC.current,Q(XC)}function PI(g,I){g.finishedWork=null,g.finishedLanes=0;var C=g.timeoutHandle;if(C!==-1&&(g.timeoutHandle=-1,ka(C)),_!==null)for(C=_.return;C!==null;){var A=C;switch(fn(A),A.tag){case 1:A=A.type.childContextTypes,A!=null&&vl();break;case 3:NC(),Q(yg),Q(sg),Tn();break;case 5:Dn(A);break;case 4:NC();break;case 13:Q(x);break;case 19:Q(x);break;case 10:En(A.type._context);break;case 22:case 23:lc()}C=C.return}if(lg=g,_=g=kI(g.current,null),ng=Sg=I,gg=0,vA=null,Ic=de=gC=0,rg=sA=null,TI!==null){for(I=0;I<TI.length;I++)if(C=TI[I],A=C.interleaved,A!==null){C.interleaved=null;var l=A.next,e=C.pending;if(e!==null){var d=e.next;e.next=l,A.next=d}C.pending=A}TI=null}return g}function IZ(g,I){do{var C=_;try{if(Qn(),bl.current=El,Ql){for(var A=D.memoizedState;A!==null;){var l=A.queue;l!==null&&(l.pending=null),A=A.next}Ql=!1}if($I=0,Ag=$=D=null,iA=!1,kA=0,gc.current=null,C===null||C.return===null){gg=1,vA=I,_=null;break}g:{var e=g,d=C.return,n=C,c=I;if(I=ng,n.flags|=32768,c!==null&&typeof c=="object"&&typeof c.then=="function"){var t=c,o=n,i=o.tag;if(!(o.mode&1)&&(i===0||i===11||i===15)){var a=o.alternate;a?(o.updateQueue=a.updateQueue,o.memoizedState=a.memoizedState,o.lanes=a.lanes):(o.updateQueue=null,o.memoizedState=null)}var u=it(d);if(u!==null){u.flags&=-257,Zt(u,d,n,e,I),u.mode&1&&ot(e,t,I),I=u,c=t;var b=I.updateQueue;if(b===null){var r=new Set;r.add(c),I.updateQueue=r}else b.add(c);break g}else{if(!(I&1)){ot(e,t,I),ec();break g}c=Error(B(426))}}else if(M&&n.mode&1){var V=it(d);if(V!==null){!(V.flags&65536)&&(V.flags|=256),Zt(V,d,n,e,I),zn(fC(c,n));break g}}e=c=fC(c,n),gg!==4&&(gg=2),sA===null?sA=[e]:sA.push(e),e=d;do{switch(e.tag){case 3:e.flags|=65536,I&=-I,e.lanes|=I;var G=fi(e,c,I);lt(e,G);break g;case 1:n=c;var Z=e.type,s=e.stateNode;if(!(e.flags&128)&&(typeof Z.getDerivedStateFromError=="function"||s!==null&&typeof s.componentDidCatch=="function"&&(RI===null||!RI.has(s)))){e.flags|=65536,I&=-I,e.lanes|=I;var m=zi(e,n,I);lt(e,m);break g}}e=e.return}while(e!==null)}lZ(C)}catch(h){I=h,_===C&&C!==null&&(_=C=C.return);continue}break}while(1)}function CZ(){var g=Ml.current;return Ml.current=El,g===null?El:g}function ec(){(gg===0||gg===3||gg===2)&&(gg=4),lg===null||!(gC&268435455)&&!(de&268435455)||rI(lg,ng)}function Dl(g,I){var C=K;K|=2;var A=CZ();(lg!==g||ng!==I)&&(gI=null,PI(g,I));do try{IG();break}catch(l){IZ(g,l)}while(1);if(Qn(),K=C,Ml.current=A,_!==null)throw Error(B(261));return lg=null,ng=0,gg}function IG(){for(;_!==null;)AZ(_)}function CG(){for(;_!==null&&!Js();)AZ(_)}function AZ(g){var I=dZ(g.alternate,g,Sg);g.memoizedProps=g.pendingProps,I===null?lZ(g):_=I,gc.current=null}function lZ(g){var I=g;do{var C=I.alternate;if(g=I.return,I.flags&32768){if(C=Pa(C,I),C!==null){C.flags&=32767,_=C;return}if(g!==null)g.flags|=32768,g.subtreeFlags=0,g.deletions=null;else{gg=6,_=null;return}}else if(C=ja(C,I,Sg),C!==null){_=C;return}if(I=I.sibling,I!==null){_=I;return}_=I=g}while(I!==null);gg===0&&(gg=5)}function MI(g,I,C){var A=F,l=wg.transition;try{wg.transition=null,F=1,AG(g,I,C,A)}finally{wg.transition=l,F=A}return null}function AG(g,I,C,A){do HC();while(yI!==null);if(K&6)throw Error(B(327));C=g.finishedWork;var l=g.finishedLanes;if(C===null)return null;if(g.finishedWork=null,g.finishedLanes=0,C===g.current)throw Error(B(177));g.callbackNode=null,g.callbackPriority=0;var e=C.lanes|C.childLanes;if(Ns(g,e),g===lg&&(_=lg=null,ng=0),!(C.subtreeFlags&2064)&&!(C.flags&2064)||nl||(nl=!0,nZ(Jl,function(){return HC(),null})),e=(C.flags&15990)!==0,C.subtreeFlags&15990||e){e=wg.transition,wg.transition=null;var d=F;F=1;var n=K;K|=4,gc.current=null,qa(g,C),_i(C,g),Wa(Kd),pl=!!vd,Kd=vd=null,g.current=C,_a(C),Rs(),K=n,F=d,wg.transition=e}else g.current=C;if(nl&&(nl=!1,yI=g,xl=l),e=g.pendingLanes,e===0&&(RI=null),Ys(C.stateNode),Vg(g,O()),I!==null)for(A=g.onRecoverableError,C=0;C<I.length;C++)l=I[C],A(l.value,{componentStack:l.stack,digest:l.digest});if(Ll)throw Ll=!1,g=gn,gn=null,g;return xl&1&&g.tag!==0&&HC(),e=g.pendingLanes,e&1?g===In?aA++:(aA=0,In=g):aA=0,wI(),null}function HC(){if(yI!==null){var g=fo(xl),I=wg.transition,C=F;try{if(wg.transition=null,F=16>g?16:g,yI===null)var A=!1;else{if(g=yI,yI=null,xl=0,K&6)throw Error(B(331));var l=K;for(K|=4,S=g.current;S!==null;){var e=S,d=e.child;if(S.flags&16){var n=e.deletions;if(n!==null){for(var c=0;c<n.length;c++){var t=n[c];for(S=t;S!==null;){var o=S;switch(o.tag){case 0:case 11:case 15:ZA(8,o,e)}var i=o.child;if(i!==null)i.return=o,S=i;else for(;S!==null;){o=S;var a=o.sibling,u=o.return;if(Pi(o),o===t){S=null;break}if(a!==null){a.return=u,S=a;break}S=u}}}var b=e.alternate;if(b!==null){var r=b.child;if(r!==null){b.child=null;do{var V=r.sibling;r.sibling=null,r=V}while(r!==null)}}S=e}}if(e.subtreeFlags&2064&&d!==null)d.return=e,S=d;else g:for(;S!==null;){if(e=S,e.flags&2048)switch(e.tag){case 0:case 11:case 15:ZA(9,e,e.return)}var G=e.sibling;if(G!==null){G.return=e.return,S=G;break g}S=e.return}}var Z=g.current;for(S=Z;S!==null;){d=S;var s=d.child;if(d.subtreeFlags&2064&&s!==null)s.return=d,S=s;else g:for(d=Z;S!==null;){if(n=S,n.flags&2048)try{switch(n.tag){case 0:case 11:case 15:ee(9,n)}}catch(h){j(n,n.return,h)}if(n===d){S=null;break g}var m=n.sibling;if(m!==null){m.return=n.return,S=m;break g}S=n.return}}if(K=l,wI(),qg&&typeof qg.onPostCommitFiberRoot=="function")try{qg.onPostCommitFiberRoot(ql,g)}catch{}A=!0}return A}finally{F=C,wg.transition=I}}return!1}function St(g,I,C){I=fC(C,I),I=fi(g,I,1),g=JI(g,I,1),I=Gg(),g!==null&&(NA(g,1,I),Vg(g,I))}function j(g,I,C){if(g.tag===3)St(g,g,C);else for(;I!==null;){if(I.tag===3){St(I,g,C);break}else if(I.tag===1){var A=I.stateNode;if(typeof I.type.getDerivedStateFromError=="function"||typeof A.componentDidCatch=="function"&&(RI===null||!RI.has(A))){g=fC(C,g),g=zi(I,g,1),I=JI(I,g,1),g=Gg(),I!==null&&(NA(I,1,g),Vg(I,g));break}}I=I.return}}function lG(g,I,C){var A=g.pingCache;A!==null&&A.delete(I),I=Gg(),g.pingedLanes|=g.suspendedLanes&C,lg===g&&(ng&C)===C&&(gg===4||gg===3&&(ng&130023424)===ng&&500>O()-Cc?PI(g,0):Ic|=C),Vg(g,I)}function eZ(g,I){I===0&&(g.mode&1?(I=qA,qA<<=1,!(qA&130023424)&&(qA=4194304)):I=1);var C=Gg();g=tI(g,I),g!==null&&(NA(g,I,C),Vg(g,C))}function eG(g){var I=g.memoizedState,C=0;I!==null&&(C=I.retryLane),eZ(g,C)}function dG(g,I){var C=0;switch(g.tag){case 13:var A=g.stateNode,l=g.memoizedState;l!==null&&(C=l.retryLane);break;case 19:A=g.stateNode;break;default:throw Error(B(314))}A!==null&&A.delete(I),eZ(g,C)}var dZ;dZ=function(g,I,C){if(g!==null)if(g.memoizedProps!==I.pendingProps||yg.current)hg=!0;else{if(!(g.lanes&C)&&!(I.flags&128))return hg=!1,Ta(g,I,C);hg=!!(g.flags&131072)}else hg=!1,M&&I.flags&1048576&&oi(I,Fl,I.index);switch(I.lanes=0,I.tag){case 2:var A=I.type;Bl(g,I),g=I.pendingProps;var l=KC(I,sg.current);YC(I,C),l=Pn(null,I,A,g,l,C);var e=On();return I.flags|=1,typeof l=="object"&&l!==null&&typeof l.render=="function"&&l.$$typeof===void 0?(I.tag=1,I.memoizedState=null,I.updateQueue=null,Wg(A)?(e=!0,Kl(I)):e=!1,I.memoizedState=l.state!==null&&l.state!==void 0?l.state:null,Ln(I),l.updater=le,I.stateNode=l,l._reactInternals=I,Md(I,A,g,C),I=Dd(null,I,A,!0,e,C)):(I.tag=0,M&&e&&Nn(I),ag(null,I,l,C),I=I.child),I;case 16:A=I.elementType;g:{switch(Bl(g,I),g=I.pendingProps,l=A._init,A=l(A._payload),I.type=A,l=I.tag=cG(A),g=Qg(A,g),l){case 0:I=xd(null,I,A,g,C);break g;case 1:I=Gt(null,I,A,g,C);break g;case 11:I=st(null,I,A,g,C);break g;case 14:I=at(null,I,A,Qg(A.type,g),C);break g}throw Error(B(306,A,""))}return I;case 0:return A=I.type,l=I.pendingProps,l=I.elementType===A?l:Qg(A,l),xd(g,I,A,l,C);case 1:return A=I.type,l=I.pendingProps,l=I.elementType===A?l:Qg(A,l),Gt(g,I,A,l,C);case 3:g:{if(Mi(I),g===null)throw Error(B(387));A=I.pendingProps,e=I.memoizedState,l=e.element,ui(g,I),zl(I,A,null,C);var d=I.memoizedState;if(A=d.element,e.isDehydrated)if(e={element:A,isDehydrated:!1,cache:d.cache,pendingSuspenseBoundaries:d.pendingSuspenseBoundaries,transitions:d.transitions},I.updateQueue.baseState=e,I.memoizedState=e,I.flags&256){l=fC(Error(B(423)),I),I=ut(g,I,A,C,l);break g}else if(A!==l){l=fC(Error(B(424)),I),I=ut(g,I,A,C,l);break g}else for(Xg=XI(I.stateNode.containerInfo.firstChild),Jg=I,M=!0,Lg=null,C=ai(I,null,A,C),I.child=C;C;)C.flags=C.flags&-3|4096,C=C.sibling;else{if(wC(),A===l){I=oI(g,I,C);break g}ag(g,I,A,C)}I=I.child}return I;case 5:return mi(I),g===null&&Ud(I),A=I.type,l=I.pendingProps,e=g!==null?g.memoizedProps:null,d=l.children,wd(A,l)?d=null:e!==null&&wd(A,e)&&(I.flags|=32),Ei(g,I),ag(g,I,d,C),I.child;case 6:return g===null&&Ud(I),null;case 13:return Li(g,I,C);case 4:return xn(I,I.stateNode.containerInfo),A=I.pendingProps,g===null?I.child=FC(I,null,A,C):ag(g,I,A,C),I.child;case 11:return A=I.type,l=I.pendingProps,l=I.elementType===A?l:Qg(A,l),st(g,I,A,l,C);case 7:return ag(g,I,I.pendingProps,C),I.child;case 8:return ag(g,I,I.pendingProps.children,C),I.child;case 12:return ag(g,I,I.pendingProps.children,C),I.child;case 10:g:{if(A=I.type._context,l=I.pendingProps,e=I.memoizedProps,d=l.value,z(Nl,A._currentValue),A._currentValue=d,e!==null)if(Tg(e.value,d)){if(e.children===l.children&&!yg.current){I=oI(g,I,C);break g}}else for(e=I.child,e!==null&&(e.return=I);e!==null;){var n=e.dependencies;if(n!==null){d=e.child;for(var c=n.firstContext;c!==null;){if(c.context===A){if(e.tag===1){c=dI(-1,C&-C),c.tag=2;var t=e.updateQueue;if(t!==null){t=t.shared;var o=t.pending;o===null?c.next=c:(c.next=o.next,o.next=c),t.pending=c}}e.lanes|=C,c=e.alternate,c!==null&&(c.lanes|=C),Qd(e.return,C,I),n.lanes|=C;break}c=c.next}}else if(e.tag===10)d=e.type===I.type?null:e.child;else if(e.tag===18){if(d=e.return,d===null)throw Error(B(341));d.lanes|=C,n=d.alternate,n!==null&&(n.lanes|=C),Qd(d,C,I),d=e.sibling}else d=e.child;if(d!==null)d.return=e;else for(d=e;d!==null;){if(d===I){d=null;break}if(e=d.sibling,e!==null){e.return=d.return,d=e;break}d=d.return}e=d}ag(g,I,l.children,C),I=I.child}return I;case 9:return l=I.type,A=I.pendingProps.children,YC(I,C),l=Ng(l),A=A(l),I.flags|=1,ag(g,I,A,C),I.child;case 14:return A=I.type,l=Qg(A,I.pendingProps),l=Qg(A.type,l),at(g,I,A,l,C);case 15:return Ui(g,I,I.type,I.pendingProps,C);case 17:return A=I.type,l=I.pendingProps,l=I.elementType===A?l:Qg(A,l),Bl(g,I),I.tag=1,Wg(A)?(g=!0,Kl(I)):g=!1,YC(I,C),Ni(I,A,l),Md(I,A,l,C),Dd(null,I,A,!0,g,C);case 19:return xi(g,I,C);case 22:return Qi(g,I,C)}throw Error(B(156,I.tag))};function nZ(g,I){return Ko(g,I)}function nG(g,I,C,A){this.tag=g,this.key=C,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=I,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=A,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Kg(g,I,C,A){return new nG(g,I,C,A)}function dc(g){return g=g.prototype,!(!g||!g.isReactComponent)}function cG(g){if(typeof g=="function")return dc(g)?1:0;if(g!=null){if(g=g.$$typeof,g===Sn)return 11;if(g===Xn)return 14}return 2}function kI(g,I){var C=g.alternate;return C===null?(C=Kg(g.tag,I,g.key,g.mode),C.elementType=g.elementType,C.type=g.type,C.stateNode=g.stateNode,C.alternate=g,g.alternate=C):(C.pendingProps=I,C.type=g.type,C.flags=0,C.subtreeFlags=0,C.deletions=null),C.flags=g.flags&14680064,C.childLanes=g.childLanes,C.lanes=g.lanes,C.child=g.child,C.memoizedProps=g.memoizedProps,C.memoizedState=g.memoizedState,C.updateQueue=g.updateQueue,I=g.dependencies,C.dependencies=I===null?null:{lanes:I.lanes,firstContext:I.firstContext},C.sibling=g.sibling,C.index=g.index,C.ref=g.ref,C}function Wl(g,I,C,A,l,e){var d=2;if(A=g,typeof g=="function")dc(g)&&(d=1);else if(typeof g=="string")d=5;else g:switch(g){case uC:return OI(C.children,l,e,I);case Vn:d=8,l|=8;break;case sd:return g=Kg(12,C,I,l|2),g.elementType=sd,g.lanes=e,g;case ad:return g=Kg(13,C,I,l),g.elementType=ad,g.lanes=e,g;case Gd:return g=Kg(19,C,I,l),g.elementType=Gd,g.lanes=e,g;case mo:return ne(C,l,e,I);default:if(typeof g=="object"&&g!==null)switch(g.$$typeof){case Go:d=10;break g;case uo:d=9;break g;case Sn:d=11;break g;case Xn:d=14;break g;case uI:d=16,A=null;break g}throw Error(B(130,g==null?g:typeof g,""))}return I=Kg(d,C,I,l),I.elementType=g,I.type=A,I.lanes=e,I}function OI(g,I,C,A){return g=Kg(7,g,A,I),g.lanes=C,g}function ne(g,I,C,A){return g=Kg(22,g,A,I),g.elementType=mo,g.lanes=C,g.stateNode={isHidden:!1},g}function Cd(g,I,C){return g=Kg(6,g,null,I),g.lanes=C,g}function Ad(g,I,C){return I=Kg(4,g.children!==null?g.children:[],g.key,I),I.lanes=C,I.stateNode={containerInfo:g.containerInfo,pendingChildren:null,implementation:g.implementation},I}function tG(g,I,C,A,l){this.tag=I,this.containerInfo=g,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Ne(0),this.expirationTimes=Ne(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ne(0),this.identifierPrefix=A,this.onRecoverableError=l,this.mutableSourceEagerHydrationData=null}function nc(g,I,C,A,l,e,d,n,c){return g=new tG(g,I,C,n,c),I===1?(I=1,e===!0&&(I|=8)):I=0,e=Kg(3,null,null,I),g.current=e,e.stateNode=g,e.memoizedState={element:A,isDehydrated:C,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ln(e),g}function oG(g,I,C){var A=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:GC,key:A==null?null:""+A,children:g,containerInfo:I,implementation:C}}function cZ(g){if(!g)return HI;g=g._reactInternals;g:{if(AC(g)!==g||g.tag!==1)throw Error(B(170));var I=g;do{switch(I.tag){case 3:I=I.stateNode.context;break g;case 1:if(Wg(I.type)){I=I.stateNode.__reactInternalMemoizedMergedChildContext;break g}}I=I.return}while(I!==null);throw Error(B(171))}if(g.tag===1){var C=g.type;if(Wg(C))return ci(g,C,I)}return I}function tZ(g,I,C,A,l,e,d,n,c){return g=nc(C,A,!0,g,l,e,d,n,c),g.context=cZ(null),C=g.current,A=Gg(),l=pI(C),e=dI(A,l),e.callback=I??null,JI(C,e,l),g.current.lanes=l,NA(g,l,A),Vg(g,A),g}function ce(g,I,C,A){var l=I.current,e=Gg(),d=pI(l);return C=cZ(C),I.context===null?I.context=C:I.pendingContext=C,I=dI(e,d),I.payload={element:g},A=A===void 0?null:A,A!==null&&(I.callback=A),g=JI(l,I,d),g!==null&&(Dg(g,l,d,e),ml(g,l,d)),d}function Tl(g){if(g=g.current,!g.child)return null;switch(g.child.tag){case 5:return g.child.stateNode;default:return g.child.stateNode}}function Xt(g,I){if(g=g.memoizedState,g!==null&&g.dehydrated!==null){var C=g.retryLane;g.retryLane=C!==0&&C<I?C:I}}function cc(g,I){Xt(g,I),(g=g.alternate)&&Xt(g,I)}function iG(){return null}var oZ=typeof reportError=="function"?reportError:function(g){console.error(g)};function tc(g){this._internalRoot=g}te.prototype.render=tc.prototype.render=function(g){var I=this._internalRoot;if(I===null)throw Error(B(409));ce(g,I,null,null)};te.prototype.unmount=tc.prototype.unmount=function(){var g=this._internalRoot;if(g!==null){this._internalRoot=null;var I=g.containerInfo;IC(function(){ce(null,g,null,null)}),I[cI]=null}};function te(g){this._internalRoot=g}te.prototype.unstable_scheduleHydration=function(g){if(g){var I=Qo();g={blockedOn:null,target:g,priority:I};for(var C=0;C<bI.length&&I!==0&&I<bI[C].priority;C++);bI.splice(C,0,g),C===0&&Mo(g)}};function oc(g){return!(!g||g.nodeType!==1&&g.nodeType!==9&&g.nodeType!==11)}function oe(g){return!(!g||g.nodeType!==1&&g.nodeType!==9&&g.nodeType!==11&&(g.nodeType!==8||g.nodeValue!==" react-mount-point-unstable "))}function Jt(){}function ZG(g,I,C,A,l){if(l){if(typeof A=="function"){var e=A;A=function(){var t=Tl(d);e.call(t)}}var d=tZ(I,A,g,0,null,!1,!1,"",Jt);return g._reactRootContainer=d,g[cI]=d.current,SA(g.nodeType===8?g.parentNode:g),IC(),d}for(;l=g.lastChild;)g.removeChild(l);if(typeof A=="function"){var n=A;A=function(){var t=Tl(c);n.call(t)}}var c=nc(g,0,!1,null,null,!1,!1,"",Jt);return g._reactRootContainer=c,g[cI]=c.current,SA(g.nodeType===8?g.parentNode:g),IC(function(){ce(I,c,C,A)}),c}function ie(g,I,C,A,l){var e=C._reactRootContainer;if(e){var d=e;if(typeof l=="function"){var n=l;l=function(){var c=Tl(d);n.call(c)}}ce(I,d,g,l)}else d=ZG(C,I,g,l,A);return Tl(d)}zo=function(g){switch(g.tag){case 3:var I=g.stateNode;if(I.current.memoizedState.isDehydrated){var C=AA(I.pendingLanes);C!==0&&(pn(I,C|1),Vg(I,O()),!(K&6)&&(zC=O()+500,wI()))}break;case 13:IC(function(){var A=tI(g,1);if(A!==null){var l=Gg();Dg(A,g,1,l)}}),cc(g,1)}};kn=function(g){if(g.tag===13){var I=tI(g,134217728);if(I!==null){var C=Gg();Dg(I,g,134217728,C)}cc(g,134217728)}};Uo=function(g){if(g.tag===13){var I=pI(g),C=tI(g,I);if(C!==null){var A=Gg();Dg(C,g,I,A)}cc(g,I)}};Qo=function(){return F};Eo=function(g,I){var C=F;try{return F=g,I()}finally{F=C}};Sd=function(g,I,C){switch(I){case"input":if(bd(g,C),I=C.name,C.type==="radio"&&I!=null){for(C=g;C.parentNode;)C=C.parentNode;for(C=C.querySelectorAll("input[name="+JSON.stringify(""+I)+'][type="radio"]'),I=0;I<C.length;I++){var A=C[I];if(A!==g&&A.form===g.form){var l=Ie(A);if(!l)throw Error(B(90));ro(A),bd(A,l)}}}break;case"textarea":ho(g,C);break;case"select":I=C.value,I!=null&&JC(g,!!C.multiple,I,!1)}};Ro=Ac;po=IC;var sG={usingClientEntryPoint:!1,Events:[zA,BC,Ie,Xo,Jo,Ac]},$C={findFiberByHostInstance:DI,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},aG={bundleType:$C.bundleType,version:$C.version,rendererPackageName:$C.rendererPackageName,rendererConfig:$C.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:iI.ReactCurrentDispatcher,findHostInstanceByFiber:function(g){return g=Ho(g),g===null?null:g.stateNode},findFiberByHostInstance:$C.findFiberByHostInstance||iG,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var cl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!cl.isDisabled&&cl.supportsFiber)try{ql=cl.inject(aG),qg=cl}catch{}}pg.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=sG;pg.createPortal=function(g,I){var C=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!oc(I))throw Error(B(200));return oG(g,I,null,C)};pg.createRoot=function(g,I){if(!oc(g))throw Error(B(299));var C=!1,A="",l=oZ;return I!=null&&(I.unstable_strictMode===!0&&(C=!0),I.identifierPrefix!==void 0&&(A=I.identifierPrefix),I.onRecoverableError!==void 0&&(l=I.onRecoverableError)),I=nc(g,1,!1,null,null,C,!1,A,l),g[cI]=I.current,SA(g.nodeType===8?g.parentNode:g),new tc(I)};pg.findDOMNode=function(g){if(g==null)return null;if(g.nodeType===1)return g;var I=g._reactInternals;if(I===void 0)throw typeof g.render=="function"?Error(B(188)):(g=Object.keys(g).join(","),Error(B(268,g)));return g=Ho(I),g=g===null?null:g.stateNode,g};pg.flushSync=function(g){return IC(g)};pg.hydrate=function(g,I,C){if(!oe(I))throw Error(B(200));return ie(null,g,I,!0,C)};pg.hydrateRoot=function(g,I,C){if(!oc(g))throw Error(B(405));var A=C!=null&&C.hydratedSources||null,l=!1,e="",d=oZ;if(C!=null&&(C.unstable_strictMode===!0&&(l=!0),C.identifierPrefix!==void 0&&(e=C.identifierPrefix),C.onRecoverableError!==void 0&&(d=C.onRecoverableError)),I=tZ(I,null,g,1,C??null,l,!1,e,d),g[cI]=I.current,SA(g),A)for(g=0;g<A.length;g++)C=A[g],l=C._getVersion,l=l(C._source),I.mutableSourceEagerHydrationData==null?I.mutableSourceEagerHydrationData=[C,l]:I.mutableSourceEagerHydrationData.push(C,l);return new te(I)};pg.render=function(g,I,C){if(!oe(I))throw Error(B(200));return ie(null,g,I,!1,C)};pg.unmountComponentAtNode=function(g){if(!oe(g))throw Error(B(40));return g._reactRootContainer?(IC(function(){ie(null,null,g,!1,function(){g._reactRootContainer=null,g[cI]=null})}),!0):!1};pg.unstable_batchedUpdates=Ac;pg.unstable_renderSubtreeIntoContainer=function(g,I,C,A){if(!oe(C))throw Error(B(200));if(g==null||g._reactInternals===void 0)throw Error(B(38));return ie(g,I,C,!1,A)};pg.version="18.3.1-next-f1338f8080-20240426";function iZ(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(iZ)}catch(g){console.error(g)}}iZ(),io.exports=pg;var GG=io.exports,Rt=GG;id.createRoot=Rt.createRoot,id.hydrateRoot=Rt.hydrateRoot;const uG="modulepreload",mG=function(g){return"/rogaining/"+g},pt={},QA=function(I,C,A){if(!C||C.length===0)return I();const l=document.getElementsByTagName("link");return Promise.all(C.map(e=>{if(e=mG(e),e in pt)return;pt[e]=!0;const d=e.endsWith(".css"),n=d?'[rel="stylesheet"]':"";if(!!A)for(let o=l.length-1;o>=0;o--){const i=l[o];if(i.href===e&&(!d||i.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${e}"]${n}`))return;const t=document.createElement("link");if(t.rel=d?"stylesheet":uG,d||(t.as="script",t.crossOrigin=""),t.href=e,document.head.appendChild(t),d)return new Promise((o,i)=>{t.addEventListener("load",o),t.addEventListener("error",()=>i(new Error(`Unable to preload CSS for ${e}`)))})})).then(()=>I()).catch(e=>{const d=new Event("vite:preloadError",{cancelable:!0});if(d.payload=e,window.dispatchEvent(d),!d.defaultPrevented)throw e})},bG=g=>{let I;return g?I=g:typeof fetch>"u"?I=(...C)=>QA(()=>Promise.resolve().then(()=>LC),void 0).then(({default:A})=>A(...C)):I=fetch,(...C)=>I(...C)};class ic extends Error{constructor(I,C="FunctionsError",A){super(I),this.name=C,this.context=A}}class rG extends ic{constructor(I){super("Failed to send a request to the Edge Function","FunctionsFetchError",I)}}class kt extends ic{constructor(I){super("Relay Error invoking the Edge Function","FunctionsRelayError",I)}}class Yt extends ic{constructor(I){super("Edge Function returned a non-2xx status code","FunctionsHttpError",I)}}var ln;(function(g){g.Any="any",g.ApNortheast1="ap-northeast-1",g.ApNortheast2="ap-northeast-2",g.ApSouth1="ap-south-1",g.ApSoutheast1="ap-southeast-1",g.ApSoutheast2="ap-southeast-2",g.CaCentral1="ca-central-1",g.EuCentral1="eu-central-1",g.EuWest1="eu-west-1",g.EuWest2="eu-west-2",g.EuWest3="eu-west-3",g.SaEast1="sa-east-1",g.UsEast1="us-east-1",g.UsWest1="us-west-1",g.UsWest2="us-west-2"})(ln||(ln={}));var BG=globalThis&&globalThis.__awaiter||function(g,I,C,A){function l(e){return e instanceof C?e:new C(function(d){d(e)})}return new(C||(C=Promise))(function(e,d){function n(o){try{t(A.next(o))}catch(i){d(i)}}function c(o){try{t(A.throw(o))}catch(i){d(i)}}function t(o){o.done?e(o.value):l(o.value).then(n,c)}t((A=A.apply(g,I||[])).next())})};class hG{constructor(I,{headers:C={},customFetch:A,region:l=ln.Any}={}){this.url=I,this.headers=C,this.region=l,this.fetch=bG(A)}setAuth(I){this.headers.Authorization=`Bearer ${I}`}invoke(I,C={}){var A;return BG(this,void 0,void 0,function*(){try{const{headers:l,method:e,body:d}=C;let n={},{region:c}=C;c||(c=this.region);const t=new URL(`${this.url}/${I}`);c&&c!=="any"&&(n["x-region"]=c,t.searchParams.set("forceFunctionRegion",c));let o;d&&(l&&!Object.prototype.hasOwnProperty.call(l,"Content-Type")||!l)&&(typeof Blob<"u"&&d instanceof Blob||d instanceof ArrayBuffer?(n["Content-Type"]="application/octet-stream",o=d):typeof d=="string"?(n["Content-Type"]="text/plain",o=d):typeof FormData<"u"&&d instanceof FormData?o=d:(n["Content-Type"]="application/json",o=JSON.stringify(d)));const i=yield this.fetch(t.toString(),{method:e||"POST",headers:Object.assign(Object.assign(Object.assign({},n),this.headers),l),body:o}).catch(r=>{throw new rG(r)}),a=i.headers.get("x-relay-error");if(a&&a==="true")throw new kt(i);if(!i.ok)throw new Yt(i);let u=((A=i.headers.get("Content-Type"))!==null&&A!==void 0?A:"text/plain").split(";")[0].trim(),b;return u==="application/json"?b=yield i.json():u==="application/octet-stream"?b=yield i.blob():u==="text/event-stream"?b=i:u==="multipart/form-data"?b=yield i.formData():b=yield i.text(),{data:b,error:null,response:i}}catch(l){return{data:null,error:l,response:l instanceof Yt||l instanceof kt?l.context:void 0}}})}}var Bg={},Zc={},Ze={},EA={},se={},ae={},yG=function(){if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw new Error("unable to locate global object")},UC=yG();const WG=UC.fetch,ZZ=UC.fetch.bind(UC),sZ=UC.Headers,VG=UC.Request,SG=UC.Response,LC=Object.freeze(Object.defineProperty({__proto__:null,Headers:sZ,Request:VG,Response:SG,default:ZZ,fetch:WG},Symbol.toStringTag,{value:"Module"})),XG=EZ(LC);var Ge={};Object.defineProperty(Ge,"__esModule",{value:!0});let JG=class extends Error{constructor(I){super(I.message),this.name="PostgrestError",this.details=I.details,this.hint=I.hint,this.code=I.code}};Ge.default=JG;var aZ=Fg&&Fg.__importDefault||function(g){return g&&g.__esModule?g:{default:g}};Object.defineProperty(ae,"__esModule",{value:!0});const RG=aZ(XG),pG=aZ(Ge);let kG=class{constructor(I){this.shouldThrowOnError=!1,this.method=I.method,this.url=I.url,this.headers=I.headers,this.schema=I.schema,this.body=I.body,this.shouldThrowOnError=I.shouldThrowOnError,this.signal=I.signal,this.isMaybeSingle=I.isMaybeSingle,I.fetch?this.fetch=I.fetch:typeof fetch>"u"?this.fetch=RG.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(I,C){return this.headers=Object.assign({},this.headers),this.headers[I]=C,this}then(I,C){this.schema===void 0||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),this.method!=="GET"&&this.method!=="HEAD"&&(this.headers["Content-Type"]="application/json");const A=this.fetch;let l=A(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async e=>{var d,n,c;let t=null,o=null,i=null,a=e.status,u=e.statusText;if(e.ok){if(this.method!=="HEAD"){const G=await e.text();G===""||(this.headers.Accept==="text/csv"||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?o=G:o=JSON.parse(G))}const r=(d=this.headers.Prefer)===null||d===void 0?void 0:d.match(/count=(exact|planned|estimated)/),V=(n=e.headers.get("content-range"))===null||n===void 0?void 0:n.split("/");r&&V&&V.length>1&&(i=parseInt(V[1])),this.isMaybeSingle&&this.method==="GET"&&Array.isArray(o)&&(o.length>1?(t={code:"PGRST116",details:`Results contain ${o.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},o=null,i=null,a=406,u="Not Acceptable"):o.length===1?o=o[0]:o=null)}else{const r=await e.text();try{t=JSON.parse(r),Array.isArray(t)&&e.status===404&&(o=[],t=null,a=200,u="OK")}catch{e.status===404&&r===""?(a=204,u="No Content"):t={message:r}}if(t&&this.isMaybeSingle&&(!((c=t==null?void 0:t.details)===null||c===void 0)&&c.includes("0 rows"))&&(t=null,a=200,u="OK"),t&&this.shouldThrowOnError)throw new pG.default(t)}return{error:t,data:o,count:i,status:a,statusText:u}});return this.shouldThrowOnError||(l=l.catch(e=>{var d,n,c;return{error:{message:`${(d=e==null?void 0:e.name)!==null&&d!==void 0?d:"FetchError"}: ${e==null?void 0:e.message}`,details:`${(n=e==null?void 0:e.stack)!==null&&n!==void 0?n:""}`,hint:"",code:`${(c=e==null?void 0:e.code)!==null&&c!==void 0?c:""}`},data:null,count:null,status:0,statusText:""}})),l.then(I,C)}returns(){return this}overrideTypes(){return this}};ae.default=kG;var YG=Fg&&Fg.__importDefault||function(g){return g&&g.__esModule?g:{default:g}};Object.defineProperty(se,"__esModule",{value:!0});const HG=YG(ae);let vG=class extends HG.default{select(I){let C=!1;const A=(I??"*").split("").map(l=>/\s/.test(l)&&!C?"":(l==='"'&&(C=!C),l)).join("");return this.url.searchParams.set("select",A),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(I,{ascending:C=!0,nullsFirst:A,foreignTable:l,referencedTable:e=l}={}){const d=e?`${e}.order`:"order",n=this.url.searchParams.get(d);return this.url.searchParams.set(d,`${n?`${n},`:""}${I}.${C?"asc":"desc"}${A===void 0?"":A?".nullsfirst":".nullslast"}`),this}limit(I,{foreignTable:C,referencedTable:A=C}={}){const l=typeof A>"u"?"limit":`${A}.limit`;return this.url.searchParams.set(l,`${I}`),this}range(I,C,{foreignTable:A,referencedTable:l=A}={}){const e=typeof l>"u"?"offset":`${l}.offset`,d=typeof l>"u"?"limit":`${l}.limit`;return this.url.searchParams.set(e,`${I}`),this.url.searchParams.set(d,`${C-I+1}`),this}abortSignal(I){return this.signal=I,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return this.method==="GET"?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:I=!1,verbose:C=!1,settings:A=!1,buffers:l=!1,wal:e=!1,format:d="text"}={}){var n;const c=[I?"analyze":null,C?"verbose":null,A?"settings":null,l?"buffers":null,e?"wal":null].filter(Boolean).join("|"),t=(n=this.headers.Accept)!==null&&n!==void 0?n:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${d}; for="${t}"; options=${c};`,d==="json"?this:this}rollback(){var I;return((I=this.headers.Prefer)!==null&&I!==void 0?I:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}};se.default=vG;var KG=Fg&&Fg.__importDefault||function(g){return g&&g.__esModule?g:{default:g}};Object.defineProperty(EA,"__esModule",{value:!0});const wG=KG(se);let FG=class extends wG.default{eq(I,C){return this.url.searchParams.append(I,`eq.${C}`),this}neq(I,C){return this.url.searchParams.append(I,`neq.${C}`),this}gt(I,C){return this.url.searchParams.append(I,`gt.${C}`),this}gte(I,C){return this.url.searchParams.append(I,`gte.${C}`),this}lt(I,C){return this.url.searchParams.append(I,`lt.${C}`),this}lte(I,C){return this.url.searchParams.append(I,`lte.${C}`),this}like(I,C){return this.url.searchParams.append(I,`like.${C}`),this}likeAllOf(I,C){return this.url.searchParams.append(I,`like(all).{${C.join(",")}}`),this}likeAnyOf(I,C){return this.url.searchParams.append(I,`like(any).{${C.join(",")}}`),this}ilike(I,C){return this.url.searchParams.append(I,`ilike.${C}`),this}ilikeAllOf(I,C){return this.url.searchParams.append(I,`ilike(all).{${C.join(",")}}`),this}ilikeAnyOf(I,C){return this.url.searchParams.append(I,`ilike(any).{${C.join(",")}}`),this}is(I,C){return this.url.searchParams.append(I,`is.${C}`),this}in(I,C){const A=Array.from(new Set(C)).map(l=>typeof l=="string"&&new RegExp("[,()]").test(l)?`"${l}"`:`${l}`).join(",");return this.url.searchParams.append(I,`in.(${A})`),this}contains(I,C){return typeof C=="string"?this.url.searchParams.append(I,`cs.${C}`):Array.isArray(C)?this.url.searchParams.append(I,`cs.{${C.join(",")}}`):this.url.searchParams.append(I,`cs.${JSON.stringify(C)}`),this}containedBy(I,C){return typeof C=="string"?this.url.searchParams.append(I,`cd.${C}`):Array.isArray(C)?this.url.searchParams.append(I,`cd.{${C.join(",")}}`):this.url.searchParams.append(I,`cd.${JSON.stringify(C)}`),this}rangeGt(I,C){return this.url.searchParams.append(I,`sr.${C}`),this}rangeGte(I,C){return this.url.searchParams.append(I,`nxl.${C}`),this}rangeLt(I,C){return this.url.searchParams.append(I,`sl.${C}`),this}rangeLte(I,C){return this.url.searchParams.append(I,`nxr.${C}`),this}rangeAdjacent(I,C){return this.url.searchParams.append(I,`adj.${C}`),this}overlaps(I,C){return typeof C=="string"?this.url.searchParams.append(I,`ov.${C}`):this.url.searchParams.append(I,`ov.{${C.join(",")}}`),this}textSearch(I,C,{config:A,type:l}={}){let e="";l==="plain"?e="pl":l==="phrase"?e="ph":l==="websearch"&&(e="w");const d=A===void 0?"":`(${A})`;return this.url.searchParams.append(I,`${e}fts${d}.${C}`),this}match(I){return Object.entries(I).forEach(([C,A])=>{this.url.searchParams.append(C,`eq.${A}`)}),this}not(I,C,A){return this.url.searchParams.append(I,`not.${C}.${A}`),this}or(I,{foreignTable:C,referencedTable:A=C}={}){const l=A?`${A}.or`:"or";return this.url.searchParams.append(l,`(${I})`),this}filter(I,C,A){return this.url.searchParams.append(I,`${C}.${A}`),this}};EA.default=FG;var NG=Fg&&Fg.__importDefault||function(g){return g&&g.__esModule?g:{default:g}};Object.defineProperty(Ze,"__esModule",{value:!0});const gA=NG(EA);let fG=class{constructor(I,{headers:C={},schema:A,fetch:l}){this.url=I,this.headers=C,this.schema=A,this.fetch=l}select(I,{head:C=!1,count:A}={}){const l=C?"HEAD":"GET";let e=!1;const d=(I??"*").split("").map(n=>/\s/.test(n)&&!e?"":(n==='"'&&(e=!e),n)).join("");return this.url.searchParams.set("select",d),A&&(this.headers.Prefer=`count=${A}`),new gA.default({method:l,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(I,{count:C,defaultToNull:A=!0}={}){const l="POST",e=[];if(this.headers.Prefer&&e.push(this.headers.Prefer),C&&e.push(`count=${C}`),A||e.push("missing=default"),this.headers.Prefer=e.join(","),Array.isArray(I)){const d=I.reduce((n,c)=>n.concat(Object.keys(c)),[]);if(d.length>0){const n=[...new Set(d)].map(c=>`"${c}"`);this.url.searchParams.set("columns",n.join(","))}}return new gA.default({method:l,url:this.url,headers:this.headers,schema:this.schema,body:I,fetch:this.fetch,allowEmpty:!1})}upsert(I,{onConflict:C,ignoreDuplicates:A=!1,count:l,defaultToNull:e=!0}={}){const d="POST",n=[`resolution=${A?"ignore":"merge"}-duplicates`];if(C!==void 0&&this.url.searchParams.set("on_conflict",C),this.headers.Prefer&&n.push(this.headers.Prefer),l&&n.push(`count=${l}`),e||n.push("missing=default"),this.headers.Prefer=n.join(","),Array.isArray(I)){const c=I.reduce((t,o)=>t.concat(Object.keys(o)),[]);if(c.length>0){const t=[...new Set(c)].map(o=>`"${o}"`);this.url.searchParams.set("columns",t.join(","))}}return new gA.default({method:d,url:this.url,headers:this.headers,schema:this.schema,body:I,fetch:this.fetch,allowEmpty:!1})}update(I,{count:C}={}){const A="PATCH",l=[];return this.headers.Prefer&&l.push(this.headers.Prefer),C&&l.push(`count=${C}`),this.headers.Prefer=l.join(","),new gA.default({method:A,url:this.url,headers:this.headers,schema:this.schema,body:I,fetch:this.fetch,allowEmpty:!1})}delete({count:I}={}){const C="DELETE",A=[];return I&&A.push(`count=${I}`),this.headers.Prefer&&A.unshift(this.headers.Prefer),this.headers.Prefer=A.join(","),new gA.default({method:C,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}};Ze.default=fG;var ue={},me={};Object.defineProperty(me,"__esModule",{value:!0});me.version=void 0;me.version="0.0.0-automated";Object.defineProperty(ue,"__esModule",{value:!0});ue.DEFAULT_HEADERS=void 0;const zG=me;ue.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${zG.version}`};var GZ=Fg&&Fg.__importDefault||function(g){return g&&g.__esModule?g:{default:g}};Object.defineProperty(Zc,"__esModule",{value:!0});const UG=GZ(Ze),QG=GZ(EA),EG=ue;let MG=class uZ{constructor(I,{headers:C={},schema:A,fetch:l}={}){this.url=I,this.headers=Object.assign(Object.assign({},EG.DEFAULT_HEADERS),C),this.schemaName=A,this.fetch=l}from(I){const C=new URL(`${this.url}/${I}`);return new UG.default(C,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(I){return new uZ(this.url,{headers:this.headers,schema:I,fetch:this.fetch})}rpc(I,C={},{head:A=!1,get:l=!1,count:e}={}){let d;const n=new URL(`${this.url}/rpc/${I}`);let c;A||l?(d=A?"HEAD":"GET",Object.entries(C).filter(([o,i])=>i!==void 0).map(([o,i])=>[o,Array.isArray(i)?`{${i.join(",")}}`:`${i}`]).forEach(([o,i])=>{n.searchParams.append(o,i)})):(d="POST",c=C);const t=Object.assign({},this.headers);return e&&(t.Prefer=`count=${e}`),new QG.default({method:d,url:n,headers:t,schema:this.schemaName,body:c,fetch:this.fetch,allowEmpty:!1})}};Zc.default=MG;var xC=Fg&&Fg.__importDefault||function(g){return g&&g.__esModule?g:{default:g}};Object.defineProperty(Bg,"__esModule",{value:!0});Bg.PostgrestError=Bg.PostgrestBuilder=Bg.PostgrestTransformBuilder=Bg.PostgrestFilterBuilder=Bg.PostgrestQueryBuilder=Bg.PostgrestClient=void 0;const mZ=xC(Zc);Bg.PostgrestClient=mZ.default;const bZ=xC(Ze);Bg.PostgrestQueryBuilder=bZ.default;const rZ=xC(EA);Bg.PostgrestFilterBuilder=rZ.default;const BZ=xC(se);Bg.PostgrestTransformBuilder=BZ.default;const hZ=xC(ae);Bg.PostgrestBuilder=hZ.default;const yZ=xC(Ge);Bg.PostgrestError=yZ.default;var LG=Bg.default={PostgrestClient:mZ.default,PostgrestQueryBuilder:bZ.default,PostgrestFilterBuilder:rZ.default,PostgrestTransformBuilder:BZ.default,PostgrestBuilder:hZ.default,PostgrestError:yZ.default};const{PostgrestClient:xG,PostgrestQueryBuilder:Gb,PostgrestFilterBuilder:ub,PostgrestTransformBuilder:mb,PostgrestBuilder:bb,PostgrestError:rb}=LG;function DG(){if(typeof WebSocket<"u")return WebSocket;if(typeof global.WebSocket<"u")return global.WebSocket;if(typeof window.WebSocket<"u")return window.WebSocket;if(typeof self.WebSocket<"u")return self.WebSocket;throw new Error("`WebSocket` is not supported in this environment")}const TG=DG(),jG="2.11.15",PG=`realtime-js/${jG}`,OG="1.0.0",WZ=1e4,qG=1e3;var GA;(function(g){g[g.connecting=0]="connecting",g[g.open=1]="open",g[g.closing=2]="closing",g[g.closed=3]="closed"})(GA||(GA={}));var ig;(function(g){g.closed="closed",g.errored="errored",g.joined="joined",g.joining="joining",g.leaving="leaving"})(ig||(ig={}));var Mg;(function(g){g.close="phx_close",g.error="phx_error",g.join="phx_join",g.reply="phx_reply",g.leave="phx_leave",g.access_token="access_token"})(Mg||(Mg={}));var en;(function(g){g.websocket="websocket"})(en||(en={}));var xI;(function(g){g.Connecting="connecting",g.Open="open",g.Closing="closing",g.Closed="closed"})(xI||(xI={}));class _G{constructor(){this.HEADER_LENGTH=1}decode(I,C){return I.constructor===ArrayBuffer?C(this._binaryDecode(I)):C(typeof I=="string"?JSON.parse(I):{})}_binaryDecode(I){const C=new DataView(I),A=new TextDecoder;return this._decodeBroadcast(I,C,A)}_decodeBroadcast(I,C,A){const l=C.getUint8(1),e=C.getUint8(2);let d=this.HEADER_LENGTH+2;const n=A.decode(I.slice(d,d+l));d=d+l;const c=A.decode(I.slice(d,d+e));d=d+e;const t=JSON.parse(A.decode(I.slice(d,I.byteLength)));return{ref:null,topic:n,event:c,payload:t}}}class VZ{constructor(I,C){this.callback=I,this.timerCalc=C,this.timer=void 0,this.tries=0,this.callback=I,this.timerCalc=C}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}var f;(function(g){g.abstime="abstime",g.bool="bool",g.date="date",g.daterange="daterange",g.float4="float4",g.float8="float8",g.int2="int2",g.int4="int4",g.int4range="int4range",g.int8="int8",g.int8range="int8range",g.json="json",g.jsonb="jsonb",g.money="money",g.numeric="numeric",g.oid="oid",g.reltime="reltime",g.text="text",g.time="time",g.timestamp="timestamp",g.timestamptz="timestamptz",g.timetz="timetz",g.tsrange="tsrange",g.tstzrange="tstzrange"})(f||(f={}));const Ht=(g,I,C={})=>{var A;const l=(A=C.skipTypes)!==null&&A!==void 0?A:[];return Object.keys(I).reduce((e,d)=>(e[d]=$G(d,g,I,l),e),{})},$G=(g,I,C,A)=>{const l=I.find(n=>n.name===g),e=l==null?void 0:l.type,d=C[g];return e&&!A.includes(e)?SZ(e,d):dn(d)},SZ=(g,I)=>{if(g.charAt(0)==="_"){const C=g.slice(1,g.length);return Au(I,C)}switch(g){case f.bool:return gu(I);case f.float4:case f.float8:case f.int2:case f.int4:case f.int8:case f.numeric:case f.oid:return Iu(I);case f.json:case f.jsonb:return Cu(I);case f.timestamp:return lu(I);case f.abstime:case f.date:case f.daterange:case f.int4range:case f.int8range:case f.money:case f.reltime:case f.text:case f.time:case f.timestamptz:case f.timetz:case f.tsrange:case f.tstzrange:return dn(I);default:return dn(I)}},dn=g=>g,gu=g=>{switch(g){case"t":return!0;case"f":return!1;default:return g}},Iu=g=>{if(typeof g=="string"){const I=parseFloat(g);if(!Number.isNaN(I))return I}return g},Cu=g=>{if(typeof g=="string")try{return JSON.parse(g)}catch(I){return console.log(`JSON parse error: ${I}`),g}return g},Au=(g,I)=>{if(typeof g!="string")return g;const C=g.length-1,A=g[C];if(g[0]==="{"&&A==="}"){let e;const d=g.slice(1,C);try{e=JSON.parse("["+d+"]")}catch{e=d?d.split(","):[]}return e.map(n=>SZ(I,n))}return g},lu=g=>typeof g=="string"?g.replace(" ","T"):g,XZ=g=>{let I=g;return I=I.replace(/^ws/i,"http"),I=I.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),I.replace(/\/+$/,"")};class ld{constructor(I,C,A={},l=WZ){this.channel=I,this.event=C,this.payload=A,this.timeout=l,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(I){this.timeout=I,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(I){this.payload=Object.assign(Object.assign({},this.payload),I)}receive(I,C){var A;return this._hasReceived(I)&&C((A=this.receivedResp)===null||A===void 0?void 0:A.response),this.recHooks.push({status:I,callback:C}),this}startTimeout(){if(this.timeoutTimer)return;this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref);const I=C=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=C,this._matchReceive(C)};this.channel._on(this.refEvent,{},I),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}trigger(I,C){this.refEvent&&this.channel._trigger(this.refEvent,{status:I,response:C})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:I,response:C}){this.recHooks.filter(A=>A.status===I).forEach(A=>A.callback(C))}_hasReceived(I){return this.receivedResp&&this.receivedResp.status===I}}var vt;(function(g){g.SYNC="sync",g.JOIN="join",g.LEAVE="leave"})(vt||(vt={}));class uA{constructor(I,C){this.channel=I,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const A=(C==null?void 0:C.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(A.state,{},l=>{const{onJoin:e,onLeave:d,onSync:n}=this.caller;this.joinRef=this.channel._joinRef(),this.state=uA.syncState(this.state,l,e,d),this.pendingDiffs.forEach(c=>{this.state=uA.syncDiff(this.state,c,e,d)}),this.pendingDiffs=[],n()}),this.channel._on(A.diff,{},l=>{const{onJoin:e,onLeave:d,onSync:n}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(l):(this.state=uA.syncDiff(this.state,l,e,d),n())}),this.onJoin((l,e,d)=>{this.channel._trigger("presence",{event:"join",key:l,currentPresences:e,newPresences:d})}),this.onLeave((l,e,d)=>{this.channel._trigger("presence",{event:"leave",key:l,currentPresences:e,leftPresences:d})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(I,C,A,l){const e=this.cloneDeep(I),d=this.transformState(C),n={},c={};return this.map(e,(t,o)=>{d[t]||(c[t]=o)}),this.map(d,(t,o)=>{const i=e[t];if(i){const a=o.map(V=>V.presence_ref),u=i.map(V=>V.presence_ref),b=o.filter(V=>u.indexOf(V.presence_ref)<0),r=i.filter(V=>a.indexOf(V.presence_ref)<0);b.length>0&&(n[t]=b),r.length>0&&(c[t]=r)}else n[t]=o}),this.syncDiff(e,{joins:n,leaves:c},A,l)}static syncDiff(I,C,A,l){const{joins:e,leaves:d}={joins:this.transformState(C.joins),leaves:this.transformState(C.leaves)};return A||(A=()=>{}),l||(l=()=>{}),this.map(e,(n,c)=>{var t;const o=(t=I[n])!==null&&t!==void 0?t:[];if(I[n]=this.cloneDeep(c),o.length>0){const i=I[n].map(u=>u.presence_ref),a=o.filter(u=>i.indexOf(u.presence_ref)<0);I[n].unshift(...a)}A(n,o,c)}),this.map(d,(n,c)=>{let t=I[n];if(!t)return;const o=c.map(i=>i.presence_ref);t=t.filter(i=>o.indexOf(i.presence_ref)<0),I[n]=t,l(n,t,c),t.length===0&&delete I[n]}),I}static map(I,C){return Object.getOwnPropertyNames(I).map(A=>C(A,I[A]))}static transformState(I){return I=this.cloneDeep(I),Object.getOwnPropertyNames(I).reduce((C,A)=>{const l=I[A];return"metas"in l?C[A]=l.metas.map(e=>(e.presence_ref=e.phx_ref,delete e.phx_ref,delete e.phx_ref_prev,e)):C[A]=l,C},{})}static cloneDeep(I){return JSON.parse(JSON.stringify(I))}onJoin(I){this.caller.onJoin=I}onLeave(I){this.caller.onLeave=I}onSync(I){this.caller.onSync=I}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}var Kt;(function(g){g.ALL="*",g.INSERT="INSERT",g.UPDATE="UPDATE",g.DELETE="DELETE"})(Kt||(Kt={}));var wt;(function(g){g.BROADCAST="broadcast",g.PRESENCE="presence",g.POSTGRES_CHANGES="postgres_changes",g.SYSTEM="system"})(wt||(wt={}));var II;(function(g){g.SUBSCRIBED="SUBSCRIBED",g.TIMED_OUT="TIMED_OUT",g.CLOSED="CLOSED",g.CHANNEL_ERROR="CHANNEL_ERROR"})(II||(II={}));class sc{constructor(I,C={config:{}},A){this.topic=I,this.params=C,this.socket=A,this.bindings={},this.state=ig.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=I.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},C.config),this.timeout=this.socket.timeout,this.joinPush=new ld(this,Mg.join,this.params,this.timeout),this.rejoinTimer=new VZ(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=ig.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(l=>l.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=ig.closed,this.socket._remove(this)}),this._onError(l=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,l),this.state=ig.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=ig.errored,this.rejoinTimer.scheduleTimeout())}),this._on(Mg.reply,{},(l,e)=>{this._trigger(this._replyEventName(e),l)}),this.presence=new uA(this),this.broadcastEndpointURL=XZ(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(I,C=this.timeout){var A,l;if(this.socket.isConnected()||this.socket.connect(),this.state==ig.closed){const{config:{broadcast:e,presence:d,private:n}}=this.params;this._onError(o=>I==null?void 0:I(II.CHANNEL_ERROR,o)),this._onClose(()=>I==null?void 0:I(II.CLOSED));const c={},t={broadcast:e,presence:d,postgres_changes:(l=(A=this.bindings.postgres_changes)===null||A===void 0?void 0:A.map(o=>o.filter))!==null&&l!==void 0?l:[],private:n};this.socket.accessTokenValue&&(c.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:t},c)),this.joinedOnce=!0,this._rejoin(C),this.joinPush.receive("ok",async({postgres_changes:o})=>{var i;if(this.socket.setAuth(),o===void 0){I==null||I(II.SUBSCRIBED);return}else{const a=this.bindings.postgres_changes,u=(i=a==null?void 0:a.length)!==null&&i!==void 0?i:0,b=[];for(let r=0;r<u;r++){const V=a[r],{filter:{event:G,schema:Z,table:s,filter:m}}=V,h=o&&o[r];if(h&&h.event===G&&h.schema===Z&&h.table===s&&h.filter===m)b.push(Object.assign(Object.assign({},V),{id:h.id}));else{this.unsubscribe(),this.state=ig.errored,I==null||I(II.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes"));return}}this.bindings.postgres_changes=b,I&&I(II.SUBSCRIBED);return}}).receive("error",o=>{this.state=ig.errored,I==null||I(II.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(o).join(", ")||"error")))}).receive("timeout",()=>{I==null||I(II.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(I,C={}){return await this.send({type:"presence",event:"track",payload:I},C.timeout||this.timeout)}async untrack(I={}){return await this.send({type:"presence",event:"untrack"},I)}on(I,C,A){return this._on(I,C,A)}async send(I,C={}){var A,l;if(!this._canPush()&&I.type==="broadcast"){const{event:e,payload:d}=I,c={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:e,payload:d,private:this.private}]})};try{const t=await this._fetchWithTimeout(this.broadcastEndpointURL,c,(A=C.timeout)!==null&&A!==void 0?A:this.timeout);return await((l=t.body)===null||l===void 0?void 0:l.cancel()),t.ok?"ok":"error"}catch(t){return t.name==="AbortError"?"timed out":"error"}}else return new Promise(e=>{var d,n,c;const t=this._push(I.type,I,C.timeout||this.timeout);I.type==="broadcast"&&!(!((c=(n=(d=this.params)===null||d===void 0?void 0:d.config)===null||n===void 0?void 0:n.broadcast)===null||c===void 0)&&c.ack)&&e("ok"),t.receive("ok",()=>e("ok")),t.receive("error",()=>e("error")),t.receive("timeout",()=>e("timed out"))})}updateJoinPayload(I){this.joinPush.updatePayload(I)}unsubscribe(I=this.timeout){this.state=ig.leaving;const C=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(Mg.close,"leave",this._joinRef())};this.joinPush.destroy();let A=null;return new Promise(l=>{A=new ld(this,Mg.leave,{},I),A.receive("ok",()=>{C(),l("ok")}).receive("timeout",()=>{C(),l("timed out")}).receive("error",()=>{l("error")}),A.send(),this._canPush()||A.trigger("ok",{})}).finally(()=>{A==null||A.destroy()})}teardown(){this.pushBuffer.forEach(I=>I.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}async _fetchWithTimeout(I,C,A){const l=new AbortController,e=setTimeout(()=>l.abort(),A),d=await this.socket.fetch(I,Object.assign(Object.assign({},C),{signal:l.signal}));return clearTimeout(e),d}_push(I,C,A=this.timeout){if(!this.joinedOnce)throw`tried to push '${I}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let l=new ld(this,I,C,A);return this._canPush()?l.send():(l.startTimeout(),this.pushBuffer.push(l)),l}_onMessage(I,C,A){return C}_isMember(I){return this.topic===I}_joinRef(){return this.joinPush.ref}_trigger(I,C,A){var l,e;const d=I.toLocaleLowerCase(),{close:n,error:c,leave:t,join:o}=Mg;if(A&&[n,c,t,o].indexOf(d)>=0&&A!==this._joinRef())return;let a=this._onMessage(d,C,A);if(C&&!a)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(d)?(l=this.bindings.postgres_changes)===null||l===void 0||l.filter(u=>{var b,r,V;return((b=u.filter)===null||b===void 0?void 0:b.event)==="*"||((V=(r=u.filter)===null||r===void 0?void 0:r.event)===null||V===void 0?void 0:V.toLocaleLowerCase())===d}).map(u=>u.callback(a,A)):(e=this.bindings[d])===null||e===void 0||e.filter(u=>{var b,r,V,G,Z,s;if(["broadcast","presence","postgres_changes"].includes(d))if("id"in u){const m=u.id,h=(b=u.filter)===null||b===void 0?void 0:b.event;return m&&((r=C.ids)===null||r===void 0?void 0:r.includes(m))&&(h==="*"||(h==null?void 0:h.toLocaleLowerCase())===((V=C.data)===null||V===void 0?void 0:V.type.toLocaleLowerCase()))}else{const m=(Z=(G=u==null?void 0:u.filter)===null||G===void 0?void 0:G.event)===null||Z===void 0?void 0:Z.toLocaleLowerCase();return m==="*"||m===((s=C==null?void 0:C.event)===null||s===void 0?void 0:s.toLocaleLowerCase())}else return u.type.toLocaleLowerCase()===d}).map(u=>{if(typeof a=="object"&&"ids"in a){const b=a.data,{schema:r,table:V,commit_timestamp:G,type:Z,errors:s}=b;a=Object.assign(Object.assign({},{schema:r,table:V,commit_timestamp:G,eventType:Z,new:{},old:{},errors:s}),this._getPayloadRecords(b))}u.callback(a,A)})}_isClosed(){return this.state===ig.closed}_isJoined(){return this.state===ig.joined}_isJoining(){return this.state===ig.joining}_isLeaving(){return this.state===ig.leaving}_replyEventName(I){return`chan_reply_${I}`}_on(I,C,A){const l=I.toLocaleLowerCase(),e={type:l,filter:C,callback:A};return this.bindings[l]?this.bindings[l].push(e):this.bindings[l]=[e],this}_off(I,C){const A=I.toLocaleLowerCase();return this.bindings[A]=this.bindings[A].filter(l=>{var e;return!(((e=l.type)===null||e===void 0?void 0:e.toLocaleLowerCase())===A&&sc.isEqual(l.filter,C))}),this}static isEqual(I,C){if(Object.keys(I).length!==Object.keys(C).length)return!1;for(const A in I)if(I[A]!==C[A])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(I){this._on(Mg.close,{},I)}_onError(I){this._on(Mg.error,{},C=>I(C))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(I=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=ig.joining,this.joinPush.resend(I))}_getPayloadRecords(I){const C={new:{},old:{}};return(I.type==="INSERT"||I.type==="UPDATE")&&(C.new=Ht(I.columns,I.record)),(I.type==="UPDATE"||I.type==="DELETE")&&(C.old=Ht(I.columns,I.old_record)),C}}const Ft=()=>{},eu=`
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;class du{constructor(I,C){var A;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers={},this.params={},this.timeout=WZ,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=Ft,this.ref=0,this.logger=Ft,this.conn=null,this.sendBuffer=[],this.serializer=new _G,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=e=>{let d;return e?d=e:typeof fetch>"u"?d=(...n)=>QA(()=>Promise.resolve().then(()=>LC),void 0).then(({default:c})=>c(...n)):d=fetch,(...n)=>d(...n)},this.endPoint=`${I}/${en.websocket}`,this.httpEndpoint=XZ(I),C!=null&&C.transport?this.transport=C.transport:this.transport=null,C!=null&&C.params&&(this.params=C.params),C!=null&&C.timeout&&(this.timeout=C.timeout),C!=null&&C.logger&&(this.logger=C.logger),(C!=null&&C.logLevel||C!=null&&C.log_level)&&(this.logLevel=C.logLevel||C.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),C!=null&&C.heartbeatIntervalMs&&(this.heartbeatIntervalMs=C.heartbeatIntervalMs);const l=(A=C==null?void 0:C.params)===null||A===void 0?void 0:A.apikey;if(l&&(this.accessTokenValue=l,this.apiKey=l),this.reconnectAfterMs=C!=null&&C.reconnectAfterMs?C.reconnectAfterMs:e=>[1e3,2e3,5e3,1e4][e-1]||1e4,this.encode=C!=null&&C.encode?C.encode:(e,d)=>d(JSON.stringify(e)),this.decode=C!=null&&C.decode?C.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new VZ(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(C==null?void 0:C.fetch),C!=null&&C.worker){if(typeof window<"u"&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(C==null?void 0:C.worker)||!1,this.workerUrl=C==null?void 0:C.workerUrl}this.accessToken=(C==null?void 0:C.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=TG),!this.transport)throw new Error("No transport provided");this.conn=new this.transport(this.endpointURL()),this.setupConnection()}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:OG}))}disconnect(I,C){this.conn&&(this.conn.onclose=function(){},I?this.conn.close(I,C??""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(A=>A.teardown()))}getChannels(){return this.channels}async removeChannel(I){const C=await I.unsubscribe();return this.channels.length===0&&this.disconnect(),C}async removeAllChannels(){const I=await Promise.all(this.channels.map(C=>C.unsubscribe()));return this.channels=[],this.disconnect(),I}log(I,C,A){this.logger(I,C,A)}connectionState(){switch(this.conn&&this.conn.readyState){case GA.connecting:return xI.Connecting;case GA.open:return xI.Open;case GA.closing:return xI.Closing;default:return xI.Closed}}isConnected(){return this.connectionState()===xI.Open}channel(I,C={config:{}}){const A=`realtime:${I}`,l=this.getChannels().find(e=>e.topic===A);if(l)return l;{const e=new sc(`realtime:${I}`,C,this);return this.channels.push(e),e}}push(I){const{topic:C,event:A,payload:l,ref:e}=I,d=()=>{this.encode(I,n=>{var c;(c=this.conn)===null||c===void 0||c.send(n)})};this.log("push",`${C} ${A} (${e})`,l),this.isConnected()?d():this.sendBuffer.push(d)}async setAuth(I=null){let C=I||this.accessToken&&await this.accessToken()||this.accessTokenValue;this.accessTokenValue!=C&&(this.accessTokenValue=C,this.channels.forEach(A=>{const l={access_token:C,version:PG};C&&A.updateJoinPayload(l),A.joinedOnce&&A._isJoined()&&A._push(Mg.access_token,{access_token:C})}))}async sendHeartbeat(){var I;if(!this.isConnected()){this.heartbeatCallback("disconnected");return}if(this.pendingHeartbeatRef){this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),(I=this.conn)===null||I===void 0||I.close(qG,"hearbeat timeout");return}this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),await this.setAuth()}onHeartbeat(I){this.heartbeatCallback=I}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(I=>I()),this.sendBuffer=[])}_makeRef(){let I=this.ref+1;return I===this.ref?this.ref=0:this.ref=I,this.ref.toString()}_leaveOpenTopic(I){let C=this.channels.find(A=>A.topic===I&&(A._isJoined()||A._isJoining()));C&&(this.log("transport",`leaving duplicate topic "${I}"`),C.unsubscribe())}_remove(I){this.channels=this.channels.filter(C=>C.topic!==I.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=I=>this._onConnError(I),this.conn.onmessage=I=>this._onConnMessage(I),this.conn.onclose=I=>this._onConnClose(I))}_onConnMessage(I){this.decode(I.data,C=>{let{topic:A,event:l,payload:e,ref:d}=C;A==="phoenix"&&l==="phx_reply"&&this.heartbeatCallback(C.payload.status=="ok"?"ok":"error"),d&&d===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${e.status||""} ${A} ${l} ${d&&"("+d+")"||""}`,e),Array.from(this.channels).filter(n=>n._isMember(A)).forEach(n=>n._trigger(l,e,d)),this.stateChangeCallbacks.message.forEach(n=>n(C))})}_onConnOpen(){this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker?this.workerRef||this._startWorkerHeartbeat():this._startHeartbeat(),this.stateChangeCallbacks.open.forEach(I=>I())}_startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)}_startWorkerHeartbeat(){this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const I=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(I),this.workerRef.onerror=C=>{this.log("worker","worker error",C.message),this.workerRef.terminate()},this.workerRef.onmessage=C=>{C.data.event==="keepAlive"&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}_onConnClose(I){this.log("transport","close",I),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(C=>C(I))}_onConnError(I){this.log("transport",`${I}`),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(C=>C(I))}_triggerChanError(){this.channels.forEach(I=>I._trigger(Mg.error))}_appendParams(I,C){if(Object.keys(C).length===0)return I;const A=I.match(/\?/)?"&":"?",l=new URLSearchParams(C);return`${I}${A}${l}`}_workerObjectUrl(I){let C;if(I)C=I;else{const A=new Blob([eu],{type:"application/javascript"});C=URL.createObjectURL(A)}return C}}class ac extends Error{constructor(I){super(I),this.__isStorageError=!0,this.name="StorageError"}}function Cg(g){return typeof g=="object"&&g!==null&&"__isStorageError"in g}class nu extends ac{constructor(I,C,A){super(I),this.name="StorageApiError",this.status=C,this.statusCode=A}toJSON(){return{name:this.name,message:this.message,status:this.status,statusCode:this.statusCode}}}class nn extends ac{constructor(I,C){super(I),this.name="StorageUnknownError",this.originalError=C}}var cu=globalThis&&globalThis.__awaiter||function(g,I,C,A){function l(e){return e instanceof C?e:new C(function(d){d(e)})}return new(C||(C=Promise))(function(e,d){function n(o){try{t(A.next(o))}catch(i){d(i)}}function c(o){try{t(A.throw(o))}catch(i){d(i)}}function t(o){o.done?e(o.value):l(o.value).then(n,c)}t((A=A.apply(g,I||[])).next())})};const JZ=g=>{let I;return g?I=g:typeof fetch>"u"?I=(...C)=>QA(()=>Promise.resolve().then(()=>LC),void 0).then(({default:A})=>A(...C)):I=fetch,(...C)=>I(...C)},tu=()=>cu(void 0,void 0,void 0,function*(){return typeof Response>"u"?(yield QA(()=>Promise.resolve().then(()=>LC),void 0)).Response:Response}),cn=g=>{if(Array.isArray(g))return g.map(C=>cn(C));if(typeof g=="function"||g!==Object(g))return g;const I={};return Object.entries(g).forEach(([C,A])=>{const l=C.replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace(/[-_]/g,""));I[l]=cn(A)}),I},ou=g=>{if(typeof g!="object"||g===null)return!1;const I=Object.getPrototypeOf(g);return(I===null||I===Object.prototype||Object.getPrototypeOf(I)===null)&&!(Symbol.toStringTag in g)&&!(Symbol.iterator in g)};var lC=globalThis&&globalThis.__awaiter||function(g,I,C,A){function l(e){return e instanceof C?e:new C(function(d){d(e)})}return new(C||(C=Promise))(function(e,d){function n(o){try{t(A.next(o))}catch(i){d(i)}}function c(o){try{t(A.throw(o))}catch(i){d(i)}}function t(o){o.done?e(o.value):l(o.value).then(n,c)}t((A=A.apply(g,I||[])).next())})};const ed=g=>g.msg||g.message||g.error_description||g.error||JSON.stringify(g),iu=(g,I,C)=>lC(void 0,void 0,void 0,function*(){const A=yield tu();g instanceof A&&!(C!=null&&C.noResolveJson)?g.json().then(l=>{const e=g.status||500,d=(l==null?void 0:l.statusCode)||e+"";I(new nu(ed(l),e,d))}).catch(l=>{I(new nn(ed(l),l))}):I(new nn(ed(g),g))}),Zu=(g,I,C,A)=>{const l={method:g,headers:(I==null?void 0:I.headers)||{}};return g==="GET"||!A?l:(ou(A)?(l.headers=Object.assign({"Content-Type":"application/json"},I==null?void 0:I.headers),l.body=JSON.stringify(A)):l.body=A,Object.assign(Object.assign({},l),C))};function MA(g,I,C,A,l,e){return lC(this,void 0,void 0,function*(){return new Promise((d,n)=>{g(C,Zu(I,A,l,e)).then(c=>{if(!c.ok)throw c;return A!=null&&A.noResolveJson?c:c.json()}).then(c=>d(c)).catch(c=>iu(c,n,A))})})}function jl(g,I,C,A){return lC(this,void 0,void 0,function*(){return MA(g,"GET",I,C,A)})}function CI(g,I,C,A,l){return lC(this,void 0,void 0,function*(){return MA(g,"POST",I,A,l,C)})}function tn(g,I,C,A,l){return lC(this,void 0,void 0,function*(){return MA(g,"PUT",I,A,l,C)})}function su(g,I,C,A){return lC(this,void 0,void 0,function*(){return MA(g,"HEAD",I,Object.assign(Object.assign({},C),{noResolveJson:!0}),A)})}function RZ(g,I,C,A,l){return lC(this,void 0,void 0,function*(){return MA(g,"DELETE",I,A,l,C)})}var bg=globalThis&&globalThis.__awaiter||function(g,I,C,A){function l(e){return e instanceof C?e:new C(function(d){d(e)})}return new(C||(C=Promise))(function(e,d){function n(o){try{t(A.next(o))}catch(i){d(i)}}function c(o){try{t(A.throw(o))}catch(i){d(i)}}function t(o){o.done?e(o.value):l(o.value).then(n,c)}t((A=A.apply(g,I||[])).next())})};const au={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},Nt={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class Gu{constructor(I,C={},A,l){this.url=I,this.headers=C,this.bucketId=A,this.fetch=JZ(l)}uploadOrUpdate(I,C,A,l){return bg(this,void 0,void 0,function*(){try{let e;const d=Object.assign(Object.assign({},Nt),l);let n=Object.assign(Object.assign({},this.headers),I==="POST"&&{"x-upsert":String(d.upsert)});const c=d.metadata;typeof Blob<"u"&&A instanceof Blob?(e=new FormData,e.append("cacheControl",d.cacheControl),c&&e.append("metadata",this.encodeMetadata(c)),e.append("",A)):typeof FormData<"u"&&A instanceof FormData?(e=A,e.append("cacheControl",d.cacheControl),c&&e.append("metadata",this.encodeMetadata(c))):(e=A,n["cache-control"]=`max-age=${d.cacheControl}`,n["content-type"]=d.contentType,c&&(n["x-metadata"]=this.toBase64(this.encodeMetadata(c)))),l!=null&&l.headers&&(n=Object.assign(Object.assign({},n),l.headers));const t=this._removeEmptyFolders(C),o=this._getFinalPath(t),i=yield(I=="PUT"?tn:CI)(this.fetch,`${this.url}/object/${o}`,e,Object.assign({headers:n},d!=null&&d.duplex?{duplex:d.duplex}:{}));return{data:{path:t,id:i.Id,fullPath:i.Key},error:null}}catch(e){if(Cg(e))return{data:null,error:e};throw e}})}upload(I,C,A){return bg(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",I,C,A)})}uploadToSignedUrl(I,C,A,l){return bg(this,void 0,void 0,function*(){const e=this._removeEmptyFolders(I),d=this._getFinalPath(e),n=new URL(this.url+`/object/upload/sign/${d}`);n.searchParams.set("token",C);try{let c;const t=Object.assign({upsert:Nt.upsert},l),o=Object.assign(Object.assign({},this.headers),{"x-upsert":String(t.upsert)});typeof Blob<"u"&&A instanceof Blob?(c=new FormData,c.append("cacheControl",t.cacheControl),c.append("",A)):typeof FormData<"u"&&A instanceof FormData?(c=A,c.append("cacheControl",t.cacheControl)):(c=A,o["cache-control"]=`max-age=${t.cacheControl}`,o["content-type"]=t.contentType);const i=yield tn(this.fetch,n.toString(),c,{headers:o});return{data:{path:e,fullPath:i.Key},error:null}}catch(c){if(Cg(c))return{data:null,error:c};throw c}})}createSignedUploadUrl(I,C){return bg(this,void 0,void 0,function*(){try{let A=this._getFinalPath(I);const l=Object.assign({},this.headers);C!=null&&C.upsert&&(l["x-upsert"]="true");const e=yield CI(this.fetch,`${this.url}/object/upload/sign/${A}`,{},{headers:l}),d=new URL(this.url+e.url),n=d.searchParams.get("token");if(!n)throw new ac("No token returned by API");return{data:{signedUrl:d.toString(),path:I,token:n},error:null}}catch(A){if(Cg(A))return{data:null,error:A};throw A}})}update(I,C,A){return bg(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",I,C,A)})}move(I,C,A){return bg(this,void 0,void 0,function*(){try{return{data:yield CI(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:I,destinationKey:C,destinationBucket:A==null?void 0:A.destinationBucket},{headers:this.headers}),error:null}}catch(l){if(Cg(l))return{data:null,error:l};throw l}})}copy(I,C,A){return bg(this,void 0,void 0,function*(){try{return{data:{path:(yield CI(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:I,destinationKey:C,destinationBucket:A==null?void 0:A.destinationBucket},{headers:this.headers})).Key},error:null}}catch(l){if(Cg(l))return{data:null,error:l};throw l}})}createSignedUrl(I,C,A){return bg(this,void 0,void 0,function*(){try{let l=this._getFinalPath(I),e=yield CI(this.fetch,`${this.url}/object/sign/${l}`,Object.assign({expiresIn:C},A!=null&&A.transform?{transform:A.transform}:{}),{headers:this.headers});const d=A!=null&&A.download?`&download=${A.download===!0?"":A.download}`:"";return e={signedUrl:encodeURI(`${this.url}${e.signedURL}${d}`)},{data:e,error:null}}catch(l){if(Cg(l))return{data:null,error:l};throw l}})}createSignedUrls(I,C,A){return bg(this,void 0,void 0,function*(){try{const l=yield CI(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:C,paths:I},{headers:this.headers}),e=A!=null&&A.download?`&download=${A.download===!0?"":A.download}`:"";return{data:l.map(d=>Object.assign(Object.assign({},d),{signedUrl:d.signedURL?encodeURI(`${this.url}${d.signedURL}${e}`):null})),error:null}}catch(l){if(Cg(l))return{data:null,error:l};throw l}})}download(I,C){return bg(this,void 0,void 0,function*(){const l=typeof(C==null?void 0:C.transform)<"u"?"render/image/authenticated":"object",e=this.transformOptsToQueryString((C==null?void 0:C.transform)||{}),d=e?`?${e}`:"";try{const n=this._getFinalPath(I);return{data:yield(yield jl(this.fetch,`${this.url}/${l}/${n}${d}`,{headers:this.headers,noResolveJson:!0})).blob(),error:null}}catch(n){if(Cg(n))return{data:null,error:n};throw n}})}info(I){return bg(this,void 0,void 0,function*(){const C=this._getFinalPath(I);try{const A=yield jl(this.fetch,`${this.url}/object/info/${C}`,{headers:this.headers});return{data:cn(A),error:null}}catch(A){if(Cg(A))return{data:null,error:A};throw A}})}exists(I){return bg(this,void 0,void 0,function*(){const C=this._getFinalPath(I);try{return yield su(this.fetch,`${this.url}/object/${C}`,{headers:this.headers}),{data:!0,error:null}}catch(A){if(Cg(A)&&A instanceof nn){const l=A.originalError;if([400,404].includes(l==null?void 0:l.status))return{data:!1,error:A}}throw A}})}getPublicUrl(I,C){const A=this._getFinalPath(I),l=[],e=C!=null&&C.download?`download=${C.download===!0?"":C.download}`:"";e!==""&&l.push(e);const n=typeof(C==null?void 0:C.transform)<"u"?"render/image":"object",c=this.transformOptsToQueryString((C==null?void 0:C.transform)||{});c!==""&&l.push(c);let t=l.join("&");return t!==""&&(t=`?${t}`),{data:{publicUrl:encodeURI(`${this.url}/${n}/public/${A}${t}`)}}}remove(I){return bg(this,void 0,void 0,function*(){try{return{data:yield RZ(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:I},{headers:this.headers}),error:null}}catch(C){if(Cg(C))return{data:null,error:C};throw C}})}list(I,C,A){return bg(this,void 0,void 0,function*(){try{const l=Object.assign(Object.assign(Object.assign({},au),C),{prefix:I||""});return{data:yield CI(this.fetch,`${this.url}/object/list/${this.bucketId}`,l,{headers:this.headers},A),error:null}}catch(l){if(Cg(l))return{data:null,error:l};throw l}})}encodeMetadata(I){return JSON.stringify(I)}toBase64(I){return typeof Buffer<"u"?Buffer.from(I).toString("base64"):btoa(I)}_getFinalPath(I){return`${this.bucketId}/${I.replace(/^\/+/,"")}`}_removeEmptyFolders(I){return I.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(I){const C=[];return I.width&&C.push(`width=${I.width}`),I.height&&C.push(`height=${I.height}`),I.resize&&C.push(`resize=${I.resize}`),I.format&&C.push(`format=${I.format}`),I.quality&&C.push(`quality=${I.quality}`),C.join("&")}}const uu="2.10.4",mu={"X-Client-Info":`storage-js/${uu}`};var nC=globalThis&&globalThis.__awaiter||function(g,I,C,A){function l(e){return e instanceof C?e:new C(function(d){d(e)})}return new(C||(C=Promise))(function(e,d){function n(o){try{t(A.next(o))}catch(i){d(i)}}function c(o){try{t(A.throw(o))}catch(i){d(i)}}function t(o){o.done?e(o.value):l(o.value).then(n,c)}t((A=A.apply(g,I||[])).next())})};class bu{constructor(I,C={},A,l){const e=new URL(I);l!=null&&l.useNewHostname&&/supabase\.(co|in|red)$/.test(e.hostname)&&!e.hostname.includes("storage.supabase.")&&(e.hostname=e.hostname.replace("supabase.","storage.supabase.")),this.url=e.href,this.headers=Object.assign(Object.assign({},mu),C),this.fetch=JZ(A)}listBuckets(){return nC(this,void 0,void 0,function*(){try{return{data:yield jl(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(I){if(Cg(I))return{data:null,error:I};throw I}})}getBucket(I){return nC(this,void 0,void 0,function*(){try{return{data:yield jl(this.fetch,`${this.url}/bucket/${I}`,{headers:this.headers}),error:null}}catch(C){if(Cg(C))return{data:null,error:C};throw C}})}createBucket(I,C={public:!1}){return nC(this,void 0,void 0,function*(){try{return{data:yield CI(this.fetch,`${this.url}/bucket`,{id:I,name:I,type:C.type,public:C.public,file_size_limit:C.fileSizeLimit,allowed_mime_types:C.allowedMimeTypes},{headers:this.headers}),error:null}}catch(A){if(Cg(A))return{data:null,error:A};throw A}})}updateBucket(I,C){return nC(this,void 0,void 0,function*(){try{return{data:yield tn(this.fetch,`${this.url}/bucket/${I}`,{id:I,name:I,public:C.public,file_size_limit:C.fileSizeLimit,allowed_mime_types:C.allowedMimeTypes},{headers:this.headers}),error:null}}catch(A){if(Cg(A))return{data:null,error:A};throw A}})}emptyBucket(I){return nC(this,void 0,void 0,function*(){try{return{data:yield CI(this.fetch,`${this.url}/bucket/${I}/empty`,{},{headers:this.headers}),error:null}}catch(C){if(Cg(C))return{data:null,error:C};throw C}})}deleteBucket(I){return nC(this,void 0,void 0,function*(){try{return{data:yield RZ(this.fetch,`${this.url}/bucket/${I}`,{},{headers:this.headers}),error:null}}catch(C){if(Cg(C))return{data:null,error:C};throw C}})}}class ru extends bu{constructor(I,C={},A,l){super(I,C,A,l)}from(I){return new Gu(this.url,this.headers,I,this.fetch)}}const Bu="2.53.0";let eA="";typeof Deno<"u"?eA="deno":typeof document<"u"?eA="web":typeof navigator<"u"&&navigator.product==="ReactNative"?eA="react-native":eA="node";const hu={"X-Client-Info":`supabase-js-${eA}/${Bu}`},yu={headers:hu},Wu={schema:"public"},Vu={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},Su={};var Xu=globalThis&&globalThis.__awaiter||function(g,I,C,A){function l(e){return e instanceof C?e:new C(function(d){d(e)})}return new(C||(C=Promise))(function(e,d){function n(o){try{t(A.next(o))}catch(i){d(i)}}function c(o){try{t(A.throw(o))}catch(i){d(i)}}function t(o){o.done?e(o.value):l(o.value).then(n,c)}t((A=A.apply(g,I||[])).next())})};const Ju=g=>{let I;return g?I=g:typeof fetch>"u"?I=ZZ:I=fetch,(...C)=>I(...C)},Ru=()=>typeof Headers>"u"?sZ:Headers,pu=(g,I,C)=>{const A=Ju(C),l=Ru();return(e,d)=>Xu(void 0,void 0,void 0,function*(){var n;const c=(n=yield I())!==null&&n!==void 0?n:g;let t=new l(d==null?void 0:d.headers);return t.has("apikey")||t.set("apikey",g),t.has("Authorization")||t.set("Authorization",`Bearer ${c}`),A(e,Object.assign(Object.assign({},d),{headers:t}))})};var ku=globalThis&&globalThis.__awaiter||function(g,I,C,A){function l(e){return e instanceof C?e:new C(function(d){d(e)})}return new(C||(C=Promise))(function(e,d){function n(o){try{t(A.next(o))}catch(i){d(i)}}function c(o){try{t(A.throw(o))}catch(i){d(i)}}function t(o){o.done?e(o.value):l(o.value).then(n,c)}t((A=A.apply(g,I||[])).next())})};function Yu(g){return g.endsWith("/")?g:g+"/"}function Hu(g,I){var C,A;const{db:l,auth:e,realtime:d,global:n}=g,{db:c,auth:t,realtime:o,global:i}=I,a={db:Object.assign(Object.assign({},c),l),auth:Object.assign(Object.assign({},t),e),realtime:Object.assign(Object.assign({},o),d),storage:{},global:Object.assign(Object.assign(Object.assign({},i),n),{headers:Object.assign(Object.assign({},(C=i==null?void 0:i.headers)!==null&&C!==void 0?C:{}),(A=n==null?void 0:n.headers)!==null&&A!==void 0?A:{})}),accessToken:()=>ku(this,void 0,void 0,function*(){return""})};return g.accessToken?a.accessToken=g.accessToken:delete a.accessToken,a}const pZ="2.71.1",sC=30*1e3,on=3,dd=on*sC,vu="http://localhost:9999",Ku="supabase.auth.token",wu={"X-Client-Info":`gotrue-js/${pZ}`},Zn="X-Supabase-Api-Version",kZ={"2024-01-01":{timestamp:Date.parse("2024-01-01T00:00:00.0Z"),name:"2024-01-01"}},Fu=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i,Nu=10*60*1e3;class Gc extends Error{constructor(I,C,A){super(I),this.__isAuthError=!0,this.name="AuthError",this.status=C,this.code=A}}function p(g){return typeof g=="object"&&g!==null&&"__isAuthError"in g}class fu extends Gc{constructor(I,C,A){super(I,C,A),this.name="AuthApiError",this.status=C,this.code=A}}function zu(g){return p(g)&&g.name==="AuthApiError"}class YZ extends Gc{constructor(I,C){super(I),this.name="AuthUnknownError",this.originalError=C}}class FI extends Gc{constructor(I,C,A,l){super(I,A,l),this.name=C,this.status=A}}class GI extends FI{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}function Uu(g){return p(g)&&g.name==="AuthSessionMissingError"}class tl extends FI{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class ol extends FI{constructor(I){super(I,"AuthInvalidCredentialsError",400,void 0)}}class il extends FI{constructor(I,C=null){super(I,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=C}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}function Qu(g){return p(g)&&g.name==="AuthImplicitGrantRedirectError"}class ft extends FI{constructor(I,C=null){super(I,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=C}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class sn extends FI{constructor(I,C){super(I,"AuthRetryableFetchError",C,void 0)}}function nd(g){return p(g)&&g.name==="AuthRetryableFetchError"}class zt extends FI{constructor(I,C,A){super(I,"AuthWeakPasswordError",C,"weak_password"),this.reasons=A}}class an extends FI{constructor(I){super(I,"AuthInvalidJwtError",400,"invalid_jwt")}}const Pl="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),Ut=` 	
\r=`.split(""),Eu=(()=>{const g=new Array(128);for(let I=0;I<g.length;I+=1)g[I]=-1;for(let I=0;I<Ut.length;I+=1)g[Ut[I].charCodeAt(0)]=-2;for(let I=0;I<Pl.length;I+=1)g[Pl[I].charCodeAt(0)]=I;return g})();function Qt(g,I,C){if(g!==null)for(I.queue=I.queue<<8|g,I.queuedBits+=8;I.queuedBits>=6;){const A=I.queue>>I.queuedBits-6&63;C(Pl[A]),I.queuedBits-=6}else if(I.queuedBits>0)for(I.queue=I.queue<<6-I.queuedBits,I.queuedBits=6;I.queuedBits>=6;){const A=I.queue>>I.queuedBits-6&63;C(Pl[A]),I.queuedBits-=6}}function HZ(g,I,C){const A=Eu[g];if(A>-1)for(I.queue=I.queue<<6|A,I.queuedBits+=6;I.queuedBits>=8;)C(I.queue>>I.queuedBits-8&255),I.queuedBits-=8;else{if(A===-2)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(g)}"`)}}function Et(g){const I=[],C=d=>{I.push(String.fromCodePoint(d))},A={utf8seq:0,codepoint:0},l={queue:0,queuedBits:0},e=d=>{xu(d,A,C)};for(let d=0;d<g.length;d+=1)HZ(g.charCodeAt(d),l,e);return I.join("")}function Mu(g,I){if(g<=127){I(g);return}else if(g<=2047){I(192|g>>6),I(128|g&63);return}else if(g<=65535){I(224|g>>12),I(128|g>>6&63),I(128|g&63);return}else if(g<=1114111){I(240|g>>18),I(128|g>>12&63),I(128|g>>6&63),I(128|g&63);return}throw new Error(`Unrecognized Unicode codepoint: ${g.toString(16)}`)}function Lu(g,I){for(let C=0;C<g.length;C+=1){let A=g.charCodeAt(C);if(A>55295&&A<=56319){const l=(A-55296)*1024&65535;A=(g.charCodeAt(C+1)-56320&65535|l)+65536,C+=1}Mu(A,I)}}function xu(g,I,C){if(I.utf8seq===0){if(g<=127){C(g);return}for(let A=1;A<6;A+=1)if(!(g>>7-A&1)){I.utf8seq=A;break}if(I.utf8seq===2)I.codepoint=g&31;else if(I.utf8seq===3)I.codepoint=g&15;else if(I.utf8seq===4)I.codepoint=g&7;else throw new Error("Invalid UTF-8 sequence");I.utf8seq-=1}else if(I.utf8seq>0){if(g<=127)throw new Error("Invalid UTF-8 sequence");I.codepoint=I.codepoint<<6|g&63,I.utf8seq-=1,I.utf8seq===0&&C(I.codepoint)}}function Du(g){const I=[],C={queue:0,queuedBits:0},A=l=>{I.push(l)};for(let l=0;l<g.length;l+=1)HZ(g.charCodeAt(l),C,A);return new Uint8Array(I)}function Tu(g){const I=[];return Lu(g,C=>I.push(C)),new Uint8Array(I)}function ju(g){const I=[],C={queue:0,queuedBits:0},A=l=>{I.push(l)};return g.forEach(l=>Qt(l,C,A)),Qt(null,C,A),I.join("")}function Pu(g){return Math.round(Date.now()/1e3)+g}function Ou(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(g){const I=Math.random()*16|0;return(g=="x"?I:I&3|8).toString(16)})}const Ug=()=>typeof window<"u"&&typeof document<"u",UI={tested:!1,writable:!1},vZ=()=>{if(!Ug())return!1;try{if(typeof globalThis.localStorage!="object")return!1}catch{return!1}if(UI.tested)return UI.writable;const g=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(g,g),globalThis.localStorage.removeItem(g),UI.tested=!0,UI.writable=!0}catch{UI.tested=!0,UI.writable=!1}return UI.writable};function qu(g){const I={},C=new URL(g);if(C.hash&&C.hash[0]==="#")try{new URLSearchParams(C.hash.substring(1)).forEach((l,e)=>{I[e]=l})}catch{}return C.searchParams.forEach((A,l)=>{I[l]=A}),I}const KZ=g=>{let I;return g?I=g:typeof fetch>"u"?I=(...C)=>QA(()=>Promise.resolve().then(()=>LC),void 0).then(({default:A})=>A(...C)):I=fetch,(...C)=>I(...C)},_u=g=>typeof g=="object"&&g!==null&&"status"in g&&"ok"in g&&"json"in g&&typeof g.json=="function",aC=async(g,I,C)=>{await g.setItem(I,JSON.stringify(C))},QI=async(g,I)=>{const C=await g.getItem(I);if(!C)return null;try{return JSON.parse(C)}catch{return C}},aI=async(g,I)=>{await g.removeItem(I)};class be{constructor(){this.promise=new be.promiseConstructor((I,C)=>{this.resolve=I,this.reject=C})}}be.promiseConstructor=Promise;function cd(g){const I=g.split(".");if(I.length!==3)throw new an("Invalid JWT structure");for(let A=0;A<I.length;A++)if(!Fu.test(I[A]))throw new an("JWT not in base64url format");return{header:JSON.parse(Et(I[0])),payload:JSON.parse(Et(I[1])),signature:Du(I[2]),raw:{header:I[0],payload:I[1]}}}async function $u(g){return await new Promise(I=>{setTimeout(()=>I(null),g)})}function gm(g,I){return new Promise((A,l)=>{(async()=>{for(let e=0;e<1/0;e++)try{const d=await g(e);if(!I(e,null,d)){A(d);return}}catch(d){if(!I(e,d)){l(d);return}}})()})}function Im(g){return("0"+g.toString(16)).substr(-2)}function Cm(){const I=new Uint32Array(56);if(typeof crypto>"u"){const C="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",A=C.length;let l="";for(let e=0;e<56;e++)l+=C.charAt(Math.floor(Math.random()*A));return l}return crypto.getRandomValues(I),Array.from(I,Im).join("")}async function Am(g){const C=new TextEncoder().encode(g),A=await crypto.subtle.digest("SHA-256",C),l=new Uint8Array(A);return Array.from(l).map(e=>String.fromCharCode(e)).join("")}async function lm(g){if(!(typeof crypto<"u"&&typeof crypto.subtle<"u"&&typeof TextEncoder<"u"))return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),g;const C=await Am(g);return btoa(C).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}async function cC(g,I,C=!1){const A=Cm();let l=A;C&&(l+="/PASSWORD_RECOVERY"),await aC(g,`${I}-code-verifier`,l);const e=await lm(A);return[e,A===e?"plain":"s256"]}const em=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;function dm(g){const I=g.headers.get(Zn);if(!I||!I.match(em))return null;try{return new Date(`${I}T00:00:00.0Z`)}catch{return null}}function nm(g){if(!g)throw new Error("Missing exp claim");const I=Math.floor(Date.now()/1e3);if(g<=I)throw new Error("JWT has expired")}function cm(g){switch(g){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}const tm=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function tC(g){if(!tm.test(g))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}function td(){const g={};return new Proxy(g,{get:(I,C)=>{if(C==="__isUserNotAvailableProxy")return!0;if(typeof C=="symbol"){const A=C.toString();if(A==="Symbol(Symbol.toPrimitive)"||A==="Symbol(Symbol.toStringTag)"||A==="Symbol(util.inspect.custom)")return}throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Accessing the "${C}" property of the session object is not supported. Please use getUser() instead.`)},set:(I,C)=>{throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Setting the "${C}" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`)},deleteProperty:(I,C)=>{throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Deleting the "${C}" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`)}})}function Mt(g){return JSON.parse(JSON.stringify(g))}var om=globalThis&&globalThis.__rest||function(g,I){var C={};for(var A in g)Object.prototype.hasOwnProperty.call(g,A)&&I.indexOf(A)<0&&(C[A]=g[A]);if(g!=null&&typeof Object.getOwnPropertySymbols=="function")for(var l=0,A=Object.getOwnPropertySymbols(g);l<A.length;l++)I.indexOf(A[l])<0&&Object.prototype.propertyIsEnumerable.call(g,A[l])&&(C[A[l]]=g[A[l]]);return C};const LI=g=>g.msg||g.message||g.error_description||g.error||JSON.stringify(g),im=[502,503,504];async function Lt(g){var I;if(!_u(g))throw new sn(LI(g),0);if(im.includes(g.status))throw new sn(LI(g),g.status);let C;try{C=await g.json()}catch(e){throw new YZ(LI(e),e)}let A;const l=dm(g);if(l&&l.getTime()>=kZ["2024-01-01"].timestamp&&typeof C=="object"&&C&&typeof C.code=="string"?A=C.code:typeof C=="object"&&C&&typeof C.error_code=="string"&&(A=C.error_code),A){if(A==="weak_password")throw new zt(LI(C),g.status,((I=C.weak_password)===null||I===void 0?void 0:I.reasons)||[]);if(A==="session_not_found")throw new GI}else if(typeof C=="object"&&C&&typeof C.weak_password=="object"&&C.weak_password&&Array.isArray(C.weak_password.reasons)&&C.weak_password.reasons.length&&C.weak_password.reasons.reduce((e,d)=>e&&typeof d=="string",!0))throw new zt(LI(C),g.status,C.weak_password.reasons);throw new fu(LI(C),g.status||500,A)}const Zm=(g,I,C,A)=>{const l={method:g,headers:(I==null?void 0:I.headers)||{}};return g==="GET"?l:(l.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},I==null?void 0:I.headers),l.body=JSON.stringify(A),Object.assign(Object.assign({},l),C))};async function H(g,I,C,A){var l;const e=Object.assign({},A==null?void 0:A.headers);e[Zn]||(e[Zn]=kZ["2024-01-01"].name),A!=null&&A.jwt&&(e.Authorization=`Bearer ${A.jwt}`);const d=(l=A==null?void 0:A.query)!==null&&l!==void 0?l:{};A!=null&&A.redirectTo&&(d.redirect_to=A.redirectTo);const n=Object.keys(d).length?"?"+new URLSearchParams(d).toString():"",c=await sm(g,I,C+n,{headers:e,noResolveJson:A==null?void 0:A.noResolveJson},{},A==null?void 0:A.body);return A!=null&&A.xform?A==null?void 0:A.xform(c):{data:Object.assign({},c),error:null}}async function sm(g,I,C,A,l,e){const d=Zm(I,A,l,e);let n;try{n=await g(C,Object.assign({},d))}catch(c){throw console.error(c),new sn(LI(c),0)}if(n.ok||await Lt(n),A!=null&&A.noResolveJson)return n;try{return await n.json()}catch(c){await Lt(c)}}function $g(g){var I;let C=null;mm(g)&&(C=Object.assign({},g),g.expires_at||(C.expires_at=Pu(g.expires_in)));const A=(I=g.user)!==null&&I!==void 0?I:g;return{data:{session:C,user:A},error:null}}function xt(g){const I=$g(g);return!I.error&&g.weak_password&&typeof g.weak_password=="object"&&Array.isArray(g.weak_password.reasons)&&g.weak_password.reasons.length&&g.weak_password.message&&typeof g.weak_password.message=="string"&&g.weak_password.reasons.reduce((C,A)=>C&&typeof A=="string",!0)&&(I.data.weak_password=g.weak_password),I}function BI(g){var I;return{data:{user:(I=g.user)!==null&&I!==void 0?I:g},error:null}}function am(g){return{data:g,error:null}}function Gm(g){const{action_link:I,email_otp:C,hashed_token:A,redirect_to:l,verification_type:e}=g,d=om(g,["action_link","email_otp","hashed_token","redirect_to","verification_type"]),n={action_link:I,email_otp:C,hashed_token:A,redirect_to:l,verification_type:e},c=Object.assign({},d);return{data:{properties:n,user:c},error:null}}function um(g){return g}function mm(g){return g.access_token&&g.refresh_token&&g.expires_in}const od=["global","local","others"];var bm=globalThis&&globalThis.__rest||function(g,I){var C={};for(var A in g)Object.prototype.hasOwnProperty.call(g,A)&&I.indexOf(A)<0&&(C[A]=g[A]);if(g!=null&&typeof Object.getOwnPropertySymbols=="function")for(var l=0,A=Object.getOwnPropertySymbols(g);l<A.length;l++)I.indexOf(A[l])<0&&Object.prototype.propertyIsEnumerable.call(g,A[l])&&(C[A[l]]=g[A[l]]);return C};class rm{constructor({url:I="",headers:C={},fetch:A}){this.url=I,this.headers=C,this.fetch=KZ(A),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(I,C=od[0]){if(od.indexOf(C)<0)throw new Error(`@supabase/auth-js: Parameter scope must be one of ${od.join(", ")}`);try{return await H(this.fetch,"POST",`${this.url}/logout?scope=${C}`,{headers:this.headers,jwt:I,noResolveJson:!0}),{data:null,error:null}}catch(A){if(p(A))return{data:null,error:A};throw A}}async inviteUserByEmail(I,C={}){try{return await H(this.fetch,"POST",`${this.url}/invite`,{body:{email:I,data:C.data},headers:this.headers,redirectTo:C.redirectTo,xform:BI})}catch(A){if(p(A))return{data:{user:null},error:A};throw A}}async generateLink(I){try{const{options:C}=I,A=bm(I,["options"]),l=Object.assign(Object.assign({},A),C);return"newEmail"in A&&(l.new_email=A==null?void 0:A.newEmail,delete l.newEmail),await H(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:l,headers:this.headers,xform:Gm,redirectTo:C==null?void 0:C.redirectTo})}catch(C){if(p(C))return{data:{properties:null,user:null},error:C};throw C}}async createUser(I){try{return await H(this.fetch,"POST",`${this.url}/admin/users`,{body:I,headers:this.headers,xform:BI})}catch(C){if(p(C))return{data:{user:null},error:C};throw C}}async listUsers(I){var C,A,l,e,d,n,c;try{const t={nextPage:null,lastPage:0,total:0},o=await H(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:(A=(C=I==null?void 0:I.page)===null||C===void 0?void 0:C.toString())!==null&&A!==void 0?A:"",per_page:(e=(l=I==null?void 0:I.perPage)===null||l===void 0?void 0:l.toString())!==null&&e!==void 0?e:""},xform:um});if(o.error)throw o.error;const i=await o.json(),a=(d=o.headers.get("x-total-count"))!==null&&d!==void 0?d:0,u=(c=(n=o.headers.get("link"))===null||n===void 0?void 0:n.split(","))!==null&&c!==void 0?c:[];return u.length>0&&(u.forEach(b=>{const r=parseInt(b.split(";")[0].split("=")[1].substring(0,1)),V=JSON.parse(b.split(";")[1].split("=")[1]);t[`${V}Page`]=r}),t.total=parseInt(a)),{data:Object.assign(Object.assign({},i),t),error:null}}catch(t){if(p(t))return{data:{users:[]},error:t};throw t}}async getUserById(I){tC(I);try{return await H(this.fetch,"GET",`${this.url}/admin/users/${I}`,{headers:this.headers,xform:BI})}catch(C){if(p(C))return{data:{user:null},error:C};throw C}}async updateUserById(I,C){tC(I);try{return await H(this.fetch,"PUT",`${this.url}/admin/users/${I}`,{body:C,headers:this.headers,xform:BI})}catch(A){if(p(A))return{data:{user:null},error:A};throw A}}async deleteUser(I,C=!1){tC(I);try{return await H(this.fetch,"DELETE",`${this.url}/admin/users/${I}`,{headers:this.headers,body:{should_soft_delete:C},xform:BI})}catch(A){if(p(A))return{data:{user:null},error:A};throw A}}async _listFactors(I){tC(I.userId);try{const{data:C,error:A}=await H(this.fetch,"GET",`${this.url}/admin/users/${I.userId}/factors`,{headers:this.headers,xform:l=>({data:{factors:l},error:null})});return{data:C,error:A}}catch(C){if(p(C))return{data:null,error:C};throw C}}async _deleteFactor(I){tC(I.userId),tC(I.id);try{return{data:await H(this.fetch,"DELETE",`${this.url}/admin/users/${I.userId}/factors/${I.id}`,{headers:this.headers}),error:null}}catch(C){if(p(C))return{data:null,error:C};throw C}}}function Dt(g={}){return{getItem:I=>g[I]||null,setItem:(I,C)=>{g[I]=C},removeItem:I=>{delete g[I]}}}function Bm(){if(typeof globalThis!="object")try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch{typeof self<"u"&&(self.globalThis=self)}}const oC={debug:!!(globalThis&&vZ()&&globalThis.localStorage&&globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug")==="true")};class wZ extends Error{constructor(I){super(I),this.isAcquireTimeout=!0}}class hm extends wZ{}async function ym(g,I,C){oC.debug&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",g,I);const A=new globalThis.AbortController;return I>0&&setTimeout(()=>{A.abort(),oC.debug&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",g)},I),await Promise.resolve().then(()=>globalThis.navigator.locks.request(g,I===0?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:A.signal},async l=>{if(l){oC.debug&&console.log("@supabase/gotrue-js: navigatorLock: acquired",g,l.name);try{return await C()}finally{oC.debug&&console.log("@supabase/gotrue-js: navigatorLock: released",g,l.name)}}else{if(I===0)throw oC.debug&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",g),new hm(`Acquiring an exclusive Navigator LockManager lock "${g}" immediately failed`);if(oC.debug)try{const e=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(e,null,"  "))}catch(e){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",e)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await C()}}))}Bm();const Wm={url:vu,storageKey:Ku,autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:wu,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function Tt(g,I,C){return await C()}const iC={};class KA{constructor(I){var C,A;this.userStorage=null,this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=KA.nextInstanceID,KA.nextInstanceID+=1,this.instanceID>0&&Ug()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const l=Object.assign(Object.assign({},Wm),I);if(this.logDebugMessages=!!l.debug,typeof l.debug=="function"&&(this.logger=l.debug),this.persistSession=l.persistSession,this.storageKey=l.storageKey,this.autoRefreshToken=l.autoRefreshToken,this.admin=new rm({url:l.url,headers:l.headers,fetch:l.fetch}),this.url=l.url,this.headers=l.headers,this.fetch=KZ(l.fetch),this.lock=l.lock||Tt,this.detectSessionInUrl=l.detectSessionInUrl,this.flowType=l.flowType,this.hasCustomAuthorizationHeader=l.hasCustomAuthorizationHeader,l.lock?this.lock=l.lock:Ug()&&(!((C=globalThis==null?void 0:globalThis.navigator)===null||C===void 0)&&C.locks)?this.lock=ym:this.lock=Tt,this.jwks||(this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER),this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?(l.storage?this.storage=l.storage:vZ()?this.storage=globalThis.localStorage:(this.memoryStorage={},this.storage=Dt(this.memoryStorage)),l.userStorage&&(this.userStorage=l.userStorage)):(this.memoryStorage={},this.storage=Dt(this.memoryStorage)),Ug()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(e){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",e)}(A=this.broadcastChannel)===null||A===void 0||A.addEventListener("message",async e=>{this._debug("received broadcast notification from other tab or client",e),await this._notifyAllSubscribers(e.data.event,e.data.session,!1)})}this.initialize()}get jwks(){var I,C;return(C=(I=iC[this.storageKey])===null||I===void 0?void 0:I.jwks)!==null&&C!==void 0?C:{keys:[]}}set jwks(I){iC[this.storageKey]=Object.assign(Object.assign({},iC[this.storageKey]),{jwks:I})}get jwks_cached_at(){var I,C;return(C=(I=iC[this.storageKey])===null||I===void 0?void 0:I.cachedAt)!==null&&C!==void 0?C:Number.MIN_SAFE_INTEGER}set jwks_cached_at(I){iC[this.storageKey]=Object.assign(Object.assign({},iC[this.storageKey]),{cachedAt:I})}_debug(...I){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${pZ}) ${new Date().toISOString()}`,...I),this}async initialize(){return this.initializePromise?await this.initializePromise:(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))(),await this.initializePromise)}async _initialize(){var I;try{const C=qu(window.location.href);let A="none";if(this._isImplicitGrantCallback(C)?A="implicit":await this._isPKCECallback(C)&&(A="pkce"),Ug()&&this.detectSessionInUrl&&A!=="none"){const{data:l,error:e}=await this._getSessionFromURL(C,A);if(e){if(this._debug("#_initialize()","error detecting session from URL",e),Qu(e)){const c=(I=e.details)===null||I===void 0?void 0:I.code;if(c==="identity_already_exists"||c==="identity_not_found"||c==="single_identity_not_deletable")return{error:e}}return await this._removeSession(),{error:e}}const{session:d,redirectType:n}=l;return this._debug("#_initialize()","detected session in URL",d,"redirect type",n),await this._saveSession(d),setTimeout(async()=>{n==="recovery"?await this._notifyAllSubscribers("PASSWORD_RECOVERY",d):await this._notifyAllSubscribers("SIGNED_IN",d)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(C){return p(C)?{error:C}:{error:new YZ("Unexpected error during initialization",C)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(I){var C,A,l;try{const e=await H(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:(A=(C=I==null?void 0:I.options)===null||C===void 0?void 0:C.data)!==null&&A!==void 0?A:{},gotrue_meta_security:{captcha_token:(l=I==null?void 0:I.options)===null||l===void 0?void 0:l.captchaToken}},xform:$g}),{data:d,error:n}=e;if(n||!d)return{data:{user:null,session:null},error:n};const c=d.session,t=d.user;return d.session&&(await this._saveSession(d.session),await this._notifyAllSubscribers("SIGNED_IN",c)),{data:{user:t,session:c},error:null}}catch(e){if(p(e))return{data:{user:null,session:null},error:e};throw e}}async signUp(I){var C,A,l;try{let e;if("email"in I){const{email:o,password:i,options:a}=I;let u=null,b=null;this.flowType==="pkce"&&([u,b]=await cC(this.storage,this.storageKey)),e=await H(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:a==null?void 0:a.emailRedirectTo,body:{email:o,password:i,data:(C=a==null?void 0:a.data)!==null&&C!==void 0?C:{},gotrue_meta_security:{captcha_token:a==null?void 0:a.captchaToken},code_challenge:u,code_challenge_method:b},xform:$g})}else if("phone"in I){const{phone:o,password:i,options:a}=I;e=await H(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:o,password:i,data:(A=a==null?void 0:a.data)!==null&&A!==void 0?A:{},channel:(l=a==null?void 0:a.channel)!==null&&l!==void 0?l:"sms",gotrue_meta_security:{captcha_token:a==null?void 0:a.captchaToken}},xform:$g})}else throw new ol("You must provide either an email or phone number and a password");const{data:d,error:n}=e;if(n||!d)return{data:{user:null,session:null},error:n};const c=d.session,t=d.user;return d.session&&(await this._saveSession(d.session),await this._notifyAllSubscribers("SIGNED_IN",c)),{data:{user:t,session:c},error:null}}catch(e){if(p(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithPassword(I){try{let C;if("email"in I){const{email:e,password:d,options:n}=I;C=await H(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:e,password:d,gotrue_meta_security:{captcha_token:n==null?void 0:n.captchaToken}},xform:xt})}else if("phone"in I){const{phone:e,password:d,options:n}=I;C=await H(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:e,password:d,gotrue_meta_security:{captcha_token:n==null?void 0:n.captchaToken}},xform:xt})}else throw new ol("You must provide either an email or phone number and a password");const{data:A,error:l}=C;return l?{data:{user:null,session:null},error:l}:!A||!A.session||!A.user?{data:{user:null,session:null},error:new tl}:(A.session&&(await this._saveSession(A.session),await this._notifyAllSubscribers("SIGNED_IN",A.session)),{data:Object.assign({user:A.user,session:A.session},A.weak_password?{weakPassword:A.weak_password}:null),error:l})}catch(C){if(p(C))return{data:{user:null,session:null},error:C};throw C}}async signInWithOAuth(I){var C,A,l,e;return await this._handleProviderSignIn(I.provider,{redirectTo:(C=I.options)===null||C===void 0?void 0:C.redirectTo,scopes:(A=I.options)===null||A===void 0?void 0:A.scopes,queryParams:(l=I.options)===null||l===void 0?void 0:l.queryParams,skipBrowserRedirect:(e=I.options)===null||e===void 0?void 0:e.skipBrowserRedirect})}async exchangeCodeForSession(I){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(I))}async signInWithWeb3(I){const{chain:C}=I;if(C==="solana")return await this.signInWithSolana(I);throw new Error(`@supabase/auth-js: Unsupported chain "${C}"`)}async signInWithSolana(I){var C,A,l,e,d,n,c,t,o,i,a,u;let b,r;if("message"in I)b=I.message,r=I.signature;else{const{chain:V,wallet:G,statement:Z,options:s}=I;let m;if(Ug())if(typeof G=="object")m=G;else{const W=window;if("solana"in W&&typeof W.solana=="object"&&("signIn"in W.solana&&typeof W.solana.signIn=="function"||"signMessage"in W.solana&&typeof W.solana.signMessage=="function"))m=W.solana;else throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.")}else{if(typeof G!="object"||!(s!=null&&s.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");m=G}const h=new URL((C=s==null?void 0:s.url)!==null&&C!==void 0?C:window.location.href);if("signIn"in m&&m.signIn){const W=await m.signIn(Object.assign(Object.assign(Object.assign({issuedAt:new Date().toISOString()},s==null?void 0:s.signInWithSolana),{version:"1",domain:h.host,uri:h.href}),Z?{statement:Z}:null));let y;if(Array.isArray(W)&&W[0]&&typeof W[0]=="object")y=W[0];else if(W&&typeof W=="object"&&"signedMessage"in W&&"signature"in W)y=W;else throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");if("signedMessage"in y&&"signature"in y&&(typeof y.signedMessage=="string"||y.signedMessage instanceof Uint8Array)&&y.signature instanceof Uint8Array)b=typeof y.signedMessage=="string"?y.signedMessage:new TextDecoder().decode(y.signedMessage),r=y.signature;else throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields")}else{if(!("signMessage"in m)||typeof m.signMessage!="function"||!("publicKey"in m)||typeof m!="object"||!m.publicKey||!("toBase58"in m.publicKey)||typeof m.publicKey.toBase58!="function")throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");b=[`${h.host} wants you to sign in with your Solana account:`,m.publicKey.toBase58(),...Z?["",Z,""]:[""],"Version: 1",`URI: ${h.href}`,`Issued At: ${(l=(A=s==null?void 0:s.signInWithSolana)===null||A===void 0?void 0:A.issuedAt)!==null&&l!==void 0?l:new Date().toISOString()}`,...!((e=s==null?void 0:s.signInWithSolana)===null||e===void 0)&&e.notBefore?[`Not Before: ${s.signInWithSolana.notBefore}`]:[],...!((d=s==null?void 0:s.signInWithSolana)===null||d===void 0)&&d.expirationTime?[`Expiration Time: ${s.signInWithSolana.expirationTime}`]:[],...!((n=s==null?void 0:s.signInWithSolana)===null||n===void 0)&&n.chainId?[`Chain ID: ${s.signInWithSolana.chainId}`]:[],...!((c=s==null?void 0:s.signInWithSolana)===null||c===void 0)&&c.nonce?[`Nonce: ${s.signInWithSolana.nonce}`]:[],...!((t=s==null?void 0:s.signInWithSolana)===null||t===void 0)&&t.requestId?[`Request ID: ${s.signInWithSolana.requestId}`]:[],...!((i=(o=s==null?void 0:s.signInWithSolana)===null||o===void 0?void 0:o.resources)===null||i===void 0)&&i.length?["Resources",...s.signInWithSolana.resources.map(y=>`- ${y}`)]:[]].join(`
`);const W=await m.signMessage(new TextEncoder().encode(b),"utf8");if(!W||!(W instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");r=W}}try{const{data:V,error:G}=await H(this.fetch,"POST",`${this.url}/token?grant_type=web3`,{headers:this.headers,body:Object.assign({chain:"solana",message:b,signature:ju(r)},!((a=I.options)===null||a===void 0)&&a.captchaToken?{gotrue_meta_security:{captcha_token:(u=I.options)===null||u===void 0?void 0:u.captchaToken}}:null),xform:$g});if(G)throw G;return!V||!V.session||!V.user?{data:{user:null,session:null},error:new tl}:(V.session&&(await this._saveSession(V.session),await this._notifyAllSubscribers("SIGNED_IN",V.session)),{data:Object.assign({},V),error:G})}catch(V){if(p(V))return{data:{user:null,session:null},error:V};throw V}}async _exchangeCodeForSession(I){const C=await QI(this.storage,`${this.storageKey}-code-verifier`),[A,l]=(C??"").split("/");try{const{data:e,error:d}=await H(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:I,code_verifier:A},xform:$g});if(await aI(this.storage,`${this.storageKey}-code-verifier`),d)throw d;return!e||!e.session||!e.user?{data:{user:null,session:null,redirectType:null},error:new tl}:(e.session&&(await this._saveSession(e.session),await this._notifyAllSubscribers("SIGNED_IN",e.session)),{data:Object.assign(Object.assign({},e),{redirectType:l??null}),error:d})}catch(e){if(p(e))return{data:{user:null,session:null,redirectType:null},error:e};throw e}}async signInWithIdToken(I){try{const{options:C,provider:A,token:l,access_token:e,nonce:d}=I,n=await H(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:A,id_token:l,access_token:e,nonce:d,gotrue_meta_security:{captcha_token:C==null?void 0:C.captchaToken}},xform:$g}),{data:c,error:t}=n;return t?{data:{user:null,session:null},error:t}:!c||!c.session||!c.user?{data:{user:null,session:null},error:new tl}:(c.session&&(await this._saveSession(c.session),await this._notifyAllSubscribers("SIGNED_IN",c.session)),{data:c,error:t})}catch(C){if(p(C))return{data:{user:null,session:null},error:C};throw C}}async signInWithOtp(I){var C,A,l,e,d;try{if("email"in I){const{email:n,options:c}=I;let t=null,o=null;this.flowType==="pkce"&&([t,o]=await cC(this.storage,this.storageKey));const{error:i}=await H(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:n,data:(C=c==null?void 0:c.data)!==null&&C!==void 0?C:{},create_user:(A=c==null?void 0:c.shouldCreateUser)!==null&&A!==void 0?A:!0,gotrue_meta_security:{captcha_token:c==null?void 0:c.captchaToken},code_challenge:t,code_challenge_method:o},redirectTo:c==null?void 0:c.emailRedirectTo});return{data:{user:null,session:null},error:i}}if("phone"in I){const{phone:n,options:c}=I,{data:t,error:o}=await H(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:n,data:(l=c==null?void 0:c.data)!==null&&l!==void 0?l:{},create_user:(e=c==null?void 0:c.shouldCreateUser)!==null&&e!==void 0?e:!0,gotrue_meta_security:{captcha_token:c==null?void 0:c.captchaToken},channel:(d=c==null?void 0:c.channel)!==null&&d!==void 0?d:"sms"}});return{data:{user:null,session:null,messageId:t==null?void 0:t.message_id},error:o}}throw new ol("You must provide either an email or phone number.")}catch(n){if(p(n))return{data:{user:null,session:null},error:n};throw n}}async verifyOtp(I){var C,A;try{let l,e;"options"in I&&(l=(C=I.options)===null||C===void 0?void 0:C.redirectTo,e=(A=I.options)===null||A===void 0?void 0:A.captchaToken);const{data:d,error:n}=await H(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},I),{gotrue_meta_security:{captcha_token:e}}),redirectTo:l,xform:$g});if(n)throw n;if(!d)throw new Error("An error occurred on token verification.");const c=d.session,t=d.user;return c!=null&&c.access_token&&(await this._saveSession(c),await this._notifyAllSubscribers(I.type=="recovery"?"PASSWORD_RECOVERY":"SIGNED_IN",c)),{data:{user:t,session:c},error:null}}catch(l){if(p(l))return{data:{user:null,session:null},error:l};throw l}}async signInWithSSO(I){var C,A,l;try{let e=null,d=null;return this.flowType==="pkce"&&([e,d]=await cC(this.storage,this.storageKey)),await H(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in I?{provider_id:I.providerId}:null),"domain"in I?{domain:I.domain}:null),{redirect_to:(A=(C=I.options)===null||C===void 0?void 0:C.redirectTo)!==null&&A!==void 0?A:void 0}),!((l=I==null?void 0:I.options)===null||l===void 0)&&l.captchaToken?{gotrue_meta_security:{captcha_token:I.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:e,code_challenge_method:d}),headers:this.headers,xform:am})}catch(e){if(p(e))return{data:null,error:e};throw e}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async I=>{const{data:{session:C},error:A}=I;if(A)throw A;if(!C)throw new GI;const{error:l}=await H(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:C.access_token});return{data:{user:null,session:null},error:l}})}catch(I){if(p(I))return{data:{user:null,session:null},error:I};throw I}}async resend(I){try{const C=`${this.url}/resend`;if("email"in I){const{email:A,type:l,options:e}=I,{error:d}=await H(this.fetch,"POST",C,{headers:this.headers,body:{email:A,type:l,gotrue_meta_security:{captcha_token:e==null?void 0:e.captchaToken}},redirectTo:e==null?void 0:e.emailRedirectTo});return{data:{user:null,session:null},error:d}}else if("phone"in I){const{phone:A,type:l,options:e}=I,{data:d,error:n}=await H(this.fetch,"POST",C,{headers:this.headers,body:{phone:A,type:l,gotrue_meta_security:{captcha_token:e==null?void 0:e.captchaToken}}});return{data:{user:null,session:null,messageId:d==null?void 0:d.message_id},error:n}}throw new ol("You must provide either an email or phone number and a type")}catch(C){if(p(C))return{data:{user:null,session:null},error:C};throw C}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async C=>C))}async _acquireLock(I,C){this._debug("#_acquireLock","begin",I);try{if(this.lockAcquired){const A=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),l=(async()=>(await A,await C()))();return this.pendingInLock.push((async()=>{try{await l}catch{}})()),l}return await this.lock(`lock:${this.storageKey}`,I,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const A=C();for(this.pendingInLock.push((async()=>{try{await A}catch{}})()),await A;this.pendingInLock.length;){const l=[...this.pendingInLock];await Promise.all(l),this.pendingInLock.splice(0,l.length)}return await A}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(I){this._debug("#_useSession","begin");try{const C=await this.__loadSession();return await I(C)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",new Error().stack);try{let I=null;const C=await QI(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",C),C!==null&&(this._isValidSession(C)?I=C:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!I)return{data:{session:null},error:null};const A=I.expires_at?I.expires_at*1e3-Date.now()<dd:!1;if(this._debug("#__loadSession()",`session has${A?"":" not"} expired`,"expires_at",I.expires_at),!A){if(this.userStorage){const d=await QI(this.userStorage,this.storageKey+"-user");d!=null&&d.user?I.user=d.user:I.user=td()}if(this.storage.isServer&&I.user){let d=this.suppressGetSessionWarning;I=new Proxy(I,{get:(c,t,o)=>(!d&&t==="user"&&(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),d=!0,this.suppressGetSessionWarning=!0),Reflect.get(c,t,o))})}return{data:{session:I},error:null}}const{session:l,error:e}=await this._callRefreshToken(I.refresh_token);return e?{data:{session:null},error:e}:{data:{session:l},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(I){return I?await this._getUser(I):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(I){try{return I?await H(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:I,xform:BI}):await this._useSession(async C=>{var A,l,e;const{data:d,error:n}=C;if(n)throw n;return!(!((A=d.session)===null||A===void 0)&&A.access_token)&&!this.hasCustomAuthorizationHeader?{data:{user:null},error:new GI}:await H(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:(e=(l=d.session)===null||l===void 0?void 0:l.access_token)!==null&&e!==void 0?e:void 0,xform:BI})})}catch(C){if(p(C))return Uu(C)&&(await this._removeSession(),await aI(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:C};throw C}}async updateUser(I,C={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(I,C))}async _updateUser(I,C={}){try{return await this._useSession(async A=>{const{data:l,error:e}=A;if(e)throw e;if(!l.session)throw new GI;const d=l.session;let n=null,c=null;this.flowType==="pkce"&&I.email!=null&&([n,c]=await cC(this.storage,this.storageKey));const{data:t,error:o}=await H(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:C==null?void 0:C.emailRedirectTo,body:Object.assign(Object.assign({},I),{code_challenge:n,code_challenge_method:c}),jwt:d.access_token,xform:BI});if(o)throw o;return d.user=t.user,await this._saveSession(d),await this._notifyAllSubscribers("USER_UPDATED",d),{data:{user:d.user},error:null}})}catch(A){if(p(A))return{data:{user:null},error:A};throw A}}async setSession(I){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(I))}async _setSession(I){try{if(!I.access_token||!I.refresh_token)throw new GI;const C=Date.now()/1e3;let A=C,l=!0,e=null;const{payload:d}=cd(I.access_token);if(d.exp&&(A=d.exp,l=A<=C),l){const{session:n,error:c}=await this._callRefreshToken(I.refresh_token);if(c)return{data:{user:null,session:null},error:c};if(!n)return{data:{user:null,session:null},error:null};e=n}else{const{data:n,error:c}=await this._getUser(I.access_token);if(c)throw c;e={access_token:I.access_token,refresh_token:I.refresh_token,user:n.user,token_type:"bearer",expires_in:A-C,expires_at:A},await this._saveSession(e),await this._notifyAllSubscribers("SIGNED_IN",e)}return{data:{user:e.user,session:e},error:null}}catch(C){if(p(C))return{data:{session:null,user:null},error:C};throw C}}async refreshSession(I){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(I))}async _refreshSession(I){try{return await this._useSession(async C=>{var A;if(!I){const{data:d,error:n}=C;if(n)throw n;I=(A=d.session)!==null&&A!==void 0?A:void 0}if(!(I!=null&&I.refresh_token))throw new GI;const{session:l,error:e}=await this._callRefreshToken(I.refresh_token);return e?{data:{user:null,session:null},error:e}:l?{data:{user:l.user,session:l},error:null}:{data:{user:null,session:null},error:null}})}catch(C){if(p(C))return{data:{user:null,session:null},error:C};throw C}}async _getSessionFromURL(I,C){try{if(!Ug())throw new il("No browser detected.");if(I.error||I.error_description||I.error_code)throw new il(I.error_description||"Error in URL with unspecified error_description",{error:I.error||"unspecified_error",code:I.error_code||"unspecified_code"});switch(C){case"implicit":if(this.flowType==="pkce")throw new ft("Not a valid PKCE flow url.");break;case"pkce":if(this.flowType==="implicit")throw new il("Not a valid implicit grant flow url.");break;default:}if(C==="pkce"){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!I.code)throw new ft("No code detected.");const{data:Z,error:s}=await this._exchangeCodeForSession(I.code);if(s)throw s;const m=new URL(window.location.href);return m.searchParams.delete("code"),window.history.replaceState(window.history.state,"",m.toString()),{data:{session:Z.session,redirectType:null},error:null}}const{provider_token:A,provider_refresh_token:l,access_token:e,refresh_token:d,expires_in:n,expires_at:c,token_type:t}=I;if(!e||!n||!d||!t)throw new il("No session defined in URL");const o=Math.round(Date.now()/1e3),i=parseInt(n);let a=o+i;c&&(a=parseInt(c));const u=a-o;u*1e3<=sC&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${u}s, should have been closer to ${i}s`);const b=a-i;o-b>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",b,a,o):o-b<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",b,a,o);const{data:r,error:V}=await this._getUser(e);if(V)throw V;const G={provider_token:A,provider_refresh_token:l,access_token:e,expires_in:i,expires_at:a,refresh_token:d,token_type:t,user:r.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:G,redirectType:I.type},error:null}}catch(A){if(p(A))return{data:{session:null,redirectType:null},error:A};throw A}}_isImplicitGrantCallback(I){return!!(I.access_token||I.error_description)}async _isPKCECallback(I){const C=await QI(this.storage,`${this.storageKey}-code-verifier`);return!!(I.code&&C)}async signOut(I={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(I))}async _signOut({scope:I}={scope:"global"}){return await this._useSession(async C=>{var A;const{data:l,error:e}=C;if(e)return{error:e};const d=(A=l.session)===null||A===void 0?void 0:A.access_token;if(d){const{error:n}=await this.admin.signOut(d,I);if(n&&!(zu(n)&&(n.status===404||n.status===401||n.status===403)))return{error:n}}return I!=="others"&&(await this._removeSession(),await aI(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(I){const C=Ou(),A={id:C,callback:I,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",C),this.stateChangeEmitters.delete(C)}};return this._debug("#onAuthStateChange()","registered callback with id",C),this.stateChangeEmitters.set(C,A),(async()=>(await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(C)})))(),{data:{subscription:A}}}async _emitInitialSession(I){return await this._useSession(async C=>{var A,l;try{const{data:{session:e},error:d}=C;if(d)throw d;await((A=this.stateChangeEmitters.get(I))===null||A===void 0?void 0:A.callback("INITIAL_SESSION",e)),this._debug("INITIAL_SESSION","callback id",I,"session",e)}catch(e){await((l=this.stateChangeEmitters.get(I))===null||l===void 0?void 0:l.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",I,"error",e),console.error(e)}})}async resetPasswordForEmail(I,C={}){let A=null,l=null;this.flowType==="pkce"&&([A,l]=await cC(this.storage,this.storageKey,!0));try{return await H(this.fetch,"POST",`${this.url}/recover`,{body:{email:I,code_challenge:A,code_challenge_method:l,gotrue_meta_security:{captcha_token:C.captchaToken}},headers:this.headers,redirectTo:C.redirectTo})}catch(e){if(p(e))return{data:null,error:e};throw e}}async getUserIdentities(){var I;try{const{data:C,error:A}=await this.getUser();if(A)throw A;return{data:{identities:(I=C.user.identities)!==null&&I!==void 0?I:[]},error:null}}catch(C){if(p(C))return{data:null,error:C};throw C}}async linkIdentity(I){var C;try{const{data:A,error:l}=await this._useSession(async e=>{var d,n,c,t,o;const{data:i,error:a}=e;if(a)throw a;const u=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,I.provider,{redirectTo:(d=I.options)===null||d===void 0?void 0:d.redirectTo,scopes:(n=I.options)===null||n===void 0?void 0:n.scopes,queryParams:(c=I.options)===null||c===void 0?void 0:c.queryParams,skipBrowserRedirect:!0});return await H(this.fetch,"GET",u,{headers:this.headers,jwt:(o=(t=i.session)===null||t===void 0?void 0:t.access_token)!==null&&o!==void 0?o:void 0})});if(l)throw l;return Ug()&&!(!((C=I.options)===null||C===void 0)&&C.skipBrowserRedirect)&&window.location.assign(A==null?void 0:A.url),{data:{provider:I.provider,url:A==null?void 0:A.url},error:null}}catch(A){if(p(A))return{data:{provider:I.provider,url:null},error:A};throw A}}async unlinkIdentity(I){try{return await this._useSession(async C=>{var A,l;const{data:e,error:d}=C;if(d)throw d;return await H(this.fetch,"DELETE",`${this.url}/user/identities/${I.identity_id}`,{headers:this.headers,jwt:(l=(A=e.session)===null||A===void 0?void 0:A.access_token)!==null&&l!==void 0?l:void 0})})}catch(C){if(p(C))return{data:null,error:C};throw C}}async _refreshAccessToken(I){const C=`#_refreshAccessToken(${I.substring(0,5)}...)`;this._debug(C,"begin");try{const A=Date.now();return await gm(async l=>(l>0&&await $u(200*Math.pow(2,l-1)),this._debug(C,"refreshing attempt",l),await H(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:I},headers:this.headers,xform:$g})),(l,e)=>{const d=200*Math.pow(2,l);return e&&nd(e)&&Date.now()+d-A<sC})}catch(A){if(this._debug(C,"error",A),p(A))return{data:{session:null,user:null},error:A};throw A}finally{this._debug(C,"end")}}_isValidSession(I){return typeof I=="object"&&I!==null&&"access_token"in I&&"refresh_token"in I&&"expires_at"in I}async _handleProviderSignIn(I,C){const A=await this._getUrlForProvider(`${this.url}/authorize`,I,{redirectTo:C.redirectTo,scopes:C.scopes,queryParams:C.queryParams});return this._debug("#_handleProviderSignIn()","provider",I,"options",C,"url",A),Ug()&&!C.skipBrowserRedirect&&window.location.assign(A),{data:{provider:I,url:A},error:null}}async _recoverAndRefresh(){var I,C;const A="#_recoverAndRefresh()";this._debug(A,"begin");try{const l=await QI(this.storage,this.storageKey);if(l&&this.userStorage){let d=await QI(this.userStorage,this.storageKey+"-user");!this.storage.isServer&&Object.is(this.storage,this.userStorage)&&!d&&(d={user:l.user},await aC(this.userStorage,this.storageKey+"-user",d)),l.user=(I=d==null?void 0:d.user)!==null&&I!==void 0?I:td()}else if(l&&!l.user&&!l.user){const d=await QI(this.storage,this.storageKey+"-user");d&&(d!=null&&d.user)?(l.user=d.user,await aI(this.storage,this.storageKey+"-user"),await aC(this.storage,this.storageKey,l)):l.user=td()}if(this._debug(A,"session from storage",l),!this._isValidSession(l)){this._debug(A,"session is not valid"),l!==null&&await this._removeSession();return}const e=((C=l.expires_at)!==null&&C!==void 0?C:1/0)*1e3-Date.now()<dd;if(this._debug(A,`session has${e?"":" not"} expired with margin of ${dd}s`),e){if(this.autoRefreshToken&&l.refresh_token){const{error:d}=await this._callRefreshToken(l.refresh_token);d&&(console.error(d),nd(d)||(this._debug(A,"refresh failed with a non-retryable error, removing the session",d),await this._removeSession()))}}else if(l.user&&l.user.__isUserNotAvailableProxy===!0)try{const{data:d,error:n}=await this._getUser(l.access_token);!n&&(d!=null&&d.user)?(l.user=d.user,await this._saveSession(l),await this._notifyAllSubscribers("SIGNED_IN",l)):this._debug(A,"could not get user data, skipping SIGNED_IN notification")}catch(d){console.error("Error getting user data:",d),this._debug(A,"error getting user data, skipping SIGNED_IN notification",d)}else await this._notifyAllSubscribers("SIGNED_IN",l)}catch(l){this._debug(A,"error",l),console.error(l);return}finally{this._debug(A,"end")}}async _callRefreshToken(I){var C,A;if(!I)throw new GI;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const l=`#_callRefreshToken(${I.substring(0,5)}...)`;this._debug(l,"begin");try{this.refreshingDeferred=new be;const{data:e,error:d}=await this._refreshAccessToken(I);if(d)throw d;if(!e.session)throw new GI;await this._saveSession(e.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",e.session);const n={session:e.session,error:null};return this.refreshingDeferred.resolve(n),n}catch(e){if(this._debug(l,"error",e),p(e)){const d={session:null,error:e};return nd(e)||await this._removeSession(),(C=this.refreshingDeferred)===null||C===void 0||C.resolve(d),d}throw(A=this.refreshingDeferred)===null||A===void 0||A.reject(e),e}finally{this.refreshingDeferred=null,this._debug(l,"end")}}async _notifyAllSubscribers(I,C,A=!0){const l=`#_notifyAllSubscribers(${I})`;this._debug(l,"begin",C,`broadcast = ${A}`);try{this.broadcastChannel&&A&&this.broadcastChannel.postMessage({event:I,session:C});const e=[],d=Array.from(this.stateChangeEmitters.values()).map(async n=>{try{await n.callback(I,C)}catch(c){e.push(c)}});if(await Promise.all(d),e.length>0){for(let n=0;n<e.length;n+=1)console.error(e[n]);throw e[0]}}finally{this._debug(l,"end")}}async _saveSession(I){this._debug("#_saveSession()",I),this.suppressGetSessionWarning=!0;const C=Object.assign({},I),A=C.user&&C.user.__isUserNotAvailableProxy===!0;if(this.userStorage){!A&&C.user&&await aC(this.userStorage,this.storageKey+"-user",{user:C.user});const l=Object.assign({},C);delete l.user;const e=Mt(l);await aC(this.storage,this.storageKey,e)}else{const l=Mt(C);await aC(this.storage,this.storageKey,l)}}async _removeSession(){this._debug("#_removeSession()"),await aI(this.storage,this.storageKey),await aI(this.storage,this.storageKey+"-code-verifier"),await aI(this.storage,this.storageKey+"-user"),this.userStorage&&await aI(this.userStorage,this.storageKey+"-user"),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const I=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{I&&Ug()&&(window!=null&&window.removeEventListener)&&window.removeEventListener("visibilitychange",I)}catch(C){console.error("removing visibilitychange callback failed",C)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const I=setInterval(()=>this._autoRefreshTokenTick(),sC);this.autoRefreshTicker=I,I&&typeof I=="object"&&typeof I.unref=="function"?I.unref():typeof Deno<"u"&&typeof Deno.unrefTimer=="function"&&Deno.unrefTimer(I),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const I=this.autoRefreshTicker;this.autoRefreshTicker=null,I&&clearInterval(I)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const I=Date.now();try{return await this._useSession(async C=>{const{data:{session:A}}=C;if(!A||!A.refresh_token||!A.expires_at){this._debug("#_autoRefreshTokenTick()","no session");return}const l=Math.floor((A.expires_at*1e3-I)/sC);this._debug("#_autoRefreshTokenTick()",`access token expires in ${l} ticks, a tick lasts ${sC}ms, refresh threshold is ${on} ticks`),l<=on&&await this._callRefreshToken(A.refresh_token)})}catch(C){console.error("Auto refresh tick failed with error. This is likely a transient error.",C)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(I){if(I.isAcquireTimeout||I instanceof wZ)this._debug("auto refresh token tick lock not available");else throw I}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!Ug()||!(window!=null&&window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),window==null||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(I){console.error("_handleVisibilityChange",I)}}async _onVisibilityChanged(I){const C=`#_onVisibilityChanged(${I})`;this._debug(C,"visibilityState",document.visibilityState),document.visibilityState==="visible"?(this.autoRefreshToken&&this._startAutoRefresh(),I||(await this.initializePromise,await this._acquireLock(-1,async()=>{if(document.visibilityState!=="visible"){this._debug(C,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");return}await this._recoverAndRefresh()}))):document.visibilityState==="hidden"&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(I,C,A){const l=[`provider=${encodeURIComponent(C)}`];if(A!=null&&A.redirectTo&&l.push(`redirect_to=${encodeURIComponent(A.redirectTo)}`),A!=null&&A.scopes&&l.push(`scopes=${encodeURIComponent(A.scopes)}`),this.flowType==="pkce"){const[e,d]=await cC(this.storage,this.storageKey),n=new URLSearchParams({code_challenge:`${encodeURIComponent(e)}`,code_challenge_method:`${encodeURIComponent(d)}`});l.push(n.toString())}if(A!=null&&A.queryParams){const e=new URLSearchParams(A.queryParams);l.push(e.toString())}return A!=null&&A.skipBrowserRedirect&&l.push(`skip_http_redirect=${A.skipBrowserRedirect}`),`${I}?${l.join("&")}`}async _unenroll(I){try{return await this._useSession(async C=>{var A;const{data:l,error:e}=C;return e?{data:null,error:e}:await H(this.fetch,"DELETE",`${this.url}/factors/${I.factorId}`,{headers:this.headers,jwt:(A=l==null?void 0:l.session)===null||A===void 0?void 0:A.access_token})})}catch(C){if(p(C))return{data:null,error:C};throw C}}async _enroll(I){try{return await this._useSession(async C=>{var A,l;const{data:e,error:d}=C;if(d)return{data:null,error:d};const n=Object.assign({friendly_name:I.friendlyName,factor_type:I.factorType},I.factorType==="phone"?{phone:I.phone}:{issuer:I.issuer}),{data:c,error:t}=await H(this.fetch,"POST",`${this.url}/factors`,{body:n,headers:this.headers,jwt:(A=e==null?void 0:e.session)===null||A===void 0?void 0:A.access_token});return t?{data:null,error:t}:(I.factorType==="totp"&&(!((l=c==null?void 0:c.totp)===null||l===void 0)&&l.qr_code)&&(c.totp.qr_code=`data:image/svg+xml;utf-8,${c.totp.qr_code}`),{data:c,error:null})})}catch(C){if(p(C))return{data:null,error:C};throw C}}async _verify(I){return this._acquireLock(-1,async()=>{try{return await this._useSession(async C=>{var A;const{data:l,error:e}=C;if(e)return{data:null,error:e};const{data:d,error:n}=await H(this.fetch,"POST",`${this.url}/factors/${I.factorId}/verify`,{body:{code:I.code,challenge_id:I.challengeId},headers:this.headers,jwt:(A=l==null?void 0:l.session)===null||A===void 0?void 0:A.access_token});return n?{data:null,error:n}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+d.expires_in},d)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",d),{data:d,error:n})})}catch(C){if(p(C))return{data:null,error:C};throw C}})}async _challenge(I){return this._acquireLock(-1,async()=>{try{return await this._useSession(async C=>{var A;const{data:l,error:e}=C;return e?{data:null,error:e}:await H(this.fetch,"POST",`${this.url}/factors/${I.factorId}/challenge`,{body:{channel:I.channel},headers:this.headers,jwt:(A=l==null?void 0:l.session)===null||A===void 0?void 0:A.access_token})})}catch(C){if(p(C))return{data:null,error:C};throw C}})}async _challengeAndVerify(I){const{data:C,error:A}=await this._challenge({factorId:I.factorId});return A?{data:null,error:A}:await this._verify({factorId:I.factorId,challengeId:C.id,code:I.code})}async _listFactors(){const{data:{user:I},error:C}=await this.getUser();if(C)return{data:null,error:C};const A=(I==null?void 0:I.factors)||[],l=A.filter(d=>d.factor_type==="totp"&&d.status==="verified"),e=A.filter(d=>d.factor_type==="phone"&&d.status==="verified");return{data:{all:A,totp:l,phone:e},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async I=>{var C,A;const{data:{session:l},error:e}=I;if(e)return{data:null,error:e};if(!l)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:d}=cd(l.access_token);let n=null;d.aal&&(n=d.aal);let c=n;((A=(C=l.user.factors)===null||C===void 0?void 0:C.filter(i=>i.status==="verified"))!==null&&A!==void 0?A:[]).length>0&&(c="aal2");const o=d.amr||[];return{data:{currentLevel:n,nextLevel:c,currentAuthenticationMethods:o},error:null}}))}async fetchJwk(I,C={keys:[]}){let A=C.keys.find(n=>n.kid===I);if(A)return A;const l=Date.now();if(A=this.jwks.keys.find(n=>n.kid===I),A&&this.jwks_cached_at+Nu>l)return A;const{data:e,error:d}=await H(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(d)throw d;return!e.keys||e.keys.length===0||(this.jwks=e,this.jwks_cached_at=l,A=e.keys.find(n=>n.kid===I),!A)?null:A}async getClaims(I,C={}){try{let A=I;if(!A){const{data:u,error:b}=await this.getSession();if(b||!u.session)return{data:null,error:b};A=u.session.access_token}const{header:l,payload:e,signature:d,raw:{header:n,payload:c}}=cd(A);C!=null&&C.allowExpired||nm(e.exp);const t=!l.alg||l.alg.startsWith("HS")||!l.kid||!("crypto"in globalThis&&"subtle"in globalThis.crypto)?null:await this.fetchJwk(l.kid,C!=null&&C.keys?{keys:C.keys}:C==null?void 0:C.jwks);if(!t){const{error:u}=await this.getUser(A);if(u)throw u;return{data:{claims:e,header:l,signature:d},error:null}}const o=cm(l.alg),i=await crypto.subtle.importKey("jwk",t,o,!0,["verify"]);if(!await crypto.subtle.verify(o,i,d,Tu(`${n}.${c}`)))throw new an("Invalid JWT signature");return{data:{claims:e,header:l,signature:d},error:null}}catch(A){if(p(A))return{data:null,error:A};throw A}}}KA.nextInstanceID=0;const Vm=KA;class Sm extends Vm{constructor(I){super(I)}}var Xm=globalThis&&globalThis.__awaiter||function(g,I,C,A){function l(e){return e instanceof C?e:new C(function(d){d(e)})}return new(C||(C=Promise))(function(e,d){function n(o){try{t(A.next(o))}catch(i){d(i)}}function c(o){try{t(A.throw(o))}catch(i){d(i)}}function t(o){o.done?e(o.value):l(o.value).then(n,c)}t((A=A.apply(g,I||[])).next())})};class Jm{constructor(I,C,A){var l,e,d;if(this.supabaseUrl=I,this.supabaseKey=C,!I)throw new Error("supabaseUrl is required.");if(!C)throw new Error("supabaseKey is required.");const n=Yu(I),c=new URL(n);this.realtimeUrl=new URL("realtime/v1",c),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",c),this.storageUrl=new URL("storage/v1",c),this.functionsUrl=new URL("functions/v1",c);const t=`sb-${c.hostname.split(".")[0]}-auth-token`,o={db:Wu,realtime:Su,auth:Object.assign(Object.assign({},Vu),{storageKey:t}),global:yu},i=Hu(A??{},o);this.storageKey=(l=i.auth.storageKey)!==null&&l!==void 0?l:"",this.headers=(e=i.global.headers)!==null&&e!==void 0?e:{},i.accessToken?(this.accessToken=i.accessToken,this.auth=new Proxy({},{get:(a,u)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(u)} is not possible`)}})):this.auth=this._initSupabaseAuthClient((d=i.auth)!==null&&d!==void 0?d:{},this.headers,i.global.fetch),this.fetch=pu(C,this._getAccessToken.bind(this),i.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},i.realtime)),this.rest=new xG(new URL("rest/v1",c).href,{headers:this.headers,schema:i.db.schema,fetch:this.fetch}),this.storage=new ru(this.storageUrl.href,this.headers,this.fetch,A==null?void 0:A.storage),i.accessToken||this._listenForAuthEvents()}get functions(){return new hG(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}from(I){return this.rest.from(I)}schema(I){return this.rest.schema(I)}rpc(I,C={},A={}){return this.rest.rpc(I,C,A)}channel(I,C={config:{}}){return this.realtime.channel(I,C)}getChannels(){return this.realtime.getChannels()}removeChannel(I){return this.realtime.removeChannel(I)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var I,C;return Xm(this,void 0,void 0,function*(){if(this.accessToken)return yield this.accessToken();const{data:A}=yield this.auth.getSession();return(C=(I=A.session)===null||I===void 0?void 0:I.access_token)!==null&&C!==void 0?C:null})}_initSupabaseAuthClient({autoRefreshToken:I,persistSession:C,detectSessionInUrl:A,storage:l,storageKey:e,flowType:d,lock:n,debug:c},t,o){const i={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new Sm({url:this.authUrl.href,headers:Object.assign(Object.assign({},i),t),storageKey:e,autoRefreshToken:I,persistSession:C,detectSessionInUrl:A,storage:l,flowType:d,lock:n,debug:c,fetch:o,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(I){return new du(this.realtimeUrl.href,Object.assign(Object.assign({},I),{params:Object.assign({apikey:this.supabaseKey},I==null?void 0:I.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((C,A)=>{this._handleTokenChanged(C,"CLIENT",A==null?void 0:A.access_token)})}_handleTokenChanged(I,C,A){(I==="TOKEN_REFRESHED"||I==="SIGNED_IN")&&this.changedAccessToken!==A?this.changedAccessToken=A:I==="SIGNED_OUT"&&(this.realtime.setAuth(),C=="STORAGE"&&this.auth.signOut(),this.changedAccessToken=void 0)}}const Rm=(g,I,C)=>new Jm(g,I,C);function pm(){if(typeof window<"u"||typeof process>"u"||process.version===void 0||process.version===null)return!1;const g=process.version.match(/^v(\d+)\./);return g?parseInt(g[1],10)<=18:!1}pm()&&console.warn("⚠️  Node.js 18 and below are deprecated and will no longer be supported in future versions of @supabase/supabase-js. Please upgrade to Node.js 20 or later. For more information, visit: https://github.com/orgs/supabase/discussions/37217");const km="https://qwbanpmrvoukfkotpptc.supabase.co",Ym="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF3YmFucG1ydm91a2Zrb3RwcHRjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxOTI1ODIsImV4cCI6MjA2OTc2ODU4Mn0.wlkfvTBzuleuCfNJSdTteFEoTGNyq6blb8iCWs22MQ4",Gn=Rm(km,Ym);function Hm({onLogin:g}){const[I,C]=E.useState(""),[A,l]=E.useState(""),[e,d]=E.useState(null),n=async()=>{const{data:c,error:t}=await Gn.from("users").select("*").eq("id",I).eq("pass",A).single();t||!c?d("ログイン失敗"):(localStorage.setItem("user",JSON.stringify(c)),g(c))};return L.jsxs("div",{children:[L.jsx("h2",{children:"ログイン"}),L.jsx("input",{type:"text",placeholder:"ユーザーID",value:I,onChange:c=>C(c.target.value)}),L.jsx("br",{}),L.jsx("input",{type:"password",placeholder:"パスワード",value:A,onChange:c=>l(c.target.value)}),L.jsx("br",{}),L.jsx("button",{onClick:n,children:"ログイン"}),e&&L.jsx("p",{style:{color:"red"},children:e})]})}function un(){return un=Object.assign?Object.assign.bind():function(g){for(var I=1;I<arguments.length;I++){var C=arguments[I];for(var A in C)({}).hasOwnProperty.call(C,A)&&(g[A]=C[A])}return g},un.apply(null,arguments)}function wA(g){"@babel/helpers - typeof";return wA=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(I){return typeof I}:function(I){return I&&typeof Symbol=="function"&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},wA(g)}function vm(g,I){if(wA(g)!="object"||!g)return g;var C=g[Symbol.toPrimitive];if(C!==void 0){var A=C.call(g,I||"default");if(wA(A)!="object")return A;throw new TypeError("@@toPrimitive must return a primitive value.")}return(I==="string"?String:Number)(g)}function Km(g){var I=vm(g,"string");return wA(I)=="symbol"?I:I+""}function wm(g,I,C){return(I=Km(I))in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}function Fm(g){if(Array.isArray(g))return g}function Nm(g,I){var C=g==null?null:typeof Symbol<"u"&&g[Symbol.iterator]||g["@@iterator"];if(C!=null){var A,l,e,d,n=[],c=!0,t=!1;try{if(e=(C=C.call(g)).next,I===0){if(Object(C)!==C)return;c=!1}else for(;!(c=(A=e.call(C)).done)&&(n.push(A.value),n.length!==I);c=!0);}catch(o){t=!0,l=o}finally{try{if(!c&&C.return!=null&&(d=C.return(),Object(d)!==d))return}finally{if(t)throw l}}return n}}function jt(g,I){(I==null||I>g.length)&&(I=g.length);for(var C=0,A=Array(I);C<I;C++)A[C]=g[C];return A}function fm(g,I){if(g){if(typeof g=="string")return jt(g,I);var C={}.toString.call(g).slice(8,-1);return C==="Object"&&g.constructor&&(C=g.constructor.name),C==="Map"||C==="Set"?Array.from(g):C==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C)?jt(g,I):void 0}}function zm(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Um(g,I){return Fm(g)||Nm(g,I)||fm(g,I)||zm()}function Qm(g,I){if(g==null)return{};var C={};for(var A in g)if({}.hasOwnProperty.call(g,A)){if(I.indexOf(A)!==-1)continue;C[A]=g[A]}return C}function Em(g,I){if(g==null)return{};var C,A,l=Qm(g,I);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(g);for(A=0;A<e.length;A++)C=e[A],I.indexOf(C)===-1&&{}.propertyIsEnumerable.call(g,C)&&(l[C]=g[C])}return l}var FZ={exports:{}},N={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var eg=typeof Symbol=="function"&&Symbol.for,uc=eg?Symbol.for("react.element"):60103,mc=eg?Symbol.for("react.portal"):60106,re=eg?Symbol.for("react.fragment"):60107,Be=eg?Symbol.for("react.strict_mode"):60108,he=eg?Symbol.for("react.profiler"):60114,ye=eg?Symbol.for("react.provider"):60109,We=eg?Symbol.for("react.context"):60110,bc=eg?Symbol.for("react.async_mode"):60111,Ve=eg?Symbol.for("react.concurrent_mode"):60111,Se=eg?Symbol.for("react.forward_ref"):60112,Xe=eg?Symbol.for("react.suspense"):60113,Mm=eg?Symbol.for("react.suspense_list"):60120,Je=eg?Symbol.for("react.memo"):60115,Re=eg?Symbol.for("react.lazy"):60116,Lm=eg?Symbol.for("react.block"):60121,xm=eg?Symbol.for("react.fundamental"):60117,Dm=eg?Symbol.for("react.responder"):60118,Tm=eg?Symbol.for("react.scope"):60119;function Yg(g){if(typeof g=="object"&&g!==null){var I=g.$$typeof;switch(I){case uc:switch(g=g.type,g){case bc:case Ve:case re:case he:case Be:case Xe:return g;default:switch(g=g&&g.$$typeof,g){case We:case Se:case Re:case Je:case ye:return g;default:return I}}case mc:return I}}}function NZ(g){return Yg(g)===Ve}N.AsyncMode=bc;N.ConcurrentMode=Ve;N.ContextConsumer=We;N.ContextProvider=ye;N.Element=uc;N.ForwardRef=Se;N.Fragment=re;N.Lazy=Re;N.Memo=Je;N.Portal=mc;N.Profiler=he;N.StrictMode=Be;N.Suspense=Xe;N.isAsyncMode=function(g){return NZ(g)||Yg(g)===bc};N.isConcurrentMode=NZ;N.isContextConsumer=function(g){return Yg(g)===We};N.isContextProvider=function(g){return Yg(g)===ye};N.isElement=function(g){return typeof g=="object"&&g!==null&&g.$$typeof===uc};N.isForwardRef=function(g){return Yg(g)===Se};N.isFragment=function(g){return Yg(g)===re};N.isLazy=function(g){return Yg(g)===Re};N.isMemo=function(g){return Yg(g)===Je};N.isPortal=function(g){return Yg(g)===mc};N.isProfiler=function(g){return Yg(g)===he};N.isStrictMode=function(g){return Yg(g)===Be};N.isSuspense=function(g){return Yg(g)===Xe};N.isValidElementType=function(g){return typeof g=="string"||typeof g=="function"||g===re||g===Ve||g===he||g===Be||g===Xe||g===Mm||typeof g=="object"&&g!==null&&(g.$$typeof===Re||g.$$typeof===Je||g.$$typeof===ye||g.$$typeof===We||g.$$typeof===Se||g.$$typeof===xm||g.$$typeof===Dm||g.$$typeof===Tm||g.$$typeof===Lm)};N.typeOf=Yg;/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var Pt=Object.getOwnPropertySymbols,jm=Object.prototype.hasOwnProperty,Pm=Object.prototype.propertyIsEnumerable;function Om(g){if(g==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(g)}function qm(){try{if(!Object.assign)return!1;var g=new String("abc");if(g[5]="de",Object.getOwnPropertyNames(g)[0]==="5")return!1;for(var I={},C=0;C<10;C++)I["_"+String.fromCharCode(C)]=C;var A=Object.getOwnPropertyNames(I).map(function(e){return I[e]});if(A.join("")!=="0123456789")return!1;var l={};return"abcdefghijklmnopqrst".split("").forEach(function(e){l[e]=e}),Object.keys(Object.assign({},l)).join("")==="abcdefghijklmnopqrst"}catch{return!1}}qm();var _m="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",$m=_m;Function.call.bind(Object.prototype.hasOwnProperty);var gb=$m;function fZ(){}function zZ(){}zZ.resetWarningCache=fZ;var Ib=function(){function g(A,l,e,d,n,c){if(c!==gb){var t=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw t.name="Invariant Violation",t}}g.isRequired=g;function I(){return g}var C={array:g,bigint:g,bool:g,func:g,number:g,object:g,string:g,symbol:g,any:g,arrayOf:I,element:g,elementType:g,instanceOf:I,node:g,objectOf:I,oneOf:I,oneOfType:I,shape:I,exact:I,checkPropTypes:zZ,resetWarningCache:fZ};return C.PropTypes=C,C};FZ.exports=Ib();var ZC=FZ.exports;function Cb(g,I){var C=atob(g);if(I){for(var A=new Uint8Array(C.length),l=0,e=C.length;l<e;++l)A[l]=C.charCodeAt(l);return String.fromCharCode.apply(null,new Uint16Array(A.buffer))}return C}function Ab(g,I,C){var A=I===void 0?null:I,l=C===void 0?!1:C,e=Cb(g,l),d=e.indexOf(`
`,10)+1,n=e.substring(d)+(A?"//# sourceMappingURL="+A:""),c=new Blob([n],{type:"application/javascript"});return URL.createObjectURL(c)}function lb(g,I,C){var A;return function(e){return A=A||Ab(g,I,C),new Worker(A,e)}}var eb=lb("",null,!1),db=["constraints","onError","onLoad","onScan","resolution","qrArea"];function Ot(g,I){var C=Object.keys(g);if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(g);I&&(A=A.filter(function(l){return Object.getOwnPropertyDescriptor(g,l).enumerable})),C.push.apply(C,A)}return C}function qt(g){for(var I=1;I<arguments.length;I++){var C=arguments[I]!=null?arguments[I]:{};I%2?Ot(Object(C),!0).forEach(function(A){wm(g,A,C[A])}):Object.getOwnPropertyDescriptors?Object.defineProperties(g,Object.getOwnPropertyDescriptors(C)):Ot(Object(C)).forEach(function(A){Object.defineProperty(g,A,Object.getOwnPropertyDescriptor(C,A))})}return g}var nb=function(){return new eb},_t=function(I){I&&(I.getVideoTracks&&I.getAudioTracks?(I.getVideoTracks().forEach(function(C){I.removeTrack(C),C.stop()}),I.getAudioTracks().forEach(function(C){I.removeTrack(C),C.stop()})):I.stop())},rc=function(I){var C=I.constraints,A=I.onError,l=I.onLoad,e=I.onScan,d=I.resolution,n=I.qrArea,c=Em(I,db),t=E.useRef(null),o=E.useRef(null),i=E.useRef(document.createElement("canvas")),a=E.useRef(null),u=E.useRef(),b=E.useState(null),r=Um(b,2),V=r[0],G=r[1],Z=E.useRef(!1),s=E.useRef();E.useEffect(function(){s.current=nb();var y=s.current;return y.onmessage=function(J){e&&e(J.data?qt(qt({},J.data),{},{canvas:i.current}):null),Z.current=!1},function(){y.terminate()}},[e]);var m=JSON.stringify(n),h=E.useCallback(function(){var y=JSON.parse(m),J=s.current,w=o.current&&o.current.readyState===o.current.HAVE_ENOUGH_DATA;if(!Z.current&&w){Z.current=!0;var R=o.current.videoWidth,q=o.current.videoHeight,NI=R>q?R:q,ZI=Math.floor(d/NI*100)/100;q=Math.floor(ZI*q),R=Math.floor(ZI*R),i.current.width=R,i.current.height=q,a.current=i.current.getContext("2d"),a.current.drawImage(o.current,0,0,R,q);var eC;y&&y.length===2&&y[0]>0&&y[1]>0?eC=a.current.getImageData(Math.floor((R-y[0])/2),Math.floor((q-y[1])/2),y[0],y[1]):eC=a.current.getImageData(0,0,R,q),J.postMessage(eC)}u.current=requestAnimationFrame(h)},[d,m]),W=JSON.stringify(C);return E.useEffect(function(){var y=JSON.parse(W),J=!0;return navigator.mediaDevices.getUserMedia(y).then(function(w){if(!J)_t(w);else{t.current=w;try{o.current&&(o.current.srcObject=w,o.current.setAttribute("playsinline",!0))}catch{G(window.URL.createObjectURL(w))}l&&l(),u.current=requestAnimationFrame(h)}}).catch(function(w){return J?A(w):null}),function(){cancelAnimationFrame(u.current),J=!1,_t(t.current),V&&window.URL.revokeObjectURL(V)}},[h,W,A,l,V]),E.createElement("video",un({autoPlay:!0,playsInline:!0,src:V,ref:o},c))};rc.propTypes={constraints:ZC.object,onError:ZC.func.isRequired,onLoad:ZC.func,onScan:ZC.func.isRequired,resolution:ZC.number,qrArea:ZC.array};rc.defaultProps={constraints:{audio:!1,video:!0},resolution:640,qrArea:[]};function cb({user:g,onLogout:I}){const[C,A]=E.useState(null),[l,e]=E.useState(!1),[d,n]=E.useState(null),[c,t]=E.useState(g.score),o=async i=>{if(i&&typeof i=="object"&&i.text){const a=i.text;A(a),e(!1),console.log("Scanned data:",a);const{data:u,error:b}=await Gn.from("checkpoints").select("point").eq("cp_id",a).single();if(b||!u){alert("チェックポイントが見つかりません");return}const r=c+u.point;t(r),await Gn.from("users").update({score:r}).eq("id",g.id),n(`一致: ${a} の得点 ${u.point}P を追加しました`)}};return L.jsxs("div",{children:[L.jsx("h2",{children:"ホーム"}),L.jsxs("p",{children:["ようこそ、",g.id," さん"]}),L.jsxs("p",{children:["現在",c,"P"]}),L.jsx("button",{onClick:I,children:"ログアウト"}),L.jsx("h3",{children:"QRコードを読み取る"}),L.jsx("button",{onClick:()=>e(!0),children:"QRコード読み取り開始"}),l&&L.jsx(rc,{delay:300,onError:i=>console.error(i),onScan:o,style:{width:"100%"}}),C&&L.jsxs("div",{children:[L.jsxs("p",{children:["読み取った内容: ",C]}),d&&L.jsx("p",{children:d})]})]})}function tb(){const[g,I]=E.useState(null);E.useEffect(()=>{const l=localStorage.getItem("user");l&&I(JSON.parse(l))},[]);const C=l=>I(l),A=()=>{localStorage.removeItem("user"),I(null)};return g?L.jsx(cb,{user:g,onLogout:A}):L.jsx(Hm,{onLogin:C})}id.createRoot(document.getElementById("root")).render(L.jsx(ls.StrictMode,{children:L.jsx(tb,{})}));
